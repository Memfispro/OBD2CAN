
build/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000100 <Reset_Handler>:
 8000100:	b672      	cpsid	i
 8000102:	4824      	ldr	r0, [pc, #144]	; (8000194 <endfiniloop+0x6>)
 8000104:	f380 8808 	msr	MSP, r0
 8000108:	4823      	ldr	r0, [pc, #140]	; (8000198 <endfiniloop+0xa>)
 800010a:	f380 8809 	msr	PSP, r0
 800010e:	2002      	movs	r0, #2
 8000110:	f380 8814 	msr	CONTROL, r0
 8000114:	f3bf 8f6f 	isb	sy
 8000118:	f004 ff8a 	bl	8005030 <__core_init>
 800011c:	f004 fe80 	bl	8004e20 <__early_init>
 8000120:	481e      	ldr	r0, [pc, #120]	; (800019c <endfiniloop+0xe>)
 8000122:	491f      	ldr	r1, [pc, #124]	; (80001a0 <endfiniloop+0x12>)
 8000124:	4a1b      	ldr	r2, [pc, #108]	; (8000194 <endfiniloop+0x6>)

08000126 <msloop>:
 8000126:	4291      	cmp	r1, r2
 8000128:	da02      	bge.n	8000130 <endmsloop>
 800012a:	6008      	str	r0, [r1, #0]
 800012c:	3104      	adds	r1, #4
 800012e:	e7fa      	b.n	8000126 <msloop>

08000130 <endmsloop>:
 8000130:	491c      	ldr	r1, [pc, #112]	; (80001a4 <endfiniloop+0x16>)
 8000132:	4a19      	ldr	r2, [pc, #100]	; (8000198 <endfiniloop+0xa>)

08000134 <psloop>:
 8000134:	4291      	cmp	r1, r2
 8000136:	da02      	bge.n	800013e <endpsloop>
 8000138:	6008      	str	r0, [r1, #0]
 800013a:	3104      	adds	r1, #4
 800013c:	e7fa      	b.n	8000134 <psloop>

0800013e <endpsloop>:
 800013e:	491a      	ldr	r1, [pc, #104]	; (80001a8 <endfiniloop+0x1a>)
 8000140:	4a1a      	ldr	r2, [pc, #104]	; (80001ac <endfiniloop+0x1e>)
 8000142:	4b1b      	ldr	r3, [pc, #108]	; (80001b0 <endfiniloop+0x22>)

08000144 <dloop>:
 8000144:	429a      	cmp	r2, r3
 8000146:	da04      	bge.n	8000152 <enddloop>
 8000148:	6808      	ldr	r0, [r1, #0]
 800014a:	6010      	str	r0, [r2, #0]
 800014c:	3104      	adds	r1, #4
 800014e:	3204      	adds	r2, #4
 8000150:	e7f8      	b.n	8000144 <dloop>

08000152 <enddloop>:
 8000152:	2000      	movs	r0, #0
 8000154:	4917      	ldr	r1, [pc, #92]	; (80001b4 <endfiniloop+0x26>)
 8000156:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <endfiniloop+0x2a>)

08000158 <bloop>:
 8000158:	4291      	cmp	r1, r2
 800015a:	da02      	bge.n	8000162 <endbloop>
 800015c:	6008      	str	r0, [r1, #0]
 800015e:	3104      	adds	r1, #4
 8000160:	e7fa      	b.n	8000158 <bloop>

08000162 <endbloop>:
 8000162:	f004 ff05 	bl	8004f70 <__init_ram_areas>
 8000166:	f004 ff5b 	bl	8005020 <__late_init>
 800016a:	4c14      	ldr	r4, [pc, #80]	; (80001bc <endfiniloop+0x2e>)
 800016c:	4d14      	ldr	r5, [pc, #80]	; (80001c0 <endfiniloop+0x32>)

0800016e <initloop>:
 800016e:	42ac      	cmp	r4, r5
 8000170:	da03      	bge.n	800017a <endinitloop>
 8000172:	6821      	ldr	r1, [r4, #0]
 8000174:	4788      	blx	r1
 8000176:	3404      	adds	r4, #4
 8000178:	e7f9      	b.n	800016e <initloop>

0800017a <endinitloop>:
 800017a:	f005 fc69 	bl	8005a50 <main>
 800017e:	4c11      	ldr	r4, [pc, #68]	; (80001c4 <endfiniloop+0x36>)
 8000180:	4d11      	ldr	r5, [pc, #68]	; (80001c8 <endfiniloop+0x3a>)

08000182 <finiloop>:
 8000182:	42ac      	cmp	r4, r5
 8000184:	da03      	bge.n	800018e <endfiniloop>
 8000186:	6821      	ldr	r1, [r4, #0]
 8000188:	4788      	blx	r1
 800018a:	3404      	adds	r4, #4
 800018c:	e7f9      	b.n	8000182 <finiloop>

0800018e <endfiniloop>:
 800018e:	490f      	ldr	r1, [pc, #60]	; (80001cc <endfiniloop+0x3e>)
 8000190:	4708      	bx	r1
 8000192:	0000      	.short	0x0000
 8000194:	20000200 	.word	0x20000200
 8000198:	20000400 	.word	0x20000400
 800019c:	55555555 	.word	0x55555555
 80001a0:	20000000 	.word	0x20000000
 80001a4:	20000200 	.word	0x20000200
 80001a8:	080073cc 	.word	0x080073cc
 80001ac:	20000400 	.word	0x20000400
 80001b0:	200004b0 	.word	0x200004b0
 80001b4:	200004b0 	.word	0x200004b0
 80001b8:	200010a8 	.word	0x200010a8
 80001bc:	08000100 	.word	0x08000100
 80001c0:	08000100 	.word	0x08000100
 80001c4:	08000100 	.word	0x08000100
 80001c8:	08000100 	.word	0x08000100
 80001cc:	08005011 	.word	0x08005011

080001d0 <_port_switch>:
 80001d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001d2:	4644      	mov	r4, r8
 80001d4:	464d      	mov	r5, r9
 80001d6:	4656      	mov	r6, sl
 80001d8:	465f      	mov	r7, fp
 80001da:	b4f0      	push	{r4, r5, r6, r7}
 80001dc:	466b      	mov	r3, sp
 80001de:	60cb      	str	r3, [r1, #12]
 80001e0:	68c3      	ldr	r3, [r0, #12]
 80001e2:	469d      	mov	sp, r3
 80001e4:	bcf0      	pop	{r4, r5, r6, r7}
 80001e6:	46a0      	mov	r8, r4
 80001e8:	46a9      	mov	r9, r5
 80001ea:	46b2      	mov	sl, r6
 80001ec:	46bb      	mov	fp, r7
 80001ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001f0 <_port_thread_start>:
 80001f0:	b662      	cpsie	i
 80001f2:	1c28      	adds	r0, r5, #0
 80001f4:	47a0      	blx	r4
 80001f6:	2000      	movs	r0, #0
 80001f8:	f004 fe6a 	bl	8004ed0 <chThdExit>

080001fc <_port_switch_from_isr>:
 80001fc:	f004 fe98 	bl	8004f30 <chSchDoReschedule>

08000200 <_port_exit_from_isr>:
 8000200:	4a01      	ldr	r2, [pc, #4]	; (8000208 <_port_exit_from_isr+0x8>)
 8000202:	4b02      	ldr	r3, [pc, #8]	; (800020c <_port_exit_from_isr+0xc>)
 8000204:	6013      	str	r3, [r2, #0]
 8000206:	e7fe      	b.n	8000206 <_port_exit_from_isr+0x6>
 8000208:	e000ed04 	.word	0xe000ed04
 800020c:	80000000 	.word	0x80000000

08000210 <__aeabi_uidiv>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d034      	beq.n	800027e <.udivsi3_skip_div0_test+0x6a>

08000214 <.udivsi3_skip_div0_test>:
 8000214:	2301      	movs	r3, #1
 8000216:	2200      	movs	r2, #0
 8000218:	b410      	push	{r4}
 800021a:	4288      	cmp	r0, r1
 800021c:	d32c      	bcc.n	8000278 <.udivsi3_skip_div0_test+0x64>
 800021e:	2401      	movs	r4, #1
 8000220:	0724      	lsls	r4, r4, #28
 8000222:	42a1      	cmp	r1, r4
 8000224:	d204      	bcs.n	8000230 <.udivsi3_skip_div0_test+0x1c>
 8000226:	4281      	cmp	r1, r0
 8000228:	d202      	bcs.n	8000230 <.udivsi3_skip_div0_test+0x1c>
 800022a:	0109      	lsls	r1, r1, #4
 800022c:	011b      	lsls	r3, r3, #4
 800022e:	e7f8      	b.n	8000222 <.udivsi3_skip_div0_test+0xe>
 8000230:	00e4      	lsls	r4, r4, #3
 8000232:	42a1      	cmp	r1, r4
 8000234:	d204      	bcs.n	8000240 <.udivsi3_skip_div0_test+0x2c>
 8000236:	4281      	cmp	r1, r0
 8000238:	d202      	bcs.n	8000240 <.udivsi3_skip_div0_test+0x2c>
 800023a:	0049      	lsls	r1, r1, #1
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	e7f8      	b.n	8000232 <.udivsi3_skip_div0_test+0x1e>
 8000240:	4288      	cmp	r0, r1
 8000242:	d301      	bcc.n	8000248 <.udivsi3_skip_div0_test+0x34>
 8000244:	1a40      	subs	r0, r0, r1
 8000246:	431a      	orrs	r2, r3
 8000248:	084c      	lsrs	r4, r1, #1
 800024a:	42a0      	cmp	r0, r4
 800024c:	d302      	bcc.n	8000254 <.udivsi3_skip_div0_test+0x40>
 800024e:	1b00      	subs	r0, r0, r4
 8000250:	085c      	lsrs	r4, r3, #1
 8000252:	4322      	orrs	r2, r4
 8000254:	088c      	lsrs	r4, r1, #2
 8000256:	42a0      	cmp	r0, r4
 8000258:	d302      	bcc.n	8000260 <.udivsi3_skip_div0_test+0x4c>
 800025a:	1b00      	subs	r0, r0, r4
 800025c:	089c      	lsrs	r4, r3, #2
 800025e:	4322      	orrs	r2, r4
 8000260:	08cc      	lsrs	r4, r1, #3
 8000262:	42a0      	cmp	r0, r4
 8000264:	d302      	bcc.n	800026c <.udivsi3_skip_div0_test+0x58>
 8000266:	1b00      	subs	r0, r0, r4
 8000268:	08dc      	lsrs	r4, r3, #3
 800026a:	4322      	orrs	r2, r4
 800026c:	2800      	cmp	r0, #0
 800026e:	d003      	beq.n	8000278 <.udivsi3_skip_div0_test+0x64>
 8000270:	091b      	lsrs	r3, r3, #4
 8000272:	d001      	beq.n	8000278 <.udivsi3_skip_div0_test+0x64>
 8000274:	0909      	lsrs	r1, r1, #4
 8000276:	e7e3      	b.n	8000240 <.udivsi3_skip_div0_test+0x2c>
 8000278:	1c10      	adds	r0, r2, #0
 800027a:	bc10      	pop	{r4}
 800027c:	4770      	bx	lr
 800027e:	2800      	cmp	r0, #0
 8000280:	d001      	beq.n	8000286 <.udivsi3_skip_div0_test+0x72>
 8000282:	2000      	movs	r0, #0
 8000284:	43c0      	mvns	r0, r0
 8000286:	b407      	push	{r0, r1, r2}
 8000288:	4802      	ldr	r0, [pc, #8]	; (8000294 <.udivsi3_skip_div0_test+0x80>)
 800028a:	a102      	add	r1, pc, #8	; (adr r1, 8000294 <.udivsi3_skip_div0_test+0x80>)
 800028c:	1840      	adds	r0, r0, r1
 800028e:	9002      	str	r0, [sp, #8]
 8000290:	bd03      	pop	{r0, r1, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	0000001d 	.word	0x0000001d

08000298 <__aeabi_uidivmod>:
 8000298:	2900      	cmp	r1, #0
 800029a:	d0f0      	beq.n	800027e <.udivsi3_skip_div0_test+0x6a>
 800029c:	b503      	push	{r0, r1, lr}
 800029e:	f7ff ffb9 	bl	8000214 <.udivsi3_skip_div0_test>
 80002a2:	bc0e      	pop	{r1, r2, r3}
 80002a4:	4342      	muls	r2, r0
 80002a6:	1a89      	subs	r1, r1, r2
 80002a8:	4718      	bx	r3
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	0000      	movs	r0, r0
	...

080002b0 <__aeabi_idiv0>:
 80002b0:	4770      	bx	lr
 80002b2:	46c0      	nop			; (mov r8, r8)
	...

080002c0 <test_011_001_setup.9488>:

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <test_011_001_setup.9488+0x20>)
  H_NEXT(&heapp->header) = hp;
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <test_011_001_setup.9488+0x24>)

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 80002c4:	2200      	movs	r2, #0
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80002c6:	20cc      	movs	r0, #204	; 0xcc
  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
 80002c8:	6099      	str	r1, [r3, #8]
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
 80002ca:	600a      	str	r2, [r1, #0]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80002cc:	6048      	str	r0, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80002ce:	1c19      	adds	r1, r3, #0
 80002d0:	3110      	adds	r1, #16

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 80002d2:	601a      	str	r2, [r3, #0]
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	6119      	str	r1, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 80002d8:	6159      	str	r1, [r3, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80002da:	619a      	str	r2, [r3, #24]
 * .
 */

static void test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	200004b0 	.word	0x200004b0
 80002e4:	20000558 	.word	0x20000558
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <tmo.9632>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 80002f0:	4770      	bx	lr
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <test_009_001_setup.9231>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <test_009_001_setup.9231+0x10>)
 8000302:	2200      	movs	r2, #0
  mp->object_size = size;
 8000304:	2104      	movs	r1, #4
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8000306:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8000308:	6059      	str	r1, [r3, #4]
  mp->provider = provider;
 800030a:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_009_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 800030c:	4770      	bx	lr
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	20000470 	.word	0x20000470
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <null_provider.9221>:

  (void)size;
  (void)align;

  return NULL;
}
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <test_003_001_setup.8176>:
 *   the state of the reference are tested.
 * .
 */

static void test_003_001_setup(void) {
  tr1 = NULL;
 8000330:	4b01      	ldr	r3, [pc, #4]	; (8000338 <test_003_001_setup.8176+0x8>)
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	4770      	bx	lr
 8000338:	20000530 	.word	0x20000530
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46c0      	nop			; (mov r8, r8)

08000340 <test_001_004_execute.7860>:

static void test_001_004_execute(void) {

  /* [1.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <test_001_004_execute.7860+0x14>)
 8000342:	2201      	movs	r2, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000344:	2080      	movs	r0, #128	; 0x80
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	05c2      	lsls	r2, r0, #23
 800034a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800034c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 800034e:	4299      	cmp	r1, r3
 8000350:	d0fc      	beq.n	800034c <test_001_004_execute.7860+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8000352:	4770      	bx	lr
 8000354:	2000106c 	.word	0x2000106c
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <test_001_003_execute.7858>:

static void test_001_003_execute(void) {

  /* [1.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <test_001_003_execute.7858+0x10>)
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000366:	b672      	cpsid	i
 8000368:	b672      	cpsid	i
 800036a:	b672      	cpsid	i
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800036c:	b662      	cpsie	i
    chSysSuspend();
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
}
 800036e:	4770      	bx	lr
 8000370:	2000106c 	.word	0x2000106c
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46c0      	nop			; (mov r8, r8)

08000380 <notify1.7544>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000380:	4b02      	ldr	r3, [pc, #8]	; (800038c <notify1.7544+0xc>)
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	6819      	ldr	r1, [r3, #0]
 8000386:	430a      	orrs	r2, r1
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	4770      	bx	lr
 800038c:	40013800 	.word	0x40013800

08000390 <NMI_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000390:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  struct port_extctx *ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000394:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000396:	f383 8809 	msr	PSP, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800039a:	b662      	cpsie	i
  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800039c:	4770      	bx	lr
 800039e:	46c0      	nop			; (mov r8, r8)

080003a0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 80003a0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a2:	b672      	cpsid	i

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003a4:	4a09      	ldr	r2, [pc, #36]	; (80003cc <chCoreAllocAligned+0x2c>)
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80003a6:	1e44      	subs	r4, r0, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003a8:	6810      	ldr	r0, [r2, #0]
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80003aa:	424b      	negs	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003ac:	3801      	subs	r0, #1
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80003ae:	1864      	adds	r4, r4, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003b0:	1840      	adds	r0, r0, r1

  if (((size_t)endmem - (size_t)p) < size) {
 80003b2:	4907      	ldr	r1, [pc, #28]	; (80003d0 <chCoreAllocAligned+0x30>)

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003b4:	4018      	ands	r0, r3
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80003b6:	401c      	ands	r4, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
 80003b8:	680b      	ldr	r3, [r1, #0]
 80003ba:	1a19      	subs	r1, r3, r0
 80003bc:	428c      	cmp	r4, r1
 80003be:	d803      	bhi.n	80003c8 <chCoreAllocAligned+0x28>
    return NULL;
  }
  nextmem = p + size;
 80003c0:	1904      	adds	r4, r0, r4
 80003c2:	6014      	str	r4, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80003c4:	b662      	cpsie	i
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 80003c6:	bd10      	pop	{r4, pc}

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
    return NULL;
 80003c8:	2000      	movs	r0, #0
 80003ca:	e7fb      	b.n	80003c4 <chCoreAllocAligned+0x24>
 80003cc:	20000bf4 	.word	0x20000bf4
 80003d0:	20000bf0 	.word	0x20000bf0
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46c0      	nop			; (mov r8, r8)

080003e0 <wakeup.4507>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80003e2:	2320      	movs	r3, #32
 80003e4:	5cc1      	ldrb	r1, [r0, r3]
 80003e6:	2907      	cmp	r1, #7
 80003e8:	d80c      	bhi.n	8000404 <wakeup.4507+0x24>
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <wakeup.4507+0x54>)
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	58d1      	ldr	r1, [r2, r3]
 80003f0:	468f      	mov	pc, r1
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80003f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	3201      	adds	r2, #1
 80003f8:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80003fa:	6843      	ldr	r3, [r0, #4]
 80003fc:	6801      	ldr	r1, [r0, #0]
 80003fe:	6019      	str	r1, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000400:	6802      	ldr	r2, [r0, #0]
 8000402:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000404:	2201      	movs	r2, #1
 8000406:	4253      	negs	r3, r2
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000408:	2100      	movs	r1, #0
 800040a:	2220      	movs	r2, #32
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 800040c:	6243      	str	r3, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800040e:	5481      	strb	r1, [r0, r2]
  cp = (thread_t *)&ch.rlist.queue;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <wakeup.4507+0x58>)
 8000412:	6882      	ldr	r2, [r0, #8]
  do {
    cp = cp->queue.next;
 8000414:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000416:	6899      	ldr	r1, [r3, #8]
 8000418:	4291      	cmp	r1, r2
 800041a:	d2fb      	bcs.n	8000414 <wakeup.4507+0x34>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800041c:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800041e:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000420:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000422:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000424:	6058      	str	r0, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000426:	b662      	cpsie	i
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000428:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 800042a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800042c:	2100      	movs	r1, #0
 800042e:	6019      	str	r1, [r3, #0]
 8000430:	e7e8      	b.n	8000404 <wakeup.4507+0x24>
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	08006070 	.word	0x08006070
 8000438:	20000ff8 	.word	0x20000ff8
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <chSysIntegrityCheckI.4485>:
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	1c05      	adds	r5, r0, #0
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8000444:	07c3      	lsls	r3, r0, #31
 8000446:	d512      	bpl.n	800046e <chSysIntegrityCheckI.4485+0x2e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 8000448:	4920      	ldr	r1, [pc, #128]	; (80004cc <chSysIntegrityCheckI.4485+0x8c>)
    while (tp != (thread_t *)&ch.rlist.queue) {
 800044a:	2300      	movs	r3, #0
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 800044c:	680a      	ldr	r2, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800044e:	428a      	cmp	r2, r1
 8000450:	d003      	beq.n	800045a <chSysIntegrityCheckI.4485+0x1a>
      n++;
      tp = tp->queue.next;
 8000452:	6812      	ldr	r2, [r2, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
    while (tp != (thread_t *)&ch.rlist.queue) {
      n++;
 8000454:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000456:	428a      	cmp	r2, r1
 8000458:	d1fb      	bne.n	8000452 <chSysIntegrityCheckI.4485+0x12>
      n++;
      tp = tp->queue.next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
 800045a:	6848      	ldr	r0, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800045c:	4288      	cmp	r0, r1
 800045e:	d003      	beq.n	8000468 <chSysIntegrityCheckI.4485+0x28>
      n--;
      tp = tp->queue.prev;
 8000460:	6840      	ldr	r0, [r0, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
    while (tp != (thread_t *)&ch.rlist.queue) {
      n--;
 8000462:	3b01      	subs	r3, #1
      tp = tp->queue.next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000464:	4288      	cmp	r0, r1
 8000466:	d1fb      	bne.n	8000460 <chSysIntegrityCheckI.4485+0x20>
      tp = tp->queue.prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8000468:	2001      	movs	r0, #1
      n--;
      tp = tp->queue.prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800046a:	2b00      	cmp	r3, #0
 800046c:	d12b      	bne.n	80004c6 <chSysIntegrityCheckI.4485+0x86>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800046e:	07ab      	lsls	r3, r5, #30
 8000470:	d515      	bpl.n	800049e <chSysIntegrityCheckI.4485+0x5e>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
 8000472:	4916      	ldr	r1, [pc, #88]	; (80004cc <chSysIntegrityCheckI.4485+0x8c>)
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000474:	2300      	movs	r3, #0
 8000476:	1c0c      	adds	r4, r1, #0
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
 8000478:	69ca      	ldr	r2, [r1, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800047a:	341c      	adds	r4, #28
 800047c:	42a2      	cmp	r2, r4
 800047e:	d003      	beq.n	8000488 <chSysIntegrityCheckI.4485+0x48>
      n++;
      vtp = vtp->next;
 8000480:	6812      	ldr	r2, [r2, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 8000482:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000484:	42a2      	cmp	r2, r4
 8000486:	d1fb      	bne.n	8000480 <chSysIntegrityCheckI.4485+0x40>
      n++;
      vtp = vtp->next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
 8000488:	6a08      	ldr	r0, [r1, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800048a:	311c      	adds	r1, #28
 800048c:	4288      	cmp	r0, r1
 800048e:	d003      	beq.n	8000498 <chSysIntegrityCheckI.4485+0x58>
      n--;
      vtp = vtp->prev;
 8000490:	6840      	ldr	r0, [r0, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 8000492:	3b01      	subs	r3, #1
      vtp = vtp->next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000494:	4288      	cmp	r0, r1
 8000496:	d1fb      	bne.n	8000490 <chSysIntegrityCheckI.4485+0x50>
      tp = tp->queue.prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8000498:	2001      	movs	r0, #1
      n--;
      vtp = vtp->prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800049a:	2b00      	cmp	r3, #0
 800049c:	d113      	bne.n	80004c6 <chSysIntegrityCheckI.4485+0x86>
  if ((testmask & CH_INTEGRITY_PORT) != 0U) {
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
 800049e:	2000      	movs	r0, #0
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 80004a0:	076b      	lsls	r3, r5, #29
 80004a2:	d510      	bpl.n	80004c6 <chSysIntegrityCheckI.4485+0x86>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
 80004a4:	4d09      	ldr	r5, [pc, #36]	; (80004cc <chSysIntegrityCheckI.4485+0x8c>)
 80004a6:	6929      	ldr	r1, [r5, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80004a8:	42a9      	cmp	r1, r5
 80004aa:	d00d      	beq.n	80004c8 <chSysIntegrityCheckI.4485+0x88>
      n++;
      tp = tp->newer;
 80004ac:	6909      	ldr	r1, [r1, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 80004ae:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
    while (tp != (thread_t *)&ch.rlist) {
 80004b0:	42a9      	cmp	r1, r5
 80004b2:	d1fb      	bne.n	80004ac <chSysIntegrityCheckI.4485+0x6c>
      n++;
      tp = tp->newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
 80004b4:	696c      	ldr	r4, [r5, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	d003      	beq.n	80004c2 <chSysIntegrityCheckI.4485+0x82>
      n--;
      tp = tp->older;
 80004ba:	6964      	ldr	r4, [r4, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 80004bc:	3801      	subs	r0, #1
      tp = tp->newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
    while (tp != (thread_t *)&ch.rlist) {
 80004be:	42ac      	cmp	r4, r5
 80004c0:	d1fb      	bne.n	80004ba <chSysIntegrityCheckI.4485+0x7a>
      n--;
      tp = tp->older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80004c2:	1e43      	subs	r3, r0, #1
 80004c4:	4198      	sbcs	r0, r3
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80004c6:	bd30      	pop	{r4, r5, pc}
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80004c8:	2000      	movs	r0, #0
 80004ca:	e7f3      	b.n	80004b4 <chSysIntegrityCheckI.4485+0x74>
 80004cc:	20000ff8 	.word	0x20000ff8

080004d0 <_idle_thread.4272>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80004d0:	e7fe      	b.n	80004d0 <_idle_thread.4272>
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <chThdYield.4440>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 80004e0:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e2:	b672      	cpsid	i
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 80004e4:	4c0f      	ldr	r4, [pc, #60]	; (8000524 <chThdYield.4440+0x44>)
 80004e6:	6820      	ldr	r0, [r4, #0]
 80004e8:	69a1      	ldr	r1, [r4, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80004ea:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 80004ec:	688a      	ldr	r2, [r1, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d201      	bcs.n	80004f6 <chThdYield.4440+0x16>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004f2:	b662      	cpsie	i

  chSysLock();
  chSchDoYieldS();
  chSysUnlock();
}
 80004f4:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80004f6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80004f8:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80004fa:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80004fc:	6023      	str	r3, [r4, #0]
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80004fe:	61a0      	str	r0, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8000500:	2420      	movs	r4, #32
 8000502:	5505      	strb	r5, [r0, r4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000504:	2500      	movs	r5, #0
 8000506:	550d      	strb	r5, [r1, r4]
 8000508:	e000      	b.n	800050c <chThdYield.4440+0x2c>
 800050a:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
 800050c:	689c      	ldr	r4, [r3, #8]
 800050e:	42a2      	cmp	r2, r4
 8000510:	d9fb      	bls.n	800050a <chThdYield.4440+0x2a>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000512:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000514:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8000516:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8000518:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800051a:	6059      	str	r1, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800051c:	f7ff fe58 	bl	80001d0 <_port_switch>
 8000520:	e7e7      	b.n	80004f2 <chThdYield.4440+0x12>
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000ff8 	.word	0x20000ff8
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <bmk_thread8.9635>:
  while (!chThdShouldTerminateX())
    chSemWait(&sem1);
}
#endif

static THD_FUNCTION(bmk_thread8, p) {
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	4f0a      	ldr	r7, [pc, #40]	; (800055c <bmk_thread8.9635+0x2c>)
 8000534:	1c04      	adds	r4, r0, #0
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8000536:	2621      	movs	r6, #33	; 0x21
 8000538:	2504      	movs	r5, #4

  do {
    chThdYield();
 800053a:	f7ff ffd1 	bl	80004e0 <chThdYield.4440>
    chThdYield();
 800053e:	f7ff ffcf 	bl	80004e0 <chThdYield.4440>
    chThdYield();
 8000542:	f7ff ffcd 	bl	80004e0 <chThdYield.4440>
    chThdYield();
 8000546:	f7ff ffcb 	bl	80004e0 <chThdYield.4440>
    (*(uint32_t *)p) += 4;
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	69ba      	ldr	r2, [r7, #24]
 800054e:	3304      	adds	r3, #4
 8000550:	6023      	str	r3, [r4, #0]
 8000552:	5d90      	ldrb	r0, [r2, r6]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8000554:	4205      	tst	r5, r0
 8000556:	d0f0      	beq.n	800053a <bmk_thread8.9635+0xa>
}
 8000558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	20000ff8 	.word	0x20000ff8

08000560 <_pal_lld_setgroupmode.constprop.8>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4656      	mov	r6, sl
 8000564:	464d      	mov	r5, r9
 8000566:	4644      	mov	r4, r8
 8000568:	465f      	mov	r7, fp
 800056a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800056c:	2307      	movs	r3, #7
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800056e:	2102      	movs	r1, #2
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000570:	250f      	movs	r5, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000572:	2690      	movs	r6, #144	; 0x90
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8000574:	2703      	movs	r7, #3
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000576:	4699      	mov	r9, r3
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000578:	b083      	sub	sp, #12
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800057a:	2200      	movs	r2, #0
  while (true) {
    if ((mask & 1) != 0) {
 800057c:	2401      	movs	r4, #1
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800057e:	46a8      	mov	r8, r5
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000580:	05f3      	lsls	r3, r6, #23
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8000582:	46bc      	mov	ip, r7
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000584:	468a      	mov	sl, r1
 8000586:	e008      	b.n	800059a <_pal_lld_setgroupmode.constprop.8+0x3a>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000588:	6a1d      	ldr	r5, [r3, #32]
 800058a:	9e01      	ldr	r6, [sp, #4]
 800058c:	43bd      	bics	r5, r7
 800058e:	432e      	orrs	r6, r5
 8000590:	621e      	str	r6, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8000592:	0840      	lsrs	r0, r0, #1
    if (!mask)
 8000594:	d02c      	beq.n	80005f0 <_pal_lld_setgroupmode.constprop.8+0x90>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000596:	0089      	lsls	r1, r1, #2
    bit++;
 8000598:	3201      	adds	r2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 800059a:	4204      	tst	r4, r0
 800059c:	d0f9      	beq.n	8000592 <_pal_lld_setgroupmode.constprop.8+0x32>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800059e:	464d      	mov	r5, r9
 80005a0:	4015      	ands	r5, r2
 80005a2:	00ad      	lsls	r5, r5, #2
 80005a4:	1c26      	adds	r6, r4, #0
 80005a6:	40ae      	lsls	r6, r5
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80005a8:	4647      	mov	r7, r8
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80005aa:	9601      	str	r6, [sp, #4]
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80005ac:	40af      	lsls	r7, r5
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80005ae:	685e      	ldr	r6, [r3, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80005b0:	1c25      	adds	r5, r4, #0
 80005b2:	4095      	lsls	r5, r2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80005b4:	43ae      	bics	r6, r5
 80005b6:	605e      	str	r6, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80005b8:	689e      	ldr	r6, [r3, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80005ba:	4665      	mov	r5, ip
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80005bc:	46b3      	mov	fp, r6
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 80005be:	0056      	lsls	r6, r2, #1
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80005c0:	40b5      	lsls	r5, r6
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80005c2:	43ed      	mvns	r5, r5
 80005c4:	465e      	mov	r6, fp
 80005c6:	402e      	ands	r6, r5
 80005c8:	609e      	str	r6, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80005ca:	68de      	ldr	r6, [r3, #12]
 80005cc:	402e      	ands	r6, r5
 80005ce:	60de      	str	r6, [r3, #12]
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 80005d0:	2902      	cmp	r1, #2
 80005d2:	d014      	beq.n	80005fe <_pal_lld_setgroupmode.constprop.8+0x9e>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80005d4:	681e      	ldr	r6, [r3, #0]
 80005d6:	4035      	ands	r5, r6
 80005d8:	430d      	orrs	r5, r1
 80005da:	601d      	str	r5, [r3, #0]
        if (bit < 8)
 80005dc:	2a07      	cmp	r2, #7
 80005de:	d9d3      	bls.n	8000588 <_pal_lld_setgroupmode.constprop.8+0x28>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80005e0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 80005e2:	0840      	lsrs	r0, r0, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80005e4:	43bd      	bics	r5, r7
 80005e6:	9f01      	ldr	r7, [sp, #4]
 80005e8:	432f      	orrs	r7, r5
 80005ea:	625f      	str	r7, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1d2      	bne.n	8000596 <_pal_lld_setgroupmode.constprop.8+0x36>
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  }
}
 80005f0:	b003      	add	sp, #12
 80005f2:	bc3c      	pop	{r2, r3, r4, r5}
 80005f4:	4690      	mov	r8, r2
 80005f6:	4699      	mov	r9, r3
 80005f8:	46a2      	mov	sl, r4
 80005fa:	46ab      	mov	fp, r5
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80005fe:	2a07      	cmp	r2, #7
 8000600:	d80b      	bhi.n	800061a <_pal_lld_setgroupmode.constprop.8+0xba>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000602:	6a1e      	ldr	r6, [r3, #32]
 8000604:	43be      	bics	r6, r7
 8000606:	1c37      	adds	r7, r6, #0
 8000608:	9e01      	ldr	r6, [sp, #4]
 800060a:	433e      	orrs	r6, r7
 800060c:	621e      	str	r6, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 800060e:	681f      	ldr	r7, [r3, #0]
 8000610:	4656      	mov	r6, sl
 8000612:	403d      	ands	r5, r7
 8000614:	4335      	orrs	r5, r6
 8000616:	601d      	str	r5, [r3, #0]
 8000618:	e7bb      	b.n	8000592 <_pal_lld_setgroupmode.constprop.8+0x32>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800061a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800061c:	43be      	bics	r6, r7
 800061e:	1c37      	adds	r7, r6, #0
 8000620:	9e01      	ldr	r6, [sp, #4]
 8000622:	433e      	orrs	r6, r7
 8000624:	625e      	str	r6, [r3, #36]	; 0x24
 8000626:	e7f2      	b.n	800060e <_pal_lld_setgroupmode.constprop.8+0xae>
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <_test_assert_time_window.constprop.5>:
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	05da      	lsls	r2, r3, #23
 8000634:	6a53      	ldr	r3, [r2, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8000636:	1a09      	subs	r1, r1, r0
 8000638:	1a1a      	subs	r2, r3, r0

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
  return false;
 800063a:	2000      	movs	r0, #0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800063c:	428a      	cmp	r2, r1
 800063e:	d308      	bcc.n	8000652 <_test_assert_time_window.constprop.5+0x22>
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <_test_assert_time_window.constprop.5+0x24>)
  test_global_fail     = true;
 8000642:	4a05      	ldr	r2, [pc, #20]	; (8000658 <_test_assert_time_window.constprop.5+0x28>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 8000644:	2001      	movs	r0, #1
 8000646:	7018      	strb	r0, [r3, #0]
  test_global_fail     = true;
 8000648:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 800064a:	4904      	ldr	r1, [pc, #16]	; (800065c <_test_assert_time_window.constprop.5+0x2c>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <_test_assert_time_window.constprop.5+0x30>)
 800064e:	6001      	str	r1, [r0, #0]
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
 8000650:	2001      	movs	r0, #1
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000652:	4770      	bx	lr
 8000654:	20000bf8 	.word	0x20000bf8
 8000658:	20000e28 	.word	0x20000e28
 800065c:	08006090 	.word	0x08006090
 8000660:	20000d48 	.word	0x20000d48
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46c0      	nop			; (mov r8, r8)

08000670 <test_terminate_threads>:
 */
void test_terminate_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <test_terminate_threads+0x6c>)
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8000672:	b510      	push	{r4, lr}
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	2a00      	cmp	r2, #0
 8000678:	d006      	beq.n	8000688 <test_terminate_threads+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067a:	b672      	cpsid	i
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 800067c:	2121      	movs	r1, #33	; 0x21
 800067e:	5c54      	ldrb	r4, [r2, r1]
 8000680:	2004      	movs	r0, #4
 8000682:	4320      	orrs	r0, r4
 8000684:	5450      	strb	r0, [r2, r1]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000686:	b662      	cpsie	i
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	2a00      	cmp	r2, #0
 800068c:	d006      	beq.n	800069c <test_terminate_threads+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068e:	b672      	cpsid	i
 8000690:	2121      	movs	r1, #33	; 0x21
 8000692:	5c54      	ldrb	r4, [r2, r1]
 8000694:	2004      	movs	r0, #4
 8000696:	4320      	orrs	r0, r4
 8000698:	5450      	strb	r0, [r2, r1]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800069a:	b662      	cpsie	i
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	2a00      	cmp	r2, #0
 80006a0:	d006      	beq.n	80006b0 <test_terminate_threads+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a2:	b672      	cpsid	i
 80006a4:	2121      	movs	r1, #33	; 0x21
 80006a6:	5c54      	ldrb	r4, [r2, r1]
 80006a8:	2004      	movs	r0, #4
 80006aa:	4320      	orrs	r0, r4
 80006ac:	5450      	strb	r0, [r2, r1]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006ae:	b662      	cpsie	i
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	2a00      	cmp	r2, #0
 80006b4:	d006      	beq.n	80006c4 <test_terminate_threads+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b6:	b672      	cpsid	i
 80006b8:	2121      	movs	r1, #33	; 0x21
 80006ba:	5c54      	ldrb	r4, [r2, r1]
 80006bc:	2004      	movs	r0, #4
 80006be:	4320      	orrs	r0, r4
 80006c0:	5450      	strb	r0, [r2, r1]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006c2:	b662      	cpsie	i
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <test_terminate_threads+0x68>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ca:	b672      	cpsid	i
 80006cc:	2221      	movs	r2, #33	; 0x21
 80006ce:	5c9c      	ldrb	r4, [r3, r2]
 80006d0:	2104      	movs	r1, #4
 80006d2:	4321      	orrs	r1, r4
 80006d4:	5499      	strb	r1, [r3, r2]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006d6:	b662      	cpsie	i
      chThdTerminate(threads[i]);
}
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	20000bd0 	.word	0x20000bd0

080006e0 <test_emit_token>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <test_emit_token+0x18>)
 80006e4:	4905      	ldr	r1, [pc, #20]	; (80006fc <test_emit_token+0x1c>)
 80006e6:	6813      	ldr	r3, [r2, #0]
 80006e8:	428b      	cmp	r3, r1
 80006ea:	d202      	bcs.n	80006f2 <test_emit_token+0x12>
    *test_tokp++ = token;
 80006ec:	7018      	strb	r0, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006f2:	b662      	cpsie	i
  osalSysUnlock();
}
 80006f4:	4770      	bx	lr
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20001070 	.word	0x20001070
 80006fc:	20001084 	.word	0x20001084

08000700 <dyn_thread1.9479>:
#endif
#if CH_CFG_USE_MEMPOOLS
static memory_pool_t mp1;
#endif

static THD_FUNCTION(dyn_thread1, p) {
 8000700:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8000702:	7800      	ldrb	r0, [r0, #0]
 8000704:	f7ff ffec 	bl	80006e0 <test_emit_token>
}
 8000708:	bd08      	pop	{r3, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46c0      	nop			; (mov r8, r8)

08000710 <h1.8915>:
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000710:	b508      	push	{r3, lr}
 8000712:	2041      	movs	r0, #65	; 0x41
 8000714:	f7ff ffe4 	bl	80006e0 <test_emit_token>
 8000718:	bd08      	pop	{r3, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46c0      	nop			; (mov r8, r8)

08000720 <h2.8912>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000720:	b508      	push	{r3, lr}
 8000722:	2042      	movs	r0, #66	; 0x42
 8000724:	f7ff ffdc 	bl	80006e0 <test_emit_token>
 8000728:	bd08      	pop	{r3, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46c0      	nop			; (mov r8, r8)

08000730 <h3.8909>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000730:	b508      	push	{r3, lr}
 8000732:	2043      	movs	r0, #67	; 0x43
 8000734:	f7ff ffd4 	bl	80006e0 <test_emit_token>
 8000738:	bd08      	pop	{r3, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46c0      	nop			; (mov r8, r8)

08000740 <thread.7942>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {
 8000740:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8000742:	7800      	ldrb	r0, [r0, #0]
 8000744:	f7ff ffcc 	bl	80006e0 <test_emit_token>
}
 8000748:	bd08      	pop	{r3, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46c0      	nop			; (mov r8, r8)

08000750 <test_println>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_println(const char *msgp) {
 8000750:	b538      	push	{r3, r4, r5, lr}
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000752:	7801      	ldrb	r1, [r0, #0]
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_println(const char *msgp) {
 8000754:	1c04      	adds	r4, r0, #0
 8000756:	4d09      	ldr	r5, [pc, #36]	; (800077c <test_println+0x2c>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000758:	2900      	cmp	r1, #0
 800075a:	d007      	beq.n	800076c <test_println+0x1c>
    streamPut(test_chp, *msgp++);
 800075c:	6828      	ldr	r0, [r5, #0]
 800075e:	3401      	adds	r4, #1
 8000760:	6803      	ldr	r3, [r0, #0]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	4790      	blx	r2
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000766:	7821      	ldrb	r1, [r4, #0]
 8000768:	2900      	cmp	r1, #0
 800076a:	d1f7      	bne.n	800075c <test_println+0xc>
 * @api
 */
void test_println(const char *msgp) {

  test_print(msgp);
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800076c:	6828      	ldr	r0, [r5, #0]
 800076e:	2202      	movs	r2, #2
 8000770:	6801      	ldr	r1, [r0, #0]
 8000772:	680c      	ldr	r4, [r1, #0]
 8000774:	4902      	ldr	r1, [pc, #8]	; (8000780 <test_println+0x30>)
 8000776:	47a0      	blx	r4
}
 8000778:	bd38      	pop	{r3, r4, r5, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	20000e2c 	.word	0x20000e2c
 8000780:	080060a4 	.word	0x080060a4
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46c0      	nop			; (mov r8, r8)

08000790 <test_print>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_print(const char *msgp) {
 8000790:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8000792:	7801      	ldrb	r1, [r0, #0]
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_print(const char *msgp) {
 8000794:	1c04      	adds	r4, r0, #0

  while (*msgp)
 8000796:	2900      	cmp	r1, #0
 8000798:	d008      	beq.n	80007ac <test_print+0x1c>
 800079a:	4d05      	ldr	r5, [pc, #20]	; (80007b0 <test_print+0x20>)
    streamPut(test_chp, *msgp++);
 800079c:	6828      	ldr	r0, [r5, #0]
 800079e:	3401      	adds	r4, #1
 80007a0:	6803      	ldr	r3, [r0, #0]
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	4790      	blx	r2
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 80007a6:	7821      	ldrb	r1, [r4, #0]
 80007a8:	2900      	cmp	r1, #0
 80007aa:	d1f7      	bne.n	800079c <test_print+0xc>
    streamPut(test_chp, *msgp++);
}
 80007ac:	bd38      	pop	{r3, r4, r5, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000e2c 	.word	0x20000e2c
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46c0      	nop			; (mov r8, r8)

080007c0 <test_printn>:
 *
 * @param[in] n         the number to be printed
 *
 * @api
 */
void test_printn(uint32_t n) {
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	4647      	mov	r7, r8
 80007c4:	b480      	push	{r7}
 80007c6:	1c04      	adds	r4, r0, #0
 80007c8:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d03b      	beq.n	8000846 <test_printn+0x86>
    streamPut(test_chp, '0');
  else {
    p = buf;
 80007ce:	466f      	mov	r7, sp
 80007d0:	466d      	mov	r5, sp
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80007d2:	1c20      	adds	r0, r4, #0
 80007d4:	210a      	movs	r1, #10
 80007d6:	f7ff fd5f 	bl	8000298 <__aeabi_uidivmod>
 80007da:	1c0e      	adds	r6, r1, #0
 80007dc:	3630      	adds	r6, #48	; 0x30
 80007de:	b2f6      	uxtb	r6, r6
 80007e0:	702e      	strb	r6, [r5, #0]
 80007e2:	1c20      	adds	r0, r4, #0
 80007e4:	210a      	movs	r1, #10
 80007e6:	f7ff fd13 	bl	8000210 <__aeabi_uidiv>
 80007ea:	3501      	adds	r5, #1
 80007ec:	1e04      	subs	r4, r0, #0

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 80007ee:	d1f0      	bne.n	80007d2 <test_printn+0x12>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80007f0:	42bd      	cmp	r5, r7
 80007f2:	d924      	bls.n	800083e <test_printn+0x7e>
 80007f4:	2301      	movs	r3, #1
 80007f6:	4258      	negs	r0, r3
 80007f8:	4468      	add	r0, sp
 *
 * @param[in] n         the number to be printed
 *
 * @api
 */
void test_printn(uint32_t n) {
 80007fa:	1eac      	subs	r4, r5, #2
 80007fc:	4f15      	ldr	r7, [pc, #84]	; (8000854 <test_printn+0x94>)
 80007fe:	4680      	mov	r8, r0
 8000800:	07e3      	lsls	r3, r4, #31
 8000802:	d415      	bmi.n	8000830 <test_printn+0x70>
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
      streamPut(test_chp, *--p);
 8000804:	6838      	ldr	r0, [r7, #0]
 8000806:	6801      	ldr	r1, [r0, #0]
 8000808:	688a      	ldr	r2, [r1, #8]
 800080a:	1c31      	adds	r1, r6, #0
 800080c:	4790      	blx	r2
 800080e:	6838      	ldr	r0, [r7, #0]
 8000810:	7826      	ldrb	r6, [r4, #0]
 8000812:	1eec      	subs	r4, r5, #3
 8000814:	6805      	ldr	r5, [r0, #0]
 8000816:	1c31      	adds	r1, r6, #0
 8000818:	68ab      	ldr	r3, [r5, #8]
 800081a:	4798      	blx	r3
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 800081c:	4544      	cmp	r4, r8
 800081e:	d00e      	beq.n	800083e <test_printn+0x7e>
      streamPut(test_chp, *--p);
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	7821      	ldrb	r1, [r4, #0]
 8000824:	6802      	ldr	r2, [r0, #0]
 8000826:	1e66      	subs	r6, r4, #1
 8000828:	6895      	ldr	r5, [r2, #8]
 800082a:	47a8      	blx	r5
 800082c:	7836      	ldrb	r6, [r6, #0]
 800082e:	3c02      	subs	r4, #2
 8000830:	6838      	ldr	r0, [r7, #0]
 8000832:	1c31      	adds	r1, r6, #0
 8000834:	6805      	ldr	r5, [r0, #0]
 8000836:	68ab      	ldr	r3, [r5, #8]
 8000838:	4798      	blx	r3
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 800083a:	4544      	cmp	r4, r8
 800083c:	d1f0      	bne.n	8000820 <test_printn+0x60>
      streamPut(test_chp, *--p);
  }
}
 800083e:	b004      	add	sp, #16
 8000840:	bc04      	pop	{r2}
 8000842:	4690      	mov	r8, r2
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    streamPut(test_chp, '0');
 8000846:	4f03      	ldr	r7, [pc, #12]	; (8000854 <test_printn+0x94>)
 8000848:	6838      	ldr	r0, [r7, #0]
 800084a:	6801      	ldr	r1, [r0, #0]
 800084c:	688c      	ldr	r4, [r1, #8]
 800084e:	2130      	movs	r1, #48	; 0x30
 8000850:	47a0      	blx	r4
 8000852:	e7f4      	b.n	800083e <test_printn+0x7e>
 8000854:	20000e2c 	.word	0x20000e2c
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46c0      	nop			; (mov r8, r8)

08000860 <test_012_012_execute.9650>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void test_012_012_execute(void) {
 8000860:	b538      	push	{r3, r4, r5, lr}

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8000862:	4d33      	ldr	r5, [pc, #204]	; (8000930 <test_012_012_execute.9650+0xd0>)
 8000864:	2301      	movs	r3, #1
 8000866:	602b      	str	r3, [r5, #0]
  {
    test_print("--- System: ");
 8000868:	4832      	ldr	r0, [pc, #200]	; (8000934 <test_012_012_execute.9650+0xd4>)
 800086a:	f7ff ff91 	bl	8000790 <test_print>
    test_printn(sizeof(ch_system_t));
 800086e:	2074      	movs	r0, #116	; 0x74
 8000870:	f7ff ffa6 	bl	80007c0 <test_printn>
    test_println(" bytes");
 8000874:	4c30      	ldr	r4, [pc, #192]	; (8000938 <test_012_012_execute.9650+0xd8>)
 8000876:	1c20      	adds	r0, r4, #0
 8000878:	f7ff ff6a 	bl	8000750 <test_println>
  }

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800087c:	2002      	movs	r0, #2
 800087e:	6028      	str	r0, [r5, #0]
  {
    test_print("--- Thread: ");
 8000880:	482e      	ldr	r0, [pc, #184]	; (800093c <test_012_012_execute.9650+0xdc>)
 8000882:	f7ff ff85 	bl	8000790 <test_print>
    test_printn(sizeof(thread_t));
 8000886:	2044      	movs	r0, #68	; 0x44
 8000888:	f7ff ff9a 	bl	80007c0 <test_printn>
    test_println(" bytes");
 800088c:	1c20      	adds	r0, r4, #0
 800088e:	f7ff ff5f 	bl	8000750 <test_println>
  }

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8000892:	2103      	movs	r1, #3
 8000894:	6029      	str	r1, [r5, #0]
  {
    test_print("--- Timer : ");
 8000896:	482a      	ldr	r0, [pc, #168]	; (8000940 <test_012_012_execute.9650+0xe0>)
 8000898:	f7ff ff7a 	bl	8000790 <test_print>
    test_printn(sizeof(virtual_timer_t));
 800089c:	2014      	movs	r0, #20
 800089e:	f7ff ff8f 	bl	80007c0 <test_printn>
    test_println(" bytes");
 80008a2:	1c20      	adds	r0, r4, #0
 80008a4:	f7ff ff54 	bl	8000750 <test_println>
  }

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80008a8:	2204      	movs	r2, #4
 80008aa:	602a      	str	r2, [r5, #0]
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80008ac:	4825      	ldr	r0, [pc, #148]	; (8000944 <test_012_012_execute.9650+0xe4>)
 80008ae:	f7ff ff6f 	bl	8000790 <test_print>
    test_printn(sizeof(semaphore_t));
 80008b2:	200c      	movs	r0, #12
 80008b4:	f7ff ff84 	bl	80007c0 <test_printn>
    test_println(" bytes");
 80008b8:	1c20      	adds	r0, r4, #0
 80008ba:	f7ff ff49 	bl	8000750 <test_println>
#endif
  }

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 80008be:	2305      	movs	r3, #5
 80008c0:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <test_012_012_execute.9650+0xe8>)
 80008c4:	f7ff ff64 	bl	8000790 <test_print>
    test_printn(sizeof(mutex_t));
 80008c8:	2010      	movs	r0, #16
 80008ca:	f7ff ff79 	bl	80007c0 <test_printn>
    test_println(" bytes");
 80008ce:	1c20      	adds	r0, r4, #0
 80008d0:	f7ff ff3e 	bl	8000750 <test_println>
#endif
  }

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 80008d4:	2006      	movs	r0, #6
 80008d6:	6028      	str	r0, [r5, #0]
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <test_012_012_execute.9650+0xec>)
 80008da:	f7ff ff59 	bl	8000790 <test_print>
    test_printn(sizeof(condition_variable_t));
 80008de:	2008      	movs	r0, #8
 80008e0:	f7ff ff6e 	bl	80007c0 <test_printn>
    test_println(" bytes");
 80008e4:	1c20      	adds	r0, r4, #0
 80008e6:	f7ff ff33 	bl	8000750 <test_println>
#endif
  }

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 80008ea:	2107      	movs	r1, #7
 80008ec:	6029      	str	r1, [r5, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 80008ee:	4818      	ldr	r0, [pc, #96]	; (8000950 <test_012_012_execute.9650+0xf0>)
 80008f0:	f7ff ff4e 	bl	8000790 <test_print>
    test_printn(sizeof(event_source_t));
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff ff63 	bl	80007c0 <test_printn>
    test_println(" bytes");
 80008fa:	1c20      	adds	r0, r4, #0
 80008fc:	f7ff ff28 	bl	8000750 <test_println>
#endif
  }

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8000900:	2208      	movs	r2, #8
 8000902:	602a      	str	r2, [r5, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <test_012_012_execute.9650+0xf4>)
 8000906:	f7ff ff43 	bl	8000790 <test_print>
    test_printn(sizeof(event_listener_t));
 800090a:	2014      	movs	r0, #20
 800090c:	f7ff ff58 	bl	80007c0 <test_printn>
    test_println(" bytes");
 8000910:	1c20      	adds	r0, r4, #0
 8000912:	f7ff ff1d 	bl	8000750 <test_println>
#endif
  }

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8000916:	2309      	movs	r3, #9
 8000918:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <test_012_012_execute.9650+0xf8>)
 800091c:	f7ff ff38 	bl	8000790 <test_print>
    test_printn(sizeof(mailbox_t));
 8000920:	2028      	movs	r0, #40	; 0x28
 8000922:	f7ff ff4d 	bl	80007c0 <test_printn>
    test_println(" bytes");
 8000926:	1c20      	adds	r0, r4, #0
 8000928:	f7ff ff12 	bl	8000750 <test_println>
#endif
  }
}
 800092c:	bd38      	pop	{r3, r4, r5, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	2000106c 	.word	0x2000106c
 8000934:	080060a8 	.word	0x080060a8
 8000938:	080060b8 	.word	0x080060b8
 800093c:	080060c0 	.word	0x080060c0
 8000940:	080060d0 	.word	0x080060d0
 8000944:	080060e0 	.word	0x080060e0
 8000948:	080060f0 	.word	0x080060f0
 800094c:	08006100 	.word	0x08006100
 8000950:	08006110 	.word	0x08006110
 8000954:	08006120 	.word	0x08006120
 8000958:	08006130 	.word	0x08006130
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46c0      	nop			; (mov r8, r8)

08000960 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(msg);
  return false;
}

bool _test_assert_sequence(char *expected, const char *msg) {
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <_test_assert_sequence+0x80>)
 8000964:	4647      	mov	r7, r8
 8000966:	b480      	push	{r7}
 8000968:	4688      	mov	r8, r1
 800096a:	6817      	ldr	r7, [r2, #0]
  char *cp = test_tokens_buffer;
 800096c:	491d      	ldr	r1, [pc, #116]	; (80009e4 <_test_assert_sequence+0x84>)
 800096e:	4694      	mov	ip, r2
 8000970:	1a7c      	subs	r4, r7, r1
 8000972:	1c0b      	adds	r3, r1, #0
 8000974:	07e4      	lsls	r4, r4, #31
 8000976:	d514      	bpl.n	80009a2 <_test_assert_sequence+0x42>

  while (cp < test_tokp) {
 8000978:	42b9      	cmp	r1, r7
 800097a:	d214      	bcs.n	80009a6 <_test_assert_sequence+0x46>
    if (*cp++ != *expected++)
 800097c:	7806      	ldrb	r6, [r0, #0]
 800097e:	780d      	ldrb	r5, [r1, #0]
 8000980:	1c4b      	adds	r3, r1, #1
 8000982:	3001      	adds	r0, #1
 8000984:	42b5      	cmp	r5, r6
 8000986:	d00c      	beq.n	80009a2 <_test_assert_sequence+0x42>
 8000988:	e016      	b.n	80009b8 <_test_assert_sequence+0x58>
 800098a:	781c      	ldrb	r4, [r3, #0]
 800098c:	7802      	ldrb	r2, [r0, #0]
 800098e:	1c5e      	adds	r6, r3, #1
 8000990:	1c45      	adds	r5, r0, #1
 8000992:	4294      	cmp	r4, r2
 8000994:	d110      	bne.n	80009b8 <_test_assert_sequence+0x58>
 8000996:	785c      	ldrb	r4, [r3, #1]
 8000998:	7842      	ldrb	r2, [r0, #1]
 800099a:	1c73      	adds	r3, r6, #1
 800099c:	1c68      	adds	r0, r5, #1
 800099e:	4294      	cmp	r4, r2
 80009a0:	d10a      	bne.n	80009b8 <_test_assert_sequence+0x58>
}

bool _test_assert_sequence(char *expected, const char *msg) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp) {
 80009a2:	42bb      	cmp	r3, r7
 80009a4:	d3f1      	bcc.n	800098a <_test_assert_sequence+0x2a>
    if (*cp++ != *expected++)
     return _test_fail(msg);
  }

  if (*expected)
 80009a6:	7800      	ldrb	r0, [r0, #0]
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d10f      	bne.n	80009cc <_test_assert_sequence+0x6c>
/* Module local functions.                                                   */
/*===========================================================================*/

static void clear_tokens(void) {

  test_tokp = test_tokens_buffer;
 80009ac:	4662      	mov	r2, ip
 80009ae:	6011      	str	r1, [r2, #0]
  if (*expected)
    return _test_fail(msg);

  clear_tokens();

  return false;
 80009b0:	2000      	movs	r0, #0
}
 80009b2:	bc04      	pop	{r2}
 80009b4:	4690      	mov	r8, r2
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80009b8:	4f0b      	ldr	r7, [pc, #44]	; (80009e8 <_test_assert_sequence+0x88>)
  test_global_fail     = true;
 80009ba:	490c      	ldr	r1, [pc, #48]	; (80009ec <_test_assert_sequence+0x8c>)
  test_failure_message = msg;
 80009bc:	4e0c      	ldr	r6, [pc, #48]	; (80009f0 <_test_assert_sequence+0x90>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80009be:	2001      	movs	r0, #1
  test_global_fail     = true;
  test_failure_message = msg;
 80009c0:	4645      	mov	r5, r8
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80009c2:	7038      	strb	r0, [r7, #0]
  test_global_fail     = true;
 80009c4:	7008      	strb	r0, [r1, #0]
  test_failure_message = msg;
 80009c6:	6035      	str	r5, [r6, #0]
bool _test_assert_sequence(char *expected, const char *msg) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp) {
    if (*cp++ != *expected++)
     return _test_fail(msg);
 80009c8:	2001      	movs	r0, #1
 80009ca:	e7f2      	b.n	80009b2 <_test_assert_sequence+0x52>
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80009cc:	4f06      	ldr	r7, [pc, #24]	; (80009e8 <_test_assert_sequence+0x88>)
  test_global_fail     = true;
 80009ce:	4907      	ldr	r1, [pc, #28]	; (80009ec <_test_assert_sequence+0x8c>)
  test_failure_message = msg;
 80009d0:	4d07      	ldr	r5, [pc, #28]	; (80009f0 <_test_assert_sequence+0x90>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80009d2:	2301      	movs	r3, #1
  test_global_fail     = true;
  test_failure_message = msg;
 80009d4:	4644      	mov	r4, r8
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 80009d6:	703b      	strb	r3, [r7, #0]
  test_global_fail     = true;
 80009d8:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80009da:	602c      	str	r4, [r5, #0]
    if (*cp++ != *expected++)
     return _test_fail(msg);
  }

  if (*expected)
    return _test_fail(msg);
 80009dc:	2001      	movs	r0, #1
 80009de:	e7e8      	b.n	80009b2 <_test_assert_sequence+0x52>
 80009e0:	20001070 	.word	0x20001070
 80009e4:	20001074 	.word	0x20001074
 80009e8:	20000bf8 	.word	0x20000bf8
 80009ec:	20000e28 	.word	0x20000e28
 80009f0:	20000d48 	.word	0x20000d48
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46c0      	nop			; (mov r8, r8)

08000a00 <_test_assert>:

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
  return false;
 8000a00:	2200      	movs	r2, #0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d107      	bne.n	8000a16 <_test_assert+0x16>
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <_test_assert+0x1c>)
  test_global_fail     = true;
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <_test_assert+0x20>)
/* Module exported functions.                                                */
/*===========================================================================*/

bool _test_fail(const char *msg) {

  test_local_fail      = true;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	7013      	strb	r3, [r2, #0]
  test_global_fail     = true;
 8000a0e:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <_test_assert+0x24>)
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
 8000a12:	2201      	movs	r2, #1

bool _test_fail(const char *msg) {

  test_local_fail      = true;
  test_global_fail     = true;
  test_failure_message = msg;
 8000a14:	6019      	str	r1, [r3, #0]
bool _test_assert(bool condition, const char *msg) {

  if (!condition)
    return _test_fail(msg);
  return false;
}
 8000a16:	1c10      	adds	r0, r2, #0
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	20000bf8 	.word	0x20000bf8
 8000a20:	20000e28 	.word	0x20000e28
 8000a24:	20000d48 	.word	0x20000d48
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46c0      	nop			; (mov r8, r8)

08000a30 <test_001_001_execute.7889>:
 * - [1.1.3] Testing Registry List integrity.
 * - [1.1.4] Testing Port-defined integrity.
 * .
 */

static void test_001_001_execute(void) {
 8000a30:	b538      	push	{r3, r4, r5, lr}
  bool result;

  /* [1.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 8000a32:	4d1d      	ldr	r5, [pc, #116]	; (8000aa8 <test_001_001_execute.7889+0x78>)
 8000a34:	2301      	movs	r3, #1
 8000a36:	602b      	str	r3, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fd00 	bl	8000440 <chSysIntegrityCheckI.4485>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a40:	b662      	cpsie	i
    chSysUnlock();
    test_assert(result == false, "ready list check failed");
 8000a42:	2401      	movs	r4, #1
 8000a44:	4060      	eors	r0, r4
 8000a46:	b2c0      	uxtb	r0, r0
 8000a48:	4918      	ldr	r1, [pc, #96]	; (8000aac <test_001_001_execute.7889+0x7c>)
 8000a4a:	f7ff ffd9 	bl	8000a00 <_test_assert>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d000      	beq.n	8000a54 <test_001_001_execute.7889+0x24>
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
}
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
    chSysUnlock();
    test_assert(result == false, "ready list check failed");
  }

  /* [1.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	6028      	str	r0, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff fcf0 	bl	8000440 <chSysIntegrityCheckI.4485>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a60:	b662      	cpsie	i
    chSysUnlock();
    test_assert(result == false, "virtual timers list check failed");
 8000a62:	4060      	eors	r0, r4
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <test_001_001_execute.7889+0x80>)
 8000a68:	f7ff ffca 	bl	8000a00 <_test_assert>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d1f0      	bne.n	8000a52 <test_001_001_execute.7889+0x22>
  }

  /* [1.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 8000a70:	2103      	movs	r1, #3
 8000a72:	6029      	str	r1, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8000a76:	2004      	movs	r0, #4
 8000a78:	f7ff fce2 	bl	8000440 <chSysIntegrityCheckI.4485>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a7c:	b662      	cpsie	i
    chSysUnlock();
    test_assert(result == false, "registry list check failed");
 8000a7e:	4060      	eors	r0, r4
 8000a80:	b2c0      	uxtb	r0, r0
 8000a82:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <test_001_001_execute.7889+0x84>)
 8000a84:	f7ff ffbc 	bl	8000a00 <_test_assert>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d1e2      	bne.n	8000a52 <test_001_001_execute.7889+0x22>
  }

  /* [1.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	602a      	str	r2, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
  {
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8000a92:	2008      	movs	r0, #8
 8000a94:	f7ff fcd4 	bl	8000440 <chSysIntegrityCheckI.4485>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a98:	b662      	cpsie	i
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
 8000a9a:	4044      	eors	r4, r0
 8000a9c:	b2e0      	uxtb	r0, r4
 8000a9e:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <test_001_001_execute.7889+0x88>)
 8000aa0:	f7ff ffae 	bl	8000a00 <_test_assert>
 8000aa4:	e7d5      	b.n	8000a52 <test_001_001_execute.7889+0x22>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	2000106c 	.word	0x2000106c
 8000aac:	08006140 	.word	0x08006140
 8000ab0:	08006158 	.word	0x08006158
 8000ab4:	0800617c 	.word	0x0800617c
 8000ab8:	08006198 	.word	0x08006198
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46c0      	nop			; (mov r8, r8)

08000ac0 <print_line.7640>:
  tcp->execute();
  if (tcp->teardown != NULL)
    tcp->teardown();
}

static void print_line(void) {
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	4d0b      	ldr	r5, [pc, #44]	; (8000af0 <print_line.7640+0x30>)
 8000ac4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    streamPut(test_chp, '-');
 8000ac6:	6828      	ldr	r0, [r5, #0]
 8000ac8:	212d      	movs	r1, #45	; 0x2d
 8000aca:	6803      	ldr	r3, [r0, #0]
 8000acc:	3c02      	subs	r4, #2
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	4790      	blx	r2
 8000ad2:	6828      	ldr	r0, [r5, #0]
 8000ad4:	6801      	ldr	r1, [r0, #0]
 8000ad6:	688b      	ldr	r3, [r1, #8]
 8000ad8:	212d      	movs	r1, #45	; 0x2d
 8000ada:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d1f2      	bne.n	8000ac6 <print_line.7640+0x6>
    streamPut(test_chp, '-');
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000ae0:	6828      	ldr	r0, [r5, #0]
 8000ae2:	4904      	ldr	r1, [pc, #16]	; (8000af4 <print_line.7640+0x34>)
 8000ae4:	6804      	ldr	r4, [r0, #0]
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	6825      	ldr	r5, [r4, #0]
 8000aea:	47a8      	blx	r5
}
 8000aec:	bd38      	pop	{r3, r4, r5, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000e2c 	.word	0x20000e2c
 8000af4:	080060a4 	.word	0x080060a4
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46c0      	nop			; (mov r8, r8)

08000b00 <_port_irq_epilogue>:
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void _port_irq_epilogue(regarm_t lr) {

  if (lr != (regarm_t)0xFFFFFFF1U) {
 8000b00:	300f      	adds	r0, #15
 8000b02:	d011      	beq.n	8000b28 <_port_irq_epilogue+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000b06:	f3ef 8309 	mrs	r3, PSP
    /* The extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000b0a:	3b20      	subs	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000b0c:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	0450      	lsls	r0, r2, #17
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <_port_irq_epilogue+0x30>)
 8000b16:	61d8      	str	r0, [r3, #28]
 8000b18:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000b1a:	6990      	ldr	r0, [r2, #24]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000b1c:	6889      	ldr	r1, [r1, #8]
 8000b1e:	6882      	ldr	r2, [r0, #8]
 8000b20:	4291      	cmp	r1, r2
 8000b22:	d802      	bhi.n	8000b2a <_port_irq_epilogue+0x2a>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <_port_irq_epilogue+0x34>)
 8000b26:	6198      	str	r0, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
 8000b28:	4770      	bx	lr

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000b2a:	4903      	ldr	r1, [pc, #12]	; (8000b38 <_port_irq_epilogue+0x38>)
 8000b2c:	6199      	str	r1, [r3, #24]
 8000b2e:	e7fb      	b.n	8000b28 <_port_irq_epilogue+0x28>
 8000b30:	20000ff8 	.word	0x20000ff8
 8000b34:	08000200 	.word	0x08000200
 8000b38:	080001fd 	.word	0x080001fd
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46c0      	nop			; (mov r8, r8)

08000b40 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8000b40:	b508      	push	{r3, lr}
 8000b42:	1c03      	adds	r3, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->next;
 8000b46:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d003      	beq.n	8000b54 <chPoolAlloc+0x14>
    mp->next = mp->next->next;
 8000b4c:	6801      	ldr	r1, [r0, #0]
 8000b4e:	6019      	str	r1, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b50:	b662      	cpsie	i
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000b52:	bd08      	pop	{r3, pc}
  objp = mp->next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->next = mp->next->next;
  }
  else if (mp->provider != NULL) {
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d0fa      	beq.n	8000b50 <chPoolAlloc+0x10>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 8000b5a:	6858      	ldr	r0, [r3, #4]
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4790      	blx	r2
 8000b60:	e7f6      	b.n	8000b50 <chPoolAlloc+0x10>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <chEvtAddEvents>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->epending |= events;
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <chEvtAddEvents+0x10>)
 8000b74:	6999      	ldr	r1, [r3, #24]
 8000b76:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	6348      	str	r0, [r1, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7c:	b662      	cpsie	i
  events = currp->epending;
  chSysUnlock();

  return events;
}
 8000b7e:	4770      	bx	lr
 8000b80:	20000ff8 	.word	0x20000ff8
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <chEvtUnregister>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	e000      	b.n	8000b98 <chEvtUnregister+0x8>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 8000b96:	1c1a      	adds	r2, r3, #0
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
 8000b98:	6813      	ldr	r3, [r2, #0]
 8000b9a:	4283      	cmp	r3, r0
 8000b9c:	d003      	beq.n	8000ba6 <chEvtUnregister+0x16>
  /*lint -restore*/
    if (p->next == elp) {
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d1f9      	bne.n	8000b96 <chEvtUnregister+0x6>
      p->next = elp->next;
 8000ba2:	6809      	ldr	r1, [r1, #0]
 8000ba4:	6011      	str	r1, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000ba6:	b662      	cpsie	i
      break;
    }
    p = p->next;
  }
  chSysUnlock();
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46c0      	nop			; (mov r8, r8)

08000bb0 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000bb0:	6882      	ldr	r2, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000bb2:	6841      	ldr	r1, [r0, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000bb4:	1c13      	adds	r3, r2, #0
 8000bb6:	3b48      	subs	r3, #72	; 0x48
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000bb8:	b510      	push	{r4, lr}
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000bba:	6904      	ldr	r4, [r0, #16]
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000bbc:	61d9      	str	r1, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000bbe:	1c11      	adds	r1, r2, #0
 8000bc0:	396c      	subs	r1, #108	; 0x6c
 8000bc2:	60d9      	str	r1, [r3, #12]
 8000bc4:	610c      	str	r4, [r1, #16]
 8000bc6:	6944      	ldr	r4, [r0, #20]
 8000bc8:	614c      	str	r4, [r1, #20]
 8000bca:	4c10      	ldr	r4, [pc, #64]	; (8000c0c <chThdCreateSuspendedI+0x5c>)
 8000bcc:	620c      	str	r4, [r1, #32]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000bce:	6801      	ldr	r1, [r0, #0]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8000bd0:	2402      	movs	r4, #2

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000bd2:	68c0      	ldr	r0, [r0, #12]
 8000bd4:	6199      	str	r1, [r3, #24]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	545c      	strb	r4, [r3, r1]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2421      	movs	r4, #33	; 0x21
 8000bde:	5519      	strb	r1, [r3, r4]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8000be0:	6098      	str	r0, [r3, #8]
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8000be2:	63d8      	str	r0, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 8000be4:	6399      	str	r1, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8000be6:	6359      	str	r1, [r3, #52]	; 0x34
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000be8:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <chThdCreateSuspendedI+0x60>)
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8000bea:	2001      	movs	r0, #1
 8000bec:	2122      	movs	r1, #34	; 0x22
 8000bee:	5458      	strb	r0, [r3, r1]
  tp->name      = name;
  REG_INSERT(tp);
 8000bf0:	6960      	ldr	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8000bf2:	1c11      	adds	r1, r2, #0
 8000bf4:	3920      	subs	r1, #32
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8000bf6:	3a1c      	subs	r2, #28
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000bf8:	611c      	str	r4, [r3, #16]
 8000bfa:	6158      	str	r0, [r3, #20]
 8000bfc:	6103      	str	r3, [r0, #16]
 8000bfe:	6163      	str	r3, [r4, #20]
  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
}
 8000c00:	1c18      	adds	r0, r3, #0
 8000c02:	6009      	str	r1, [r1, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000c04:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8000c06:	6052      	str	r2, [r2, #4]
 8000c08:	bd10      	pop	{r4, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	080001f1 	.word	0x080001f1
 8000c10:	20000ff8 	.word	0x20000ff8
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <chSchRescheduleS>:
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8000c20:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8000c22:	4c0f      	ldr	r4, [pc, #60]	; (8000c60 <chSchRescheduleS+0x40>)
 8000c24:	6820      	ldr	r0, [r4, #0]
 8000c26:	69a1      	ldr	r1, [r4, #24]

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000c28:	6883      	ldr	r3, [r0, #8]
 8000c2a:	688a      	ldr	r2, [r1, #8]
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d800      	bhi.n	8000c32 <chSchRescheduleS+0x12>
    chSchDoRescheduleAhead();
  }
}
 8000c30:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000c32:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000c34:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000c36:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000c38:	6023      	str	r3, [r4, #0]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000c3a:	61a0      	str	r0, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8000c3c:	2420      	movs	r4, #32
 8000c3e:	5505      	strb	r5, [r0, r4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000c40:	2500      	movs	r5, #0
 8000c42:	550d      	strb	r5, [r1, r4]
 8000c44:	e000      	b.n	8000c48 <chSchRescheduleS+0x28>
 8000c46:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8000c48:	689c      	ldr	r4, [r3, #8]
 8000c4a:	42a2      	cmp	r2, r4
 8000c4c:	d3fb      	bcc.n	8000c46 <chSchRescheduleS+0x26>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000c4e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000c50:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8000c52:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8000c54:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8000c56:	6059      	str	r1, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000c58:	f7ff faba 	bl	80001d0 <_port_switch>
 8000c5c:	e7e8      	b.n	8000c30 <chSchRescheduleS+0x10>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000ff8 	.word	0x20000ff8
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46c0      	nop			; (mov r8, r8)

08000c70 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8000c70:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->realprio;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <chThdSetPriority+0x24>)
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8000c7a:	6891      	ldr	r1, [r2, #8]
 8000c7c:	428c      	cmp	r4, r1
 8000c7e:	d001      	beq.n	8000c84 <chThdSetPriority+0x14>
 8000c80:	4281      	cmp	r1, r0
 8000c82:	d200      	bcs.n	8000c86 <chThdSetPriority+0x16>
    currp->prio = newprio;
 8000c84:	6090      	str	r0, [r2, #8]
  }
  currp->realprio = newprio;
 8000c86:	63d0      	str	r0, [r2, #60]	; 0x3c
#else
  oldprio = currp->prio;
  currp->prio = newprio;
#endif
  chSchRescheduleS();
 8000c88:	f7ff ffca 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c8c:	b662      	cpsie	i
  chSysUnlock();

  return oldprio;
}
 8000c8e:	1c20      	adds	r0, r4, #0
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000ff8 	.word	0x20000ff8
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46c0      	nop			; (mov r8, r8)

08000ca0 <test_002_003_execute.7947>:
 * - [2.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void test_002_003_execute(void) {
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	464e      	mov	r6, r9
 8000ca4:	4645      	mov	r5, r8
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	b4e0      	push	{r5, r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8000caa:	4e1e      	ldr	r6, [pc, #120]	; (8000d24 <test_002_003_execute.7947+0x84>)
  tprio_t prio, p1;

  /* [2.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <test_002_003_execute.7947+0x88>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8000cae:	69b0      	ldr	r0, [r6, #24]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	6884      	ldr	r4, [r0, #8]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8000cb6:	1c65      	adds	r5, r4, #1
 8000cb8:	1c28      	adds	r0, r5, #0
static void test_002_003_execute(void) {
  tprio_t prio, p1;

  /* [2.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8000cba:	4691      	mov	r9, r2
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8000cbc:	f7ff ffd8 	bl	8000c70 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8000cc0:	4f1a      	ldr	r7, [pc, #104]	; (8000d2c <test_002_003_execute.7947+0x8c>)
  /* [2.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8000cc2:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8000cc4:	1b00      	subs	r0, r0, r4
 8000cc6:	4243      	negs	r3, r0
 8000cc8:	4158      	adcs	r0, r3
 8000cca:	1c39      	adds	r1, r7, #0
 8000ccc:	f7ff fe98 	bl	8000a00 <_test_assert>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d004      	beq.n	8000cde <test_002_003_execute.7947+0x3e>
  {
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  }
}
 8000cd4:	bc1c      	pop	{r2, r3, r4}
 8000cd6:	4690      	mov	r8, r2
 8000cd8:	4699      	mov	r9, r3
 8000cda:	46a2      	mov	sl, r4
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	69b2      	ldr	r2, [r6, #24]
  test_set_step(1);
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
    test_assert(p1 == prio, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8000ce0:	4913      	ldr	r1, [pc, #76]	; (8000d30 <test_002_003_execute.7947+0x90>)
 8000ce2:	6893      	ldr	r3, [r2, #8]
 8000ce4:	468a      	mov	sl, r1
 8000ce6:	1ae8      	subs	r0, r5, r3
 8000ce8:	4243      	negs	r3, r0
 8000cea:	4158      	adcs	r0, r3
 8000cec:	f7ff fe88 	bl	8000a00 <_test_assert>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d1ef      	bne.n	8000cd4 <test_002_003_execute.7947+0x34>
  }

  /* [2.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	464a      	mov	r2, r9
 8000cf8:	6010      	str	r0, [r2, #0]
  {
    p1 = chThdSetPriority(p1);
 8000cfa:	4640      	mov	r0, r8
 8000cfc:	f7ff ffb8 	bl	8000c70 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8000d00:	1a28      	subs	r0, r5, r0
 8000d02:	4245      	negs	r5, r0
 8000d04:	4168      	adcs	r0, r5
 8000d06:	1c39      	adds	r1, r7, #0
 8000d08:	f7ff fe7a 	bl	8000a00 <_test_assert>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d1e1      	bne.n	8000cd4 <test_002_003_execute.7947+0x34>
 8000d10:	69b6      	ldr	r6, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8000d12:	4651      	mov	r1, sl
 8000d14:	68b5      	ldr	r5, [r6, #8]
 8000d16:	1b64      	subs	r4, r4, r5
 8000d18:	4260      	negs	r0, r4
 8000d1a:	4160      	adcs	r0, r4
 8000d1c:	f7ff fe70 	bl	8000a00 <_test_assert>
 8000d20:	e7d8      	b.n	8000cd4 <test_002_003_execute.7947+0x34>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000ff8 	.word	0x20000ff8
 8000d28:	2000106c 	.word	0x2000106c
 8000d2c:	080061b0 	.word	0x080061b0
 8000d30:	080061d4 	.word	0x080061d4
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46c0      	nop			; (mov r8, r8)

08000d40 <chSysRestoreStatusX.part.2.4284>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8000d40:	b508      	push	{r3, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000d42:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8000d46:	05d8      	lsls	r0, r3, #23

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8000d48:	d101      	bne.n	8000d4e <chSysRestoreStatusX.part.2.4284+0xe>
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8000d4a:	f7ff ff69 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d4e:	b662      	cpsie	i
      chSysUnlock();
    }
  }
}
 8000d50:	bd08      	pop	{r3, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46c0      	nop			; (mov r8, r8)

08000d60 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000d60:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8000d62:	4e14      	ldr	r6, [pc, #80]	; (8000db4 <chSchWakeupS+0x54>)

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8000d64:	6884      	ldr	r4, [r0, #8]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8000d66:	69b5      	ldr	r5, [r6, #24]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8000d68:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8000d6a:	68aa      	ldr	r2, [r5, #8]
 8000d6c:	4294      	cmp	r4, r2
 8000d6e:	d80c      	bhi.n	8000d8a <chSchWakeupS+0x2a>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000d70:	2500      	movs	r5, #0
 8000d72:	2120      	movs	r1, #32
 8000d74:	5445      	strb	r5, [r0, r1]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8000d76:	6836      	ldr	r6, [r6, #0]
  } while (cp->prio >= tp->prio);
 8000d78:	68b2      	ldr	r2, [r6, #8]
 8000d7a:	4294      	cmp	r4, r2
 8000d7c:	d9fb      	bls.n	8000d76 <chSchWakeupS+0x16>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000d7e:	6874      	ldr	r4, [r6, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000d80:	6006      	str	r6, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000d82:	6044      	str	r4, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000d84:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
 8000d86:	6070      	str	r0, [r6, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8000d88:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	54e9      	strb	r1, [r5, r3]
  cp = (thread_t *)&ch.rlist.queue;
 8000d90:	1c34      	adds	r4, r6, #0
  do {
    cp = cp->queue.next;
 8000d92:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
 8000d94:	68a1      	ldr	r1, [r4, #8]
 8000d96:	428a      	cmp	r2, r1
 8000d98:	d9fb      	bls.n	8000d92 <chSchWakeupS+0x32>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000d9a:	6862      	ldr	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000d9c:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8000d9e:	606a      	str	r2, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8000da0:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8000da2:	6065      	str	r5, [r4, #4]
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8000da4:	2320      	movs	r3, #32
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8000da6:	61b0      	str	r0, [r6, #24]
    ntp->state = CH_STATE_CURRENT;
 8000da8:	2601      	movs	r6, #1
 8000daa:	54c6      	strb	r6, [r0, r3]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8000dac:	1c29      	adds	r1, r5, #0
 8000dae:	f7ff fa0f 	bl	80001d0 <_port_switch>
 8000db2:	e7e9      	b.n	8000d88 <chSchWakeupS+0x28>
 8000db4:	20000ff8 	.word	0x20000ff8
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46c0      	nop			; (mov r8, r8)

08000dc0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000dc0:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc2:	b672      	cpsid	i
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->cnt <= (cnt_t)0) {
 8000dc4:	6883      	ldr	r3, [r0, #8]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	6083      	str	r3, [r0, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd01      	ble.n	8000dd2 <chSemSignal+0x12>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000dce:	b662      	cpsie	i
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
  }
  chSysUnlock();
}
 8000dd0:	bd08      	pop	{r3, pc}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000dd2:	6801      	ldr	r1, [r0, #0]

  tqp->next             = tp->queue.next;
 8000dd4:	680a      	ldr	r2, [r1, #0]
 8000dd6:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000dd8:	6050      	str	r0, [r2, #4]
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->cnt <= (cnt_t)0) {
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8000dda:	1c08      	adds	r0, r1, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f7ff ffbf 	bl	8000d60 <chSchWakeupS>
 8000de2:	e7f4      	b.n	8000dce <chSemSignal+0xe>
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46c0      	nop			; (mov r8, r8)

08000df0 <chSchGoSleepS>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <chSchGoSleepS+0x20>)

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8000df2:	2220      	movs	r2, #32
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8000df4:	6999      	ldr	r1, [r3, #24]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000df6:	b510      	push	{r4, lr}
  thread_t *otp = currp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8000df8:	5488      	strb	r0, [r1, r2]
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000dfa:	6818      	ldr	r0, [r3, #0]

  tqp->next             = tp->queue.next;
 8000dfc:	6804      	ldr	r4, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000dfe:	6063      	str	r3, [r4, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000e00:	601c      	str	r4, [r3, #0]
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000e02:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8000e04:	2301      	movs	r3, #1
 8000e06:	5483      	strb	r3, [r0, r2]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000e08:	f7ff f9e2 	bl	80001d0 <_port_switch>
}
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	20000ff8 	.word	0x20000ff8
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46c0      	nop			; (mov r8, r8)

08000e20 <bmk_thread4.9644>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <bmk_thread4.9644+0x18>)
static THD_FUNCTION(bmk_thread3, p) {

  chThdExit((msg_t)p);
}

static THD_FUNCTION(bmk_thread4, p) {
 8000e22:	b510      	push	{r4, lr}
 8000e24:	699c      	ldr	r4, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e26:	b672      	cpsid	i
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f7ff ffe1 	bl	8000df0 <chSchGoSleepS>
    msg = self->u.rdymsg;
  } while (msg == MSG_OK);
 8000e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0f9      	beq.n	8000e28 <bmk_thread4.9644+0x8>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e34:	b662      	cpsie	i
  chSysUnlock();
}
 8000e36:	bd10      	pop	{r4, pc}
 8000e38:	20000ff8 	.word	0x20000ff8
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8000e40:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e42:	b672      	cpsid	i
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <chMsgWait+0x34>)
 8000e46:	69a3      	ldr	r3, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8000e48:	1c1a      	adds	r2, r3, #0
 8000e4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e4c:	322c      	adds	r2, #44	; 0x2c
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d007      	beq.n	8000e62 <chMsgWait+0x22>
 8000e52:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8000e54:	240d      	movs	r4, #13
 8000e56:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000e58:	2320      	movs	r3, #32
  tqp->next->queue.prev = (thread_t *)tqp;
 8000e5a:	604a      	str	r2, [r1, #4]
 8000e5c:	54c4      	strb	r4, [r0, r3]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e5e:	b662      	cpsie	i
  chSysUnlock();

  return tp;
}
 8000e60:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8000e62:	200e      	movs	r0, #14
 8000e64:	f7ff ffc4 	bl	8000df0 <chSchGoSleepS>
 8000e68:	69a3      	ldr	r3, [r4, #24]
 8000e6a:	1c1a      	adds	r2, r3, #0
 8000e6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e6e:	322c      	adds	r2, #44	; 0x2c
 8000e70:	e7ef      	b.n	8000e52 <chMsgWait+0x12>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000ff8 	.word	0x20000ff8
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46c0      	nop			; (mov r8, r8)

08000e80 <chSemWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8000e80:	b510      	push	{r4, lr}
 8000e82:	1c03      	adds	r3, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8000e86:	6882      	ldr	r2, [r0, #8]
 8000e88:	3a01      	subs	r2, #1
 8000e8a:	6082      	str	r2, [r0, #8]
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->u.rdymsg;
  }

  return MSG_OK;
 8000e8c:	2000      	movs	r0, #0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	db01      	blt.n	8000e96 <chSemWait+0x16>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e92:	b662      	cpsie	i
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000e94:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    currp->u.wtsemp = sp;
 8000e96:	4c07      	ldr	r4, [pc, #28]	; (8000eb4 <chSemWait+0x34>)
 8000e98:	69a0      	ldr	r0, [r4, #24]
 8000e9a:	6243      	str	r3, [r0, #36]	; 0x24
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8000e9c:	6859      	ldr	r1, [r3, #4]
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
 8000e9e:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = tqp->prev;
 8000ea0:	6041      	str	r1, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000ea2:	6008      	str	r0, [r1, #0]
  tqp->prev                  = tp;
 8000ea4:	6058      	str	r0, [r3, #4]
    sem_insert(currp, &sp->queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f7ff ffa2 	bl	8000df0 <chSchGoSleepS>

    return currp->u.rdymsg;
 8000eac:	69a3      	ldr	r3, [r4, #24]
 8000eae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000eb0:	e7ef      	b.n	8000e92 <chSemWait+0x12>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000ff8 	.word	0x20000ff8
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46c0      	nop			; (mov r8, r8)

08000ec0 <bmk_thread7.9638>:

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	4c08      	ldr	r4, [pc, #32]	; (8000ee4 <bmk_thread7.9638+0x24>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8000ec4:	2321      	movs	r3, #33	; 0x21
 8000ec6:	69a2      	ldr	r2, [r4, #24]
 8000ec8:	5cd0      	ldrb	r0, [r2, r3]

  (void)p;
  while (!chThdShouldTerminateX())
 8000eca:	0742      	lsls	r2, r0, #29
 8000ecc:	d409      	bmi.n	8000ee2 <bmk_thread7.9638+0x22>
 8000ece:	4f06      	ldr	r7, [pc, #24]	; (8000ee8 <bmk_thread7.9638+0x28>)
 8000ed0:	2621      	movs	r6, #33	; 0x21
 8000ed2:	2504      	movs	r5, #4
    chSemWait(&sem1);
 8000ed4:	1c38      	adds	r0, r7, #0
 8000ed6:	f7ff ffd3 	bl	8000e80 <chSemWait>
 8000eda:	69a1      	ldr	r1, [r4, #24]
 8000edc:	5d8b      	ldrb	r3, [r1, r6]

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8000ede:	421d      	tst	r5, r3
 8000ee0:	d0f8      	beq.n	8000ed4 <bmk_thread7.9638+0x14>
    chSemWait(&sem1);
}
 8000ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee4:	20000ff8 	.word	0x20000ff8
 8000ee8:	20000514 	.word	0x20000514
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46c0      	nop			; (mov r8, r8)

08000ef0 <thread1.8336>:

#include "ch.h"

static semaphore_t sem1;

static THD_FUNCTION(thread1, p) {
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	1c04      	adds	r4, r0, #0

  chSemWait(&sem1);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <thread1.8336+0x14>)
 8000ef6:	f7ff ffc3 	bl	8000e80 <chSemWait>
  test_emit_token(*(char *)p);
 8000efa:	7820      	ldrb	r0, [r4, #0]
 8000efc:	f7ff fbf0 	bl	80006e0 <test_emit_token>
}
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	20000508 	.word	0x20000508
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46c0      	nop			; (mov r8, r8)

08000f10 <thread3.8339>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static THD_FUNCTION(thread3, p) {
 8000f10:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8000f12:	4c04      	ldr	r4, [pc, #16]	; (8000f24 <thread3.8339+0x14>)
 8000f14:	1c20      	adds	r0, r4, #0
 8000f16:	f7ff ffb3 	bl	8000e80 <chSemWait>
  chSemSignal(&sem1);
 8000f1a:	1c20      	adds	r0, r4, #0
 8000f1c:	f7ff ff50 	bl	8000dc0 <chSemSignal>
}
 8000f20:	bd10      	pop	{r4, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000508 	.word	0x20000508
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000f30:	2200      	movs	r2, #0
 8000f32:	2320      	movs	r3, #32
 8000f34:	54c2      	strb	r2, [r0, r3]
 8000f36:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <chSchReadyI+0x20>)
  do {
    cp = cp->queue.next;
 8000f3a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f3c:	6899      	ldr	r1, [r3, #8]
 8000f3e:	4291      	cmp	r1, r2
 8000f40:	d2fb      	bcs.n	8000f3a <chSchReadyI+0xa>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000f42:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000f44:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000f46:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000f48:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000f4a:	6058      	str	r0, [r3, #4]

  return tp;
}
 8000f4c:	4770      	bx	lr
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000ff8 	.word	0x20000ff8
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46c0      	nop			; (mov r8, r8)

08000f60 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <chMsgSend+0x34>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8000f62:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8000f64:	699c      	ldr	r4, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f66:	b672      	cpsid	i

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->u.sentmsg = msg;
 8000f68:	6261      	str	r1, [r4, #36]	; 0x24
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8000f6a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  msg_insert(ctp, &tp->msgqueue);
 8000f6c:	1c01      	adds	r1, r0, #0
 8000f6e:	312c      	adds	r1, #44	; 0x2c
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
 8000f70:	6021      	str	r1, [r4, #0]
  tp->queue.prev             = tqp->prev;
 8000f72:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8000f74:	6014      	str	r4, [r2, #0]
  tqp->prev                  = tp;
 8000f76:	6304      	str	r4, [r0, #48]	; 0x30
  if (tp->state == CH_STATE_WTMSG) {
 8000f78:	2320      	movs	r3, #32
 8000f7a:	5cc1      	ldrb	r1, [r0, r3]
 8000f7c:	290e      	cmp	r1, #14
 8000f7e:	d005      	beq.n	8000f8c <chMsgSend+0x2c>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8000f80:	200c      	movs	r0, #12
 8000f82:	f7ff ff35 	bl	8000df0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8000f86:	6a60      	ldr	r0, [r4, #36]	; 0x24
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f88:	b662      	cpsie	i
  chSysUnlock();

  return msg;
}
 8000f8a:	bd10      	pop	{r4, pc}

  chSysLock();
  ctp->u.sentmsg = msg;
  msg_insert(ctp, &tp->msgqueue);
  if (tp->state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8000f8c:	f7ff ffd0 	bl	8000f30 <chSchReadyI>
 8000f90:	e7f6      	b.n	8000f80 <chMsgSend+0x20>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000ff8 	.word	0x20000ff8
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46c0      	nop			; (mov r8, r8)

08000fa0 <msg_thread1.8667>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8000fa0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8000fa2:	2141      	movs	r1, #65	; 0x41

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8000fa4:	1c04      	adds	r4, r0, #0

  chMsgSend(p, 'A');
 8000fa6:	f7ff ffdb 	bl	8000f60 <chMsgSend>
  chMsgSend(p, 'B');
 8000faa:	1c20      	adds	r0, r4, #0
 8000fac:	2142      	movs	r1, #66	; 0x42
 8000fae:	f7ff ffd7 	bl	8000f60 <chMsgSend>
  chMsgSend(p, 'C');
 8000fb2:	1c20      	adds	r0, r4, #0
 8000fb4:	2143      	movs	r1, #67	; 0x43
 8000fb6:	f7ff ffd3 	bl	8000f60 <chMsgSend>
  chMsgSend(p, 'D');
 8000fba:	1c20      	adds	r0, r4, #0
 8000fbc:	2144      	movs	r1, #68	; 0x44
 8000fbe:	f7ff ffcf 	bl	8000f60 <chMsgSend>
}
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46c0      	nop			; (mov r8, r8)

08000fd0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8000fd0:	b508      	push	{r3, lr}

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000fd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000fd4:	2220      	movs	r2, #32
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000fd6:	4319      	orrs	r1, r3
 8000fd8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000fda:	5c83      	ldrb	r3, [r0, r2]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d00b      	beq.n	8000ff8 <chEvtSignalI+0x28>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000fe0:	2b0b      	cmp	r3, #11
 8000fe2:	d000      	beq.n	8000fe6 <chEvtSignalI+0x16>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8000fe4:	bd08      	pop	{r3, pc}
  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000fe6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000fe8:	4011      	ands	r1, r2

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d1fa      	bne.n	8000fe4 <chEvtSignalI+0x14>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000ff2:	f7ff ff9d 	bl	8000f30 <chSchReadyI>
 8000ff6:	e7f5      	b.n	8000fe4 <chEvtSignalI+0x14>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ffa:	420b      	tst	r3, r1
 8000ffc:	d0f2      	beq.n	8000fe4 <chEvtSignalI+0x14>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000ffe:	2100      	movs	r1, #0
 8001000:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001002:	f7ff ff95 	bl	8000f30 <chSchReadyI>
 8001006:	e7ed      	b.n	8000fe4 <chEvtSignalI+0x14>
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46c0      	nop			; (mov r8, r8)

08001010 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001010:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001012:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001014:	1c06      	adds	r6, r0, #0
 8001016:	1c0d      	adds	r5, r1, #0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001018:	42a0      	cmp	r0, r4
 800101a:	d00e      	beq.n	800103a <chEvtBroadcastFlagsI+0x2a>
  /*lint -restore*/
    elp->flags |= flags;
 800101c:	68e3      	ldr	r3, [r4, #12]
 800101e:	432b      	orrs	r3, r5
 8001020:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001022:	2d00      	cmp	r5, #0
 8001024:	d002      	beq.n	800102c <chEvtBroadcastFlagsI+0x1c>
 8001026:	6922      	ldr	r2, [r4, #16]
 8001028:	421a      	tst	r2, r3
 800102a:	d003      	beq.n	8001034 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 800102c:	6860      	ldr	r0, [r4, #4]
 800102e:	68a1      	ldr	r1, [r4, #8]
 8001030:	f7ff ffce 	bl	8000fd0 <chEvtSignalI>
    }
    elp = elp->next;
 8001034:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001036:	42a6      	cmp	r6, r4
 8001038:	d1f0      	bne.n	800101c <chEvtBroadcastFlagsI+0xc>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46c0      	nop			; (mov r8, r8)

08001040 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8001040:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <chMtxUnlockS+0x48>)
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001044:	6804      	ldr	r4, [r0, #0]
 8001046:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001048:	68c3      	ldr	r3, [r0, #12]
 800104a:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800104c:	42a0      	cmp	r0, r4
 800104e:	d018      	beq.n	8001082 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001050:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001052:	2b00      	cmp	r3, #0
 8001054:	d009      	beq.n	800106a <chMtxUnlockS+0x2a>
 8001056:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001058:	4293      	cmp	r3, r2
 800105a:	d003      	beq.n	8001064 <chMtxUnlockS+0x24>
            (lmp->queue.next->prio > newprio)) {
 800105c:	6892      	ldr	r2, [r2, #8]
 800105e:	4291      	cmp	r1, r2
 8001060:	d200      	bcs.n	8001064 <chMtxUnlockS+0x24>
 8001062:	1c11      	adds	r1, r2, #0
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001064:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f5      	bne.n	8001056 <chMtxUnlockS+0x16>
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 800106a:	60a9      	str	r1, [r5, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800106c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800106e:	6825      	ldr	r5, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001070:	6068      	str	r0, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8001072:	6005      	str	r5, [r0, #0]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8001074:	6084      	str	r4, [r0, #8]
      mp->next = tp->mtxlist;
 8001076:	60c2      	str	r2, [r0, #12]
      tp->mtxlist = mp;
 8001078:	63a0      	str	r0, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 800107a:	1c20      	adds	r0, r4, #0
 800107c:	f7ff ff58 	bl	8000f30 <chSchReadyI>
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001080:	bd38      	pop	{r3, r4, r5, pc}
      mp->next = tp->mtxlist;
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
    }
    else {
      mp->owner = NULL;
 8001082:	2100      	movs	r1, #0
 8001084:	6081      	str	r1, [r0, #8]
 8001086:	e7fb      	b.n	8001080 <chMtxUnlockS+0x40>
 8001088:	20000ff8 	.word	0x20000ff8
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46c0      	nop			; (mov r8, r8)

08001090 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001090:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <chMtxUnlock+0x50>)
 8001094:	699d      	ldr	r5, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001096:	b672      	cpsid	i
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001098:	68c3      	ldr	r3, [r0, #12]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 800109a:	6804      	ldr	r4, [r0, #0]
 800109c:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800109e:	42a0      	cmp	r0, r4
 80010a0:	d01b      	beq.n	80010da <chMtxUnlock+0x4a>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80010a2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <chMtxUnlock+0x2c>
 80010a8:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d003      	beq.n	80010b6 <chMtxUnlock+0x26>
            (lmp->queue.next->prio > newprio)) {
 80010ae:	6892      	ldr	r2, [r2, #8]
 80010b0:	4291      	cmp	r1, r2
 80010b2:	d200      	bcs.n	80010b6 <chMtxUnlock+0x26>
 80010b4:	1c11      	adds	r1, r2, #0
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80010b6:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f5      	bne.n	80010a8 <chMtxUnlock+0x18>
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 80010bc:	60a9      	str	r1, [r5, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80010be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80010c0:	6825      	ldr	r5, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80010c2:	6068      	str	r0, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80010c4:	6005      	str	r5, [r0, #0]
 80010c6:	60c2      	str	r2, [r0, #12]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 80010c8:	6084      	str	r4, [r0, #8]
      mp->next = tp->mtxlist;
      tp->mtxlist = mp;
 80010ca:	63a0      	str	r0, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80010cc:	1c20      	adds	r0, r4, #0
 80010ce:	f7ff ff2f 	bl	8000f30 <chSchReadyI>
      chSchRescheduleS();
 80010d2:	f7ff fda5 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80010d6:	b662      	cpsie	i
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 80010d8:	bd38      	pop	{r3, r4, r5, pc}
         just changed priority.*/
      (void) chSchReadyI(tp);
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 80010da:	2100      	movs	r1, #0
 80010dc:	6081      	str	r1, [r0, #8]
 80010de:	e7fa      	b.n	80010d6 <chMtxUnlock+0x46>
 80010e0:	20000ff8 	.word	0x20000ff8
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46c0      	nop			; (mov r8, r8)

080010f0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <chMtxLockS+0xc0>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80010f4:	1c05      	adds	r5, r0, #0
  thread_t *ctp = currp;
 80010f6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80010f8:	6883      	ldr	r3, [r0, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d052      	beq.n	80011a4 <chMtxLockS+0xb4>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80010fe:	68a1      	ldr	r1, [r4, #8]
 8001100:	6898      	ldr	r0, [r3, #8]
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001102:	2620      	movs	r6, #32
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8001104:	4281      	cmp	r1, r0
 8001106:	d907      	bls.n	8001118 <chMtxLockS+0x28>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 8001108:	6099      	str	r1, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 800110a:	5d9f      	ldrb	r7, [r3, r6]
 800110c:	2f06      	cmp	r7, #6
 800110e:	d031      	beq.n	8001174 <chMtxLockS+0x84>
 8001110:	2f07      	cmp	r7, #7
 8001112:	d01c      	beq.n	800114e <chMtxLockS+0x5e>
 8001114:	2f00      	cmp	r7, #0
 8001116:	d011      	beq.n	800113c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001118:	1c2e      	adds	r6, r5, #0
  do {
    cp = cp->queue.next;
 800111a:	6836      	ldr	r6, [r6, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800111c:	42b5      	cmp	r5, r6
 800111e:	d003      	beq.n	8001128 <chMtxLockS+0x38>
 8001120:	68b2      	ldr	r2, [r6, #8]
 8001122:	68a7      	ldr	r7, [r4, #8]
 8001124:	42ba      	cmp	r2, r7
 8001126:	d2f8      	bcs.n	800111a <chMtxLockS+0x2a>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001128:	6873      	ldr	r3, [r6, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 800112a:	6026      	str	r6, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 800112c:	6063      	str	r3, [r4, #4]
  tp->queue.prev->queue.next = tp;
 800112e:	601c      	str	r4, [r3, #0]
  cp->queue.prev             = tp;
 8001130:	6074      	str	r4, [r6, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 8001132:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8001134:	2006      	movs	r0, #6
 8001136:	f7ff fe5b 	bl	8000df0 <chSchGoSleepS>
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 800113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	6819      	ldr	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8001140:	1c18      	adds	r0, r3, #0
 8001142:	6011      	str	r1, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001144:	681e      	ldr	r6, [r3, #0]
 8001146:	6072      	str	r2, [r6, #4]
 8001148:	f7ff fef2 	bl	8000f30 <chSchReadyI>
 800114c:	e7e4      	b.n	8001118 <chMtxLockS+0x28>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800114e:	685f      	ldr	r7, [r3, #4]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	6038      	str	r0, [r7, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	6057      	str	r7, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001158:	6a5f      	ldr	r7, [r3, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800115a:	1c38      	adds	r0, r7, #0
  do {
    cp = cp->queue.next;
 800115c:	6800      	ldr	r0, [r0, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800115e:	4287      	cmp	r7, r0
 8001160:	d002      	beq.n	8001168 <chMtxLockS+0x78>
 8001162:	6886      	ldr	r6, [r0, #8]
 8001164:	428e      	cmp	r6, r1
 8001166:	d2f9      	bcs.n	800115c <chMtxLockS+0x6c>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001168:	6841      	ldr	r1, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 800116a:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 800116c:	6059      	str	r1, [r3, #4]
  tp->queue.prev->queue.next = tp;
 800116e:	600b      	str	r3, [r1, #0]
  cp->queue.prev             = tp;
 8001170:	6043      	str	r3, [r0, #4]
 8001172:	e7d1      	b.n	8001118 <chMtxLockS+0x28>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	681f      	ldr	r7, [r3, #0]
 8001178:	6017      	str	r7, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	6042      	str	r2, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800117e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001180:	1c02      	adds	r2, r0, #0
  do {
    cp = cp->queue.next;
 8001182:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001184:	4290      	cmp	r0, r2
 8001186:	d002      	beq.n	800118e <chMtxLockS+0x9e>
 8001188:	6897      	ldr	r7, [r2, #8]
 800118a:	428f      	cmp	r7, r1
 800118c:	d2f9      	bcs.n	8001182 <chMtxLockS+0x92>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800118e:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8001190:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8001192:	6059      	str	r1, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8001194:	600b      	str	r3, [r1, #0]
  cp->queue.prev             = tp;
 8001196:	6053      	str	r3, [r2, #4]
          tp = tp->u.wtmtxp->owner;
 8001198:	6883      	ldr	r3, [r0, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 800119a:	68a1      	ldr	r1, [r4, #8]
 800119c:	6898      	ldr	r0, [r3, #8]
 800119e:	4288      	cmp	r0, r1
 80011a0:	d3b2      	bcc.n	8001108 <chMtxLockS+0x18>
 80011a2:	e7b9      	b.n	8001118 <chMtxLockS+0x28>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 80011a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
 80011a6:	6084      	str	r4, [r0, #8]
    mp->next = ctp->mtxlist;
 80011a8:	60c2      	str	r2, [r0, #12]
    ctp->mtxlist = mp;
 80011aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80011ac:	e7c5      	b.n	800113a <chMtxLockS+0x4a>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000ff8 	.word	0x20000ff8
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46c0      	nop			; (mov r8, r8)

080011c0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80011c0:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c2:	b672      	cpsid	i

  chSysLock();
  chMtxLockS(mp);
 80011c4:	f7ff ff94 	bl	80010f0 <chMtxLockS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
  chSysUnlock();
}
 80011ca:	bd08      	pop	{r3, pc}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46c0      	nop			; (mov r8, r8)

080011d0 <thread1.8553>:
  }
  while (chVTIsTimeWithinX(now, start, end));
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread1, p) {
 80011d0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 80011d2:	4c06      	ldr	r4, [pc, #24]	; (80011ec <thread1.8553+0x1c>)
  }
  while (chVTIsTimeWithinX(now, start, end));
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread1, p) {
 80011d4:	1c05      	adds	r5, r0, #0

  chMtxLock(&m1);
 80011d6:	1c20      	adds	r0, r4, #0
 80011d8:	f7ff fff2 	bl	80011c0 <chMtxLock>
  test_emit_token(*(char *)p);
 80011dc:	7828      	ldrb	r0, [r5, #0]
 80011de:	f7ff fa7f 	bl	80006e0 <test_emit_token>
  chMtxUnlock(&m1);
 80011e2:	1c20      	adds	r0, r4, #0
 80011e4:	f7ff ff54 	bl	8001090 <chMtxUnlock>
}
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	20000420 	.word	0x20000420

080011f0 <thread9.8544>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread9, p) {
 80011f0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 80011f2:	4c06      	ldr	r4, [pc, #24]	; (800120c <thread9.8544+0x1c>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread9, p) {
 80011f4:	1c05      	adds	r5, r0, #0

  chMtxLock(&m2);
 80011f6:	1c20      	adds	r0, r4, #0
 80011f8:	f7ff ffe2 	bl	80011c0 <chMtxLock>
  test_emit_token(*(char *)p);
 80011fc:	7828      	ldrb	r0, [r5, #0]
 80011fe:	f7ff fa6f 	bl	80006e0 <test_emit_token>
  chMtxUnlock(&m2);
 8001202:	1c20      	adds	r0, r4, #0
 8001204:	f7ff ff44 	bl	8001090 <chMtxUnlock>
}
 8001208:	bd38      	pop	{r3, r4, r5, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000460 	.word	0x20000460

08001210 <chHeapStatus>:
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	4657      	mov	r7, sl
 8001214:	464e      	mov	r6, r9
 8001216:	4645      	mov	r5, r8
 8001218:	b4e0      	push	{r5, r6, r7}
 800121a:	1c04      	adds	r4, r0, #0
 800121c:	468a      	mov	sl, r1
 800121e:	4691      	mov	r9, r2
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
 8001220:	d028      	beq.n	8001274 <chHeapStatus+0x64>
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8001222:	2310      	movs	r3, #16
 8001224:	1918      	adds	r0, r3, r4
 8001226:	4680      	mov	r8, r0
 8001228:	f7ff ffca 	bl	80011c0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
 800122c:	1c21      	adds	r1, r4, #0
 800122e:	3108      	adds	r1, #8
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
 8001230:	2700      	movs	r7, #0
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  tpages = 0U;
 8001232:	2000      	movs	r0, #0
  lpages = 0U;
  n = 0U;
 8001234:	2500      	movs	r5, #0
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8001236:	6809      	ldr	r1, [r1, #0]
 8001238:	2900      	cmp	r1, #0
 800123a:	d008      	beq.n	800124e <chHeapStatus+0x3e>
    size_t pages = H_PAGES(H_NEXT(qp));
 800123c:	684b      	ldr	r3, [r1, #4]

    /* Updating counters.*/
    n++;
 800123e:	3501      	adds	r5, #1
    tpages += pages;
 8001240:	18c0      	adds	r0, r0, r3
 8001242:	429f      	cmp	r7, r3
 8001244:	d2f7      	bcs.n	8001236 <chHeapStatus+0x26>
  H_LOCK(heapp);
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8001246:	6809      	ldr	r1, [r1, #0]
 8001248:	1c1f      	adds	r7, r3, #0
 800124a:	2900      	cmp	r1, #0
 800124c:	d1f6      	bne.n	800123c <chHeapStatus+0x2c>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 800124e:	4652      	mov	r2, sl
 8001250:	2a00      	cmp	r2, #0
 8001252:	d001      	beq.n	8001258 <chHeapStatus+0x48>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8001254:	00c6      	lsls	r6, r0, #3
 8001256:	6016      	str	r6, [r2, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8001258:	464c      	mov	r4, r9
 800125a:	2c00      	cmp	r4, #0
 800125c:	d001      	beq.n	8001262 <chHeapStatus+0x52>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800125e:	00ff      	lsls	r7, r7, #3
 8001260:	6027      	str	r7, [r4, #0]
  }
  H_UNLOCK(heapp);
 8001262:	4640      	mov	r0, r8
 8001264:	f7ff ff14 	bl	8001090 <chMtxUnlock>

  return n;
}
 8001268:	1c28      	adds	r0, r5, #0
 800126a:	bc1c      	pop	{r2, r3, r4}
 800126c:	4690      	mov	r8, r2
 800126e:	4699      	mov	r9, r3
 8001270:	46a2      	mov	sl, r4
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8001274:	4c00      	ldr	r4, [pc, #0]	; (8001278 <chHeapStatus+0x68>)
 8001276:	e7d4      	b.n	8001222 <chHeapStatus+0x12>
 8001278:	20001088 	.word	0x20001088
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46c0      	nop			; (mov r8, r8)

08001280 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8001280:	b570      	push	{r4, r5, r6, lr}
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 8001282:	1c04      	adds	r4, r0, #0
 8001284:	3c08      	subs	r4, #8
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001286:	6863      	ldr	r3, [r4, #4]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8001288:	6826      	ldr	r6, [r4, #0]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800128a:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800128c:	08d8      	lsrs	r0, r3, #3

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 800128e:	1c35      	adds	r5, r6, #0
  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8001290:	3610      	adds	r6, #16
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001292:	6060      	str	r0, [r4, #4]

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8001294:	3508      	adds	r5, #8
  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8001296:	1c30      	adds	r0, r6, #0
 8001298:	f7ff ff92 	bl	80011c0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 800129c:	1c2b      	adds	r3, r5, #0

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800129e:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 80012a0:	42ab      	cmp	r3, r5
 80012a2:	d001      	beq.n	80012a8 <chHeapFree+0x28>
 80012a4:	42a3      	cmp	r3, r4
 80012a6:	d203      	bcs.n	80012b0 <chHeapFree+0x30>
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	d003      	beq.n	80012b4 <chHeapFree+0x34>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80012ac:	4294      	cmp	r4, r2
 80012ae:	d301      	bcc.n	80012b4 <chHeapFree+0x34>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 80012b0:	1c13      	adds	r3, r2, #0
 80012b2:	e7f4      	b.n	800129e <chHeapFree+0x1e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80012b4:	6861      	ldr	r1, [r4, #4]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 80012b6:	6022      	str	r2, [r4, #0]
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80012b8:	1c4d      	adds	r5, r1, #1

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
 80012ba:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80012bc:	00e8      	lsls	r0, r5, #3
 80012be:	6825      	ldr	r5, [r4, #0]
 80012c0:	1822      	adds	r2, r4, r0
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d009      	beq.n	80012da <chHeapFree+0x5a>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 80012c6:	685d      	ldr	r5, [r3, #4]
 80012c8:	1c68      	adds	r0, r5, #1
 80012ca:	00c1      	lsls	r1, r0, #3
 80012cc:	185a      	adds	r2, r3, r1
 80012ce:	4294      	cmp	r4, r2
 80012d0:	d00f      	beq.n	80012f2 <chHeapFree+0x72>
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80012d2:	1c30      	adds	r0, r6, #0
 80012d4:	f7ff fedc 	bl	8001090 <chMtxUnlock>

  return;
}
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80012da:	6850      	ldr	r0, [r2, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80012dc:	6812      	ldr	r2, [r2, #0]
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80012de:	1809      	adds	r1, r1, r0
 80012e0:	3101      	adds	r1, #1
 80012e2:	6061      	str	r1, [r4, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 80012e4:	685d      	ldr	r5, [r3, #4]
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80012e6:	6022      	str	r2, [r4, #0]
      }
      if ((H_LIMIT(qp) == hp)) {
 80012e8:	1c68      	adds	r0, r5, #1
 80012ea:	00c1      	lsls	r1, r0, #3
 80012ec:	185a      	adds	r2, r3, r1
 80012ee:	4294      	cmp	r4, r2
 80012f0:	d1ef      	bne.n	80012d2 <chHeapFree+0x52>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80012f2:	6860      	ldr	r0, [r4, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80012f4:	6824      	ldr	r4, [r4, #0]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80012f6:	182d      	adds	r5, r5, r0
 80012f8:	3501      	adds	r5, #1
 80012fa:	605d      	str	r5, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80012fc:	601c      	str	r4, [r3, #0]
 80012fe:	e7e8      	b.n	80012d2 <chHeapFree+0x52>

08001300 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8001300:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001302:	b672      	cpsid	i

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
  tp->refs--;
 8001304:	2322      	movs	r3, #34	; 0x22
 8001306:	5cc2      	ldrb	r2, [r0, r3]
 8001308:	3a01      	subs	r2, #1
 800130a:	54c2      	strb	r2, [r0, r3]

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800130c:	6a01      	ldr	r1, [r0, #32]
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <chThdRelease+0x50>)
 8001310:	400b      	ands	r3, r1
 8001312:	2b0f      	cmp	r3, #15
 8001314:	d001      	beq.n	800131a <chThdRelease+0x1a>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001316:	b662      	cpsie	i
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
  }
  chSysUnlock();
}
 8001318:	bd08      	pop	{r3, pc}

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
    REG_REMOVE(tp);
 800131a:	6943      	ldr	r3, [r0, #20]
 800131c:	6902      	ldr	r2, [r0, #16]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	6901      	ldr	r1, [r0, #16]
 8001322:	614b      	str	r3, [r1, #20]
 8001324:	b662      	cpsie	i
    chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8001326:	2321      	movs	r3, #33	; 0x21
 8001328:	5cc1      	ldrb	r1, [r0, r3]
 800132a:	2203      	movs	r2, #3
 800132c:	4011      	ands	r1, r2
 800132e:	2901      	cmp	r1, #1
 8001330:	d009      	beq.n	8001346 <chThdRelease+0x46>
 8001332:	2902      	cmp	r1, #2
 8001334:	d1f0      	bne.n	8001318 <chThdRelease+0x18>
      chHeapFree(chThdGetWorkingAreaX(tp));
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8001336:	6c03      	ldr	r3, [r0, #64]	; 0x40
 *
 * @xclass
 */
static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {

  return tp->wabase;
 8001338:	69c0      	ldr	r0, [r0, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133a:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	6001      	str	r1, [r0, #0]
  mp->next = php;
 8001340:	6018      	str	r0, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001342:	b662      	cpsie	i
 8001344:	e7e8      	b.n	8001318 <chThdRelease+0x18>

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
      chHeapFree(chThdGetWorkingAreaX(tp));
 8001346:	69c0      	ldr	r0, [r0, #28]
 8001348:	f7ff ff9a 	bl	8001280 <chHeapFree>
 800134c:	e7e4      	b.n	8001318 <chThdRelease+0x18>
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	00ff00ff 	.word	0x00ff00ff
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46c0      	nop			; (mov r8, r8)

08001360 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	1c04      	adds	r4, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
#endif

  if (tp->state != CH_STATE_FINAL) {
 8001366:	2320      	movs	r3, #32
 8001368:	5cc0      	ldrb	r0, [r0, r3]
 800136a:	280f      	cmp	r0, #15
 800136c:	d007      	beq.n	800137e <chThdWait+0x1e>
    list_insert(currp, &tp->waiting);
 800136e:	4907      	ldr	r1, [pc, #28]	; (800138c <chThdWait+0x2c>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->queue.next = tlp->next;
 8001370:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001372:	698d      	ldr	r5, [r1, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8001374:	2009      	movs	r0, #9
 8001376:	602a      	str	r2, [r5, #0]
  tlp->next = tp;
 8001378:	62a5      	str	r5, [r4, #40]	; 0x28
 800137a:	f7ff fd39 	bl	8000df0 <chSchGoSleepS>
  }
  msg = tp->u.exitcode;
 800137e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001380:	b662      	cpsie	i
  chSysUnlock();

#if CH_CFG_USE_REGISTRY == TRUE
  /* Releasing a reference to the thread.*/
  chThdRelease(tp);
 8001382:	1c20      	adds	r0, r4, #0
 8001384:	f7ff ffbc 	bl	8001300 <chThdRelease>
#endif

  return msg;
}
 8001388:	1c28      	adds	r0, r5, #0
 800138a:	bd38      	pop	{r3, r4, r5, pc}
 800138c:	20000ff8 	.word	0x20000ff8

08001390 <test_wait_threads>:

/*
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8001390:	b510      	push	{r4, lr}
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8001392:	4c12      	ldr	r4, [pc, #72]	; (80013dc <test_wait_threads+0x4c>)
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	2800      	cmp	r0, #0
 8001398:	d003      	beq.n	80013a2 <test_wait_threads+0x12>
      chThdWait(threads[i]);
 800139a:	f7ff ffe1 	bl	8001360 <chThdWait>
      threads[i] = NULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	6023      	str	r3, [r4, #0]
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80013a2:	6860      	ldr	r0, [r4, #4]
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d003      	beq.n	80013b0 <test_wait_threads+0x20>
      chThdWait(threads[i]);
 80013a8:	f7ff ffda 	bl	8001360 <chThdWait>
      threads[i] = NULL;
 80013ac:	2000      	movs	r0, #0
 80013ae:	6060      	str	r0, [r4, #4]
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80013b0:	68a0      	ldr	r0, [r4, #8]
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d003      	beq.n	80013be <test_wait_threads+0x2e>
      chThdWait(threads[i]);
 80013b6:	f7ff ffd3 	bl	8001360 <chThdWait>
      threads[i] = NULL;
 80013ba:	2100      	movs	r1, #0
 80013bc:	60a1      	str	r1, [r4, #8]
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80013be:	68e0      	ldr	r0, [r4, #12]
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d003      	beq.n	80013cc <test_wait_threads+0x3c>
      chThdWait(threads[i]);
 80013c4:	f7ff ffcc 	bl	8001360 <chThdWait>
      threads[i] = NULL;
 80013c8:	2200      	movs	r2, #0
 80013ca:	60e2      	str	r2, [r4, #12]
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80013cc:	6920      	ldr	r0, [r4, #16]
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d003      	beq.n	80013da <test_wait_threads+0x4a>
      chThdWait(threads[i]);
 80013d2:	f7ff ffc5 	bl	8001360 <chThdWait>
      threads[i] = NULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	6123      	str	r3, [r4, #16]
    }
}
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	20000bd0 	.word	0x20000bd0

080013e0 <test_005_004_teardown.8562>:
static void test_005_004_setup(void) {
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void test_005_004_teardown(void) {
 80013e0:	b508      	push	{r3, lr}
  test_wait_threads();
 80013e2:	f7ff ffd5 	bl	8001390 <test_wait_threads>
}
 80013e6:	bd08      	pop	{r3, pc}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46c0      	nop			; (mov r8, r8)

080013f0 <test_004_005_teardown.8381>:

static void test_004_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_005_teardown(void) {
 80013f0:	b508      	push	{r3, lr}
  test_wait_threads();
 80013f2:	f7ff ffcd 	bl	8001390 <test_wait_threads>
}
 80013f6:	bd08      	pop	{r3, pc}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46c0      	nop			; (mov r8, r8)

08001400 <test_004_006_teardown.8379>:
 * - [4.6.6] Signaling the binary semaphore again, the internal state
 *   must not change from "not taken".
 * .
 */

static void test_004_006_teardown(void) {
 8001400:	b508      	push	{r3, lr}
  test_wait_threads();
 8001402:	f7ff ffc5 	bl	8001390 <test_wait_threads>
}
 8001406:	bd08      	pop	{r3, pc}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46c0      	nop			; (mov r8, r8)

08001410 <chSemSignalI>:
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8001410:	b508      	push	{r3, lr}
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001412:	6883      	ldr	r3, [r0, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	6083      	str	r3, [r0, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dd00      	ble.n	800141e <chSemSignalI+0xe>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800141c:	bd08      	pop	{r3, pc}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800141e:	6801      	ldr	r1, [r0, #0]

  tqp->next             = tp->queue.next;
 8001420:	680a      	ldr	r2, [r1, #0]
 8001422:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001424:	6050      	str	r0, [r2, #4]

  if (++sp->cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8001426:	2000      	movs	r0, #0
 8001428:	6248      	str	r0, [r1, #36]	; 0x24
    (void) chSchReadyI(tp);
 800142a:	1c08      	adds	r0, r1, #0
 800142c:	f7ff fd80 	bl	8000f30 <chSchReadyI>
 8001430:	e7f4      	b.n	800141c <chSemSignalI+0xc>
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46c0      	nop			; (mov r8, r8)

08001440 <chSemResetI.4436>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
 8001442:	6885      	ldr	r5, [r0, #8]
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8001444:	1c04      	adds	r4, r0, #0
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001446:	3501      	adds	r5, #1
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
 8001448:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800144a:	2d00      	cmp	r5, #0
 800144c:	dc2b      	bgt.n	80014a6 <chSemResetI.4436+0x66>

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->prev;
 800144e:	6840      	ldr	r0, [r0, #4]
 8001450:	2301      	movs	r3, #1

  tqp->prev             = tp->queue.prev;
 8001452:	6841      	ldr	r1, [r0, #4]
 8001454:	1c2f      	adds	r7, r5, #0
 8001456:	6061      	str	r1, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8001458:	600c      	str	r4, [r1, #0]
 800145a:	401f      	ands	r7, r3
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800145c:	f7ff fd68 	bl	8000f30 <chSchReadyI>
 8001460:	2602      	movs	r6, #2
 8001462:	4276      	negs	r6, r6
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001464:	3501      	adds	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8001466:	6246      	str	r6, [r0, #36]	; 0x24
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001468:	2d01      	cmp	r5, #1
 800146a:	d01c      	beq.n	80014a6 <chSemResetI.4436+0x66>
 800146c:	2f00      	cmp	r7, #0
 800146e:	d009      	beq.n	8001484 <chSemResetI.4436+0x44>

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->prev;
 8001470:	6860      	ldr	r0, [r4, #4]
 8001472:	3501      	adds	r5, #1

  tqp->prev             = tp->queue.prev;
 8001474:	6842      	ldr	r2, [r0, #4]
 8001476:	6062      	str	r2, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8001478:	6014      	str	r4, [r2, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800147a:	f7ff fd59 	bl	8000f30 <chSchReadyI>
 800147e:	6246      	str	r6, [r0, #36]	; 0x24
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 8001480:	2d01      	cmp	r5, #1
 8001482:	d010      	beq.n	80014a6 <chSemResetI.4436+0x66>

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->prev;
 8001484:	6860      	ldr	r0, [r4, #4]
 8001486:	3502      	adds	r5, #2

  tqp->prev             = tp->queue.prev;
 8001488:	6843      	ldr	r3, [r0, #4]
 800148a:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800148c:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800148e:	f7ff fd4f 	bl	8000f30 <chSchReadyI>
 8001492:	6246      	str	r6, [r0, #36]	; 0x24

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->prev;
 8001494:	6860      	ldr	r0, [r4, #4]

  tqp->prev             = tp->queue.prev;
 8001496:	6847      	ldr	r7, [r0, #4]
 8001498:	6067      	str	r7, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800149a:	603c      	str	r4, [r7, #0]
 800149c:	f7ff fd48 	bl	8000f30 <chSchReadyI>
 80014a0:	6246      	str	r6, [r0, #36]	; 0x24
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  cnt = sp->cnt;
  sp->cnt = n;
  while (++cnt <= (cnt_t)0) {
 80014a2:	2d01      	cmp	r5, #1
 80014a4:	d1ee      	bne.n	8001484 <chSemResetI.4436+0x44>
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
  }
}
 80014a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46c0      	nop			; (mov r8, r8)

080014b0 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 80014b0:	b510      	push	{r4, lr}
 80014b2:	1c04      	adds	r4, r0, #0

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 80014b4:	6801      	ldr	r1, [r0, #0]
  mbp->rdptr = mbp->buffer;
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 80014b6:	6863      	ldr	r3, [r4, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 80014b8:	6081      	str	r1, [r0, #8]
  mbp->rdptr = mbp->buffer;
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 80014ba:	1a5a      	subs	r2, r3, r1

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
  mbp->rdptr = mbp->buffer;
 80014bc:	60c1      	str	r1, [r0, #12]
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 80014be:	1091      	asrs	r1, r2, #2
 80014c0:	301c      	adds	r0, #28
 80014c2:	f7ff ffbd 	bl	8001440 <chSemResetI.4436>
  chSemResetI(&mbp->fullsem, (cnt_t)0);
 80014c6:	1c20      	adds	r0, r4, #0
 80014c8:	3010      	adds	r0, #16
 80014ca:	2100      	movs	r1, #0
 80014cc:	f7ff ffb8 	bl	8001440 <chSemResetI.4436>
}
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46c0      	nop			; (mov r8, r8)

080014e0 <chMBReset.constprop.26>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 80014e0:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e2:	b672      	cpsid	i

  chSysLock();
  chMBResetI(mbp);
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <chMBReset.constprop.26+0x14>)
 80014e6:	f7ff ffe3 	bl	80014b0 <chMBResetI>
  chSchRescheduleS();
 80014ea:	f7ff fb99 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80014ee:	b662      	cpsie	i
  chSysUnlock();
}
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	20000438 	.word	0x20000438
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46c0      	nop			; (mov r8, r8)

08001500 <chSemReset>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {
 8001500:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001502:	b672      	cpsid	i

  chSysLock();
  chSemResetI(sp, n);
 8001504:	f7ff ff9c 	bl	8001440 <chSemResetI.4436>
  chSchRescheduleS();
 8001508:	f7ff fb8a 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800150c:	b662      	cpsie	i
  chSysUnlock();
}
 800150e:	bd08      	pop	{r3, pc}

08001510 <test_004_001_execute.8391>:

static void test_004_001_teardown(void) {
  chSemReset(&sem1, 0);
}

static void test_004_001_execute(void) {
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [4.1.1] The function chSemWait() is invoked, after return the
     counter and the returned message are tested.*/
  test_set_step(1);
 8001512:	4e1d      	ldr	r6, [pc, #116]	; (8001588 <test_004_001_execute.8391+0x78>)
  {
    msg_t msg;

    msg = chSemWait(&sem1);
 8001514:	4c1d      	ldr	r4, [pc, #116]	; (800158c <test_004_001_execute.8391+0x7c>)

static void test_004_001_execute(void) {

  /* [4.1.1] The function chSemWait() is invoked, after return the
     counter and the returned message are tested.*/
  test_set_step(1);
 8001516:	2301      	movs	r3, #1
 8001518:	6033      	str	r3, [r6, #0]
  {
    msg_t msg;

    msg = chSemWait(&sem1);
 800151a:	1c20      	adds	r0, r4, #0
 800151c:	f7ff fcb0 	bl	8000e80 <chSemWait>
 8001520:	1c07      	adds	r7, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001522:	b672      	cpsid	i
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8001524:	4d1a      	ldr	r5, [pc, #104]	; (8001590 <test_004_001_execute.8391+0x80>)
 8001526:	68a1      	ldr	r1, [r4, #8]
 8001528:	4248      	negs	r0, r1
 800152a:	4148      	adcs	r0, r1
 800152c:	1c29      	adds	r1, r5, #0
 800152e:	f7ff fa67 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001532:	b662      	cpsie	i
 8001534:	2800      	cmp	r0, #0
 8001536:	d000      	beq.n	800153a <test_004_001_execute.8391+0x2a>
  test_set_step(3);
  {
    chSemReset(&sem1, 2);
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
  }
}
 8001538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    msg_t msg;

    msg = chSemWait(&sem1);
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
    test_assert(MSG_OK == msg, "wrong returned message");
 800153a:	4278      	negs	r0, r7
 800153c:	4178      	adcs	r0, r7
 800153e:	4915      	ldr	r1, [pc, #84]	; (8001594 <test_004_001_execute.8391+0x84>)
 8001540:	f7ff fa5e 	bl	8000a00 <_test_assert>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f7      	bne.n	8001538 <test_004_001_execute.8391+0x28>
  }

  /* [4.1.2] The function chSemSignal() is invoked, after return the
     counter is tested.*/
  test_set_step(2);
 8001548:	2002      	movs	r0, #2
 800154a:	6030      	str	r0, [r6, #0]
  {
    chSemSignal(&sem1);
 800154c:	1c20      	adds	r0, r4, #0
 800154e:	f7ff fc37 	bl	8000dc0 <chSemSignal>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001552:	b672      	cpsid	i
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8001554:	68a0      	ldr	r0, [r4, #8]
 8001556:	1c29      	adds	r1, r5, #0
 8001558:	3801      	subs	r0, #1
 800155a:	4243      	negs	r3, r0
 800155c:	4158      	adcs	r0, r3
 800155e:	f7ff fa4f 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001562:	b662      	cpsie	i
 8001564:	2800      	cmp	r0, #0
 8001566:	d1e7      	bne.n	8001538 <test_004_001_execute.8391+0x28>
  }

  /* [4.1.3] The function chSemReset() is invoked, after return the
     counter is tested.*/
  test_set_step(3);
 8001568:	2203      	movs	r2, #3
  {
    chSemReset(&sem1, 2);
 800156a:	1c20      	adds	r0, r4, #0
 800156c:	2102      	movs	r1, #2
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
  }

  /* [4.1.3] The function chSemReset() is invoked, after return the
     counter is tested.*/
  test_set_step(3);
 800156e:	6032      	str	r2, [r6, #0]
  {
    chSemReset(&sem1, 2);
 8001570:	f7ff ffc6 	bl	8001500 <chSemReset>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8001576:	68a0      	ldr	r0, [r4, #8]
 8001578:	1c29      	adds	r1, r5, #0
 800157a:	3802      	subs	r0, #2
 800157c:	4243      	negs	r3, r0
 800157e:	4158      	adcs	r0, r3
 8001580:	f7ff fa3e 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001584:	b662      	cpsie	i
 8001586:	e7d7      	b.n	8001538 <test_004_001_execute.8391+0x28>
 8001588:	2000106c 	.word	0x2000106c
 800158c:	20000508 	.word	0x20000508
 8001590:	080061f0 	.word	0x080061f0
 8001594:	08006204 	.word	0x08006204
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46c0      	nop			; (mov r8, r8)

080015a0 <test_004_001_teardown.8366>:

static void test_004_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}

static void test_004_001_teardown(void) {
 80015a0:	b508      	push	{r3, lr}
  chSemReset(&sem1, 0);
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <test_004_001_teardown.8366+0xc>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	f7ff ffab 	bl	8001500 <chSemReset>
}
 80015aa:	bd08      	pop	{r3, pc}
 80015ac:	20000508 	.word	0x20000508

080015b0 <chSysGetStatusAndLockX>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80015b0:	f3ef 8010 	mrs	r0, PRIMASK
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80015b4:	07c3      	lsls	r3, r0, #31
 80015b6:	d402      	bmi.n	80015be <chSysGetStatusAndLockX+0xe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015b8:	f3ef 8305 	mrs	r3, IPSR
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
    else {
      chSysLock();
    }
  }
  return sts;
}
 80015be:	4770      	bx	lr

080015c0 <vtcb.7855>:
/****************************************************************************
 * Shared code.
 ****************************************************************************/

/* Timer callback for testing system functions in ISR context.*/
static void vtcb(void *p) {
 80015c0:	b508      	push	{r3, lr}
 80015c2:	b672      	cpsid	i
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80015c4:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c6:	b672      	cpsid	i
  chSysLockFromISR();
  chSysUnlockFromISR();

  /* Reentrant case.*/
  chSysLockFromISR();
  sts = chSysGetStatusAndLockX();
 80015c8:	f7ff fff2 	bl	80015b0 <chSysGetStatusAndLockX>
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 80015cc:	07c3      	lsls	r3, r0, #31
 80015ce:	d401      	bmi.n	80015d4 <vtcb.7855+0x14>
 80015d0:	f7ff fbb6 	bl	8000d40 <chSysRestoreStatusX.part.2.4284>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80015d4:	b662      	cpsie	i
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}
 80015d6:	bd08      	pop	{r3, pc}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46c0      	nop			; (mov r8, r8)

080015e0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80015e0:	e7fe      	b.n	80015e0 <BusFault_Handler>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46c0      	nop			; (mov r8, r8)

080015f0 <test_007_002_execute.8907>:

static void test_007_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_002_execute(void) {
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [7.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <test_007_002_execute.8907+0x40>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 80015f8:	2400      	movs	r4, #0
 80015fa:	2507      	movs	r5, #7
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80015fc:	2601      	movs	r6, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80015fe:	4f0d      	ldr	r7, [pc, #52]	; (8001634 <test_007_002_execute.8907+0x44>)
 8001600:	e002      	b.n	8001608 <test_007_002_execute.8907+0x18>
    }
    eid++;
 8001602:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001604:	2d00      	cmp	r5, #0
 8001606:	d00d      	beq.n	8001624 <test_007_002_execute.8907+0x34>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001608:	1c28      	adds	r0, r5, #0
 800160a:	40e0      	lsrs	r0, r4
 800160c:	4206      	tst	r6, r0
 800160e:	d0f8      	beq.n	8001602 <test_007_002_execute.8907+0x12>

static void test_007_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_002_execute(void) {
 8001610:	00a2      	lsls	r2, r4, #2
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001612:	1c31      	adds	r1, r6, #0
 8001614:	40a1      	lsls	r1, r4
      handlers[eid](eid);
 8001616:	1c20      	adds	r0, r4, #0
 8001618:	59d3      	ldr	r3, [r2, r7]

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800161a:	438d      	bics	r5, r1
      handlers[eid](eid);
    }
    eid++;
 800161c:	3401      	adds	r4, #1
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 800161e:	4798      	blx	r3
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 8001620:	2d00      	cmp	r5, #0
 8001622:	d1f1      	bne.n	8001608 <test_007_002_execute.8907+0x18>
  /* [7.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
 8001624:	4904      	ldr	r1, [pc, #16]	; (8001638 <test_007_002_execute.8907+0x48>)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <test_007_002_execute.8907+0x4c>)
 8001628:	f7ff f99a 	bl	8000960 <_test_assert_sequence>
  }
}
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	2000106c 	.word	0x2000106c
 8001634:	08006354 	.word	0x08006354
 8001638:	08006220 	.word	0x08006220
 800163c:	0800621c 	.word	0x0800621c

08001640 <chCondSignalI.constprop.46.4218>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8001640:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <chCondSignalI.constprop.46.4218+0x1c>)
 8001644:	6818      	ldr	r0, [r3, #0]

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001646:	4298      	cmp	r0, r3
 8001648:	d006      	beq.n	8001658 <chCondSignalI.constprop.46.4218+0x18>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800164a:	6802      	ldr	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 800164c:	2100      	movs	r1, #0
 800164e:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001650:	6053      	str	r3, [r2, #4]
 8001652:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001654:	f7ff fc6c 	bl	8000f30 <chSchReadyI>
  }
}
 8001658:	bd08      	pop	{r3, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	20000418 	.word	0x20000418

08001660 <chCondSignal.constprop.47.4214>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8001660:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001662:	b672      	cpsid	i
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <chCondSignal.constprop.47.4214+0x1c>)
 8001666:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->queue)) {
 8001668:	4298      	cmp	r0, r3
 800166a:	d005      	beq.n	8001678 <chCondSignal.constprop.47.4214+0x18>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800166c:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 800166e:	2100      	movs	r1, #0
 8001670:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001672:	6053      	str	r3, [r2, #4]
 8001674:	f7ff fb74 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001678:	b662      	cpsie	i
  }
  chSysUnlock();
}
 800167a:	bd08      	pop	{r3, pc}
 800167c:	20000418 	.word	0x20000418

08001680 <thread1.8173>:
 * Shared code.
 ****************************************************************************/

static thread_reference_t tr1;

static THD_FUNCTION(thread1, p) {
 8001680:	b510      	push	{r4, lr}
 8001682:	1c04      	adds	r4, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <thread1.8173+0x28>)
 8001688:	6810      	ldr	r0, [r2, #0]
 800168a:	2800      	cmp	r0, #0
 800168c:	d004      	beq.n	8001698 <thread1.8173+0x18>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 800168e:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 8001690:	6241      	str	r1, [r0, #36]	; 0x24
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8001692:	6011      	str	r1, [r2, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001694:	f7ff fc4c 	bl	8000f30 <chSchReadyI>

  chSysLock();
  chThdResumeI(&tr1, MSG_OK);
  chSchRescheduleS();
 8001698:	f7ff fac2 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800169c:	b662      	cpsie	i
  chSysUnlock();
  test_emit_token(*(char *)p);
 800169e:	7820      	ldrb	r0, [r4, #0]
 80016a0:	f7ff f81e 	bl	80006e0 <test_emit_token>
}
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000530 	.word	0x20000530
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46c0      	nop			; (mov r8, r8)

080016b0 <chSemSignalWait.constprop.50.4210>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80016b0:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b2:	b672      	cpsid	i
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
 80016b4:	4c12      	ldr	r4, [pc, #72]	; (8001700 <chSemSignalWait.constprop.50.4210+0x50>)
 80016b6:	68a0      	ldr	r0, [r4, #8]
 80016b8:	3001      	adds	r0, #1
 80016ba:	60a0      	str	r0, [r4, #8]
 80016bc:	2800      	cmp	r0, #0
 80016be:	dd15      	ble.n	80016ec <chSemSignalWait.constprop.50.4210+0x3c>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 80016c0:	3801      	subs	r0, #1
 80016c2:	60a0      	str	r0, [r4, #8]
 80016c4:	2800      	cmp	r0, #0
 80016c6:	db04      	blt.n	80016d2 <chSemSignalWait.constprop.50.4210+0x22>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80016c8:	f7ff faaa 	bl	8000c20 <chSchRescheduleS>
    msg = MSG_OK;
 80016cc:	2000      	movs	r0, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80016ce:	b662      	cpsie	i
  }
  chSysUnlock();

  return msg;
}
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <chSemSignalWait.constprop.50.4210+0x54>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 80016d4:	6863      	ldr	r3, [r4, #4]
 80016d6:	6995      	ldr	r5, [r2, #24]
    sem_insert(ctp, &spw->queue);
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 80016d8:	2005      	movs	r0, #5
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
 80016da:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = tqp->prev;
 80016dc:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 80016de:	601d      	str	r5, [r3, #0]
  tqp->prev                  = tp;
 80016e0:	6065      	str	r5, [r4, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->queue);
    ctp->u.wtsemp = spw;
 80016e2:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTSEM);
 80016e4:	f7ff fb84 	bl	8000df0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 80016e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80016ea:	e7f0      	b.n	80016ce <chSemSignalWait.constprop.50.4210+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 80016ec:	6820      	ldr	r0, [r4, #0]

  tqp->next             = tp->queue.next;
 80016ee:	6803      	ldr	r3, [r0, #0]
 80016f0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80016f2:	605c      	str	r4, [r3, #4]
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 80016f4:	f7ff fc1c 	bl	8000f30 <chSchReadyI>
 80016f8:	2100      	movs	r1, #0
 80016fa:	6241      	str	r1, [r0, #36]	; 0x24
 80016fc:	68a0      	ldr	r0, [r4, #8]
 80016fe:	e7df      	b.n	80016c0 <chSemSignalWait.constprop.50.4210+0x10>
 8001700:	20000508 	.word	0x20000508
 8001704:	20000ff8 	.word	0x20000ff8
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46c0      	nop			; (mov r8, r8)

08001710 <thread6.8547.4138>:
  chSchRescheduleS();
  chSysUnlock();
}

#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
static THD_FUNCTION(thread6, p) {
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chMtxLock(&m1);
 8001712:	4d14      	ldr	r5, [pc, #80]	; (8001764 <thread6.8547.4138+0x54>)
  chSchRescheduleS();
  chSysUnlock();
}

#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
static THD_FUNCTION(thread6, p) {
 8001714:	1c07      	adds	r7, r0, #0

  chMtxLock(&m1);
 8001716:	1c28      	adds	r0, r5, #0
 8001718:	f7ff fd52 	bl	80011c0 <chMtxLock>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <thread6.8547.4138+0x58>)
 8001720:	699c      	ldr	r4, [r3, #24]
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 8001722:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8001724:	1c30      	adds	r0, r6, #0
 8001726:	f7ff fc8b 	bl	8001040 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <thread6.8547.4138+0x5c>)
 800172c:	6262      	str	r2, [r4, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800172e:	1c13      	adds	r3, r2, #0
  do {
    cp = cp->queue.next;
 8001730:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001732:	4293      	cmp	r3, r2
 8001734:	d003      	beq.n	800173e <thread6.8547.4138+0x2e>
 8001736:	6898      	ldr	r0, [r3, #8]
 8001738:	68a1      	ldr	r1, [r4, #8]
 800173a:	4288      	cmp	r0, r1
 800173c:	d2f8      	bcs.n	8001730 <thread6.8547.4138+0x20>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800173e:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8001740:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8001742:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8001744:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001746:	605c      	str	r4, [r3, #4]
  queue_prio_insert(ctp, &cp->queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8001748:	2007      	movs	r0, #7
 800174a:	f7ff fb51 	bl	8000df0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
  chMtxLockS(mp);
 800174e:	1c30      	adds	r0, r6, #0
 8001750:	f7ff fcce 	bl	80010f0 <chMtxLockS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001754:	b662      	cpsie	i
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8001756:	7838      	ldrb	r0, [r7, #0]
 8001758:	f7fe ffc2 	bl	80006e0 <test_emit_token>
  chMtxUnlock(&m1);
 800175c:	1c28      	adds	r0, r5, #0
 800175e:	f7ff fc97 	bl	8001090 <chMtxUnlock>
}
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001764:	20000420 	.word	0x20000420
 8001768:	20000ff8 	.word	0x20000ff8
 800176c:	20000418 	.word	0x20000418

08001770 <test_008_001_teardown.9096>:

static void test_008_001_setup(void) {
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}

static void test_008_001_teardown(void) {
 8001770:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 8001772:	f7ff feb5 	bl	80014e0 <chMBReset.constprop.26>
}
 8001776:	bd08      	pop	{r3, pc}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46c0      	nop			; (mov r8, r8)

08001780 <test_008_002_teardown.9094>:

static void test_008_002_setup(void) {
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}

static void test_008_002_teardown(void) {
 8001780:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 8001782:	f7ff fead 	bl	80014e0 <chMBReset.constprop.26>
}
 8001786:	bd08      	pop	{r3, pc}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46c0      	nop			; (mov r8, r8)

08001790 <test_008_003_teardown.9092>:

static void test_008_003_setup(void) {
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}

static void test_008_003_teardown(void) {
 8001790:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 8001792:	f7ff fea5 	bl	80014e0 <chMBReset.constprop.26>
}
 8001796:	bd08      	pop	{r3, pc}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46c0      	nop			; (mov r8, r8)

080017a0 <chThdCreateStatic.constprop.56>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80017a0:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a2:	b672      	cpsid	i
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80017a4:	1c44      	adds	r4, r0, #1
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80017a6:	1c05      	adds	r5, r0, #0
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80017a8:	34ff      	adds	r4, #255	; 0xff
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80017aa:	35dc      	adds	r5, #220	; 0xdc
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80017ac:	61e0      	str	r0, [r4, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80017ae:	60e5      	str	r5, [r4, #12]
 80017b0:	616b      	str	r3, [r5, #20]
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <chThdCreateStatic.constprop.56+0x74>)
 80017b4:	612a      	str	r2, [r5, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80017b6:	2290      	movs	r2, #144	; 0x90
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80017b8:	622b      	str	r3, [r5, #32]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80017ba:	0055      	lsls	r5, r2, #1
 80017bc:	1943      	adds	r3, r0, r5
  tp->flags     = CH_FLAG_MODE_STATIC;
 80017be:	4d16      	ldr	r5, [pc, #88]	; (8001818 <chThdCreateStatic.constprop.56+0x78>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 80017c0:	60a1      	str	r1, [r4, #8]
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80017c2:	63e1      	str	r1, [r4, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80017c4:	2202      	movs	r2, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80017c6:	2191      	movs	r1, #145	; 0x91
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80017c8:	701a      	strb	r2, [r3, #0]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80017ca:	1942      	adds	r2, r0, r5
 80017cc:	2300      	movs	r3, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80017ce:	004d      	lsls	r5, r1, #1
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80017d0:	7013      	strb	r3, [r2, #0]
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80017d2:	63a3      	str	r3, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80017d4:	6363      	str	r3, [r4, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80017d6:	1943      	adds	r3, r0, r5
  tp->name      = name;
  REG_INSERT(tp);
 80017d8:	4d10      	ldr	r5, [pc, #64]	; (800181c <chThdCreateStatic.constprop.56+0x7c>)
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
  tp->name      = name;
 80017de:	4910      	ldr	r1, [pc, #64]	; (8001820 <chThdCreateStatic.constprop.56+0x80>)
  REG_INSERT(tp);
 80017e0:	696b      	ldr	r3, [r5, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 80017e2:	2294      	movs	r2, #148	; 0x94
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80017e4:	6125      	str	r5, [r4, #16]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80017e6:	61a1      	str	r1, [r4, #24]
  REG_INSERT(tp);
 80017e8:	6163      	str	r3, [r4, #20]
 80017ea:	611c      	str	r4, [r3, #16]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 80017ec:	0051      	lsls	r1, r2, #1
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80017ee:	2394      	movs	r3, #148	; 0x94
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80017f0:	616c      	str	r4, [r5, #20]
 80017f2:	005a      	lsls	r2, r3, #1
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 80017f4:	1845      	adds	r5, r0, r1
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 80017f6:	2196      	movs	r1, #150	; 0x96
 80017f8:	5085      	str	r5, [r0, r2]
 80017fa:	004d      	lsls	r5, r1, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80017fc:	2296      	movs	r2, #150	; 0x96
 80017fe:	1943      	adds	r3, r0, r5
 8001800:	0051      	lsls	r1, r2, #1
 8001802:	5043      	str	r3, [r0, r1]
  tqp->prev = (thread_t *)tqp;
 8001804:	605b      	str	r3, [r3, #4]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8001806:	1c20      	adds	r0, r4, #0
 8001808:	2100      	movs	r1, #0
 800180a:	f7ff faa9 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800180e:	b662      	cpsie	i
  chSysUnlock();

  return tp;
}
 8001810:	1c20      	adds	r0, r4, #0
 8001812:	bd38      	pop	{r3, r4, r5, pc}
 8001814:	080001f1 	.word	0x080001f1
 8001818:	00000121 	.word	0x00000121
 800181c:	20000ff8 	.word	0x20000ff8
 8001820:	08006234 	.word	0x08006234
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46c0      	nop			; (mov r8, r8)

08001830 <test_005_001_execute.8582>:

static void test_005_001_setup(void) {
  chMtxObjectInit(&m1);
}

static void test_005_001_execute(void) {
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <test_005_001_execute.8582+0xc0>)
 8001834:	4657      	mov	r7, sl
 8001836:	464e      	mov	r6, r9
 8001838:	4645      	mov	r5, r8
 800183a:	b4e0      	push	{r5, r6, r7}
  {
    prio = chThdGetPriorityX();
  }

  /* [5.1.2] Locking the mutex.*/
  test_set_step(2);
 800183c:	482d      	ldr	r0, [pc, #180]	; (80018f4 <test_005_001_execute.8582+0xc4>)
  {
    chMtxLock(&m1);
 800183e:	4e2e      	ldr	r6, [pc, #184]	; (80018f8 <test_005_001_execute.8582+0xc8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001840:	6993      	ldr	r3, [r2, #24]
  {
    prio = chThdGetPriorityX();
  }

  /* [5.1.2] Locking the mutex.*/
  test_set_step(2);
 8001842:	2102      	movs	r1, #2
 8001844:	1c05      	adds	r5, r0, #0
 8001846:	6001      	str	r1, [r0, #0]
 8001848:	4680      	mov	r8, r0
  }

  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
 800184a:	2703      	movs	r7, #3
  }

  /* [5.1.2] Locking the mutex.*/
  test_set_step(2);
  {
    chMtxLock(&m1);
 800184c:	1c30      	adds	r0, r6, #0
 800184e:	689c      	ldr	r4, [r3, #8]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001850:	4691      	mov	r9, r2
 8001852:	46b2      	mov	sl, r6
 8001854:	f7ff fcb4 	bl	80011c0 <chMtxLock>
  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8001858:	4e28      	ldr	r6, [pc, #160]	; (80018fc <test_005_001_execute.8582+0xcc>)
  }

  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
 800185a:	602f      	str	r7, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800185c:	4f28      	ldr	r7, [pc, #160]	; (8001900 <test_005_001_execute.8582+0xd0>)
 800185e:	1c61      	adds	r1, r4, #1
 8001860:	1c32      	adds	r2, r6, #0
 8001862:	1c38      	adds	r0, r7, #0
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <test_005_001_execute.8582+0xd4>)
 8001866:	f7ff ff9b 	bl	80017a0 <chThdCreateStatic.constprop.56>
 800186a:	4d27      	ldr	r5, [pc, #156]	; (8001908 <test_005_001_execute.8582+0xd8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800186c:	23a4      	movs	r3, #164	; 0xa4
  /* [5.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800186e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8001870:	0058      	lsls	r0, r3, #1
 8001872:	1ca1      	adds	r1, r4, #2
 8001874:	1c32      	adds	r2, r6, #0
 8001876:	1838      	adds	r0, r7, r0
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <test_005_001_execute.8582+0xdc>)
 800187a:	f7ff ff91 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800187e:	21a4      	movs	r1, #164	; 0xa4
 8001880:	008a      	lsls	r2, r1, #2
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8001882:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8001884:	1ce1      	adds	r1, r4, #3
 8001886:	18b8      	adds	r0, r7, r2
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <test_005_001_execute.8582+0xe0>)
 800188a:	1c32      	adds	r2, r6, #0
 800188c:	f7ff ff88 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8001890:	23f6      	movs	r3, #246	; 0xf6
     priority order.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8001892:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8001894:	0098      	lsls	r0, r3, #2
 8001896:	1d21      	adds	r1, r4, #4
 8001898:	1c32      	adds	r2, r6, #0
 800189a:	1838      	adds	r0, r7, r0
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <test_005_001_execute.8582+0xe4>)
 800189e:	f7ff ff7f 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80018a2:	21a4      	movs	r1, #164	; 0xa4
 80018a4:	00ca      	lsls	r2, r1, #3
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <test_005_001_execute.8582+0xe8>)
 80018a8:	1d61      	adds	r1, r4, #5
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80018aa:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80018ac:	18b8      	adds	r0, r7, r2
 80018ae:	1c32      	adds	r2, r6, #0
 80018b0:	f7ff ff76 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [5.1.4] Unlocking the mutex, the threads will wakeup in priority
     order because the mutext queue is an ordered one.*/
  test_set_step(4);
 80018b4:	2704      	movs	r7, #4
 80018b6:	4646      	mov	r6, r8
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80018b8:	6128      	str	r0, [r5, #16]
  }

  /* [5.1.4] Unlocking the mutex, the threads will wakeup in priority
     order because the mutext queue is an ordered one.*/
  test_set_step(4);
 80018ba:	6037      	str	r7, [r6, #0]
  {
    chMtxUnlock(&m1);
 80018bc:	4650      	mov	r0, sl
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80018be:	464d      	mov	r5, r9
 80018c0:	f7ff fbe6 	bl	8001090 <chMtxUnlock>
    test_wait_threads();
 80018c4:	f7ff fd64 	bl	8001390 <test_wait_threads>
 80018c8:	69ab      	ldr	r3, [r5, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <test_005_001_execute.8582+0xec>)
 80018cc:	6898      	ldr	r0, [r3, #8]
 80018ce:	1a24      	subs	r4, r4, r0
 80018d0:	4260      	negs	r0, r4
 80018d2:	4160      	adcs	r0, r4
 80018d4:	f7ff f894 	bl	8000a00 <_test_assert>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d103      	bne.n	80018e4 <test_005_001_execute.8582+0xb4>
    test_assert_sequence("ABCDE", "invalid sequence");
 80018dc:	4810      	ldr	r0, [pc, #64]	; (8001920 <test_005_001_execute.8582+0xf0>)
 80018de:	4911      	ldr	r1, [pc, #68]	; (8001924 <test_005_001_execute.8582+0xf4>)
 80018e0:	f7ff f83e 	bl	8000960 <_test_assert_sequence>
  }
}
 80018e4:	bc1c      	pop	{r2, r3, r4}
 80018e6:	4690      	mov	r8, r2
 80018e8:	4699      	mov	r9, r3
 80018ea:	46a2      	mov	sl, r4
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	20000ff8 	.word	0x20000ff8
 80018f4:	2000106c 	.word	0x2000106c
 80018f8:	20000420 	.word	0x20000420
 80018fc:	080011d1 	.word	0x080011d1
 8001900:	20000558 	.word	0x20000558
 8001904:	08006268 	.word	0x08006268
 8001908:	20000bd0 	.word	0x20000bd0
 800190c:	0800623c 	.word	0x0800623c
 8001910:	08006240 	.word	0x08006240
 8001914:	08006244 	.word	0x08006244
 8001918:	08006248 	.word	0x08006248
 800191c:	0800624c 	.word	0x0800624c
 8001920:	08006264 	.word	0x08006264
 8001924:	08006220 	.word	0x08006220
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46c0      	nop			; (mov r8, r8)

08001930 <test_005_007_execute.8580>:
static void test_005_007_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void test_005_007_execute(void) {
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001932:	4828      	ldr	r0, [pc, #160]	; (80019d4 <test_005_007_execute.8580+0xa4>)
 8001934:	4647      	mov	r7, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001936:	6981      	ldr	r1, [r0, #24]
 8001938:	b480      	push	{r7}
 800193a:	688e      	ldr	r6, [r1, #8]
  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800193c:	4f26      	ldr	r7, [pc, #152]	; (80019d8 <test_005_007_execute.8580+0xa8>)
 800193e:	4d27      	ldr	r5, [pc, #156]	; (80019dc <test_005_007_execute.8580+0xac>)

static void test_005_007_execute(void) {

  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 8001940:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <test_005_007_execute.8580+0xb0>)
 8001942:	2301      	movs	r3, #1
 8001944:	4690      	mov	r8, r2
 8001946:	6013      	str	r3, [r2, #0]
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8001948:	1c71      	adds	r1, r6, #1
 800194a:	1c2a      	adds	r2, r5, #0
 800194c:	1c38      	adds	r0, r7, #0
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <test_005_007_execute.8580+0xb4>)
 8001950:	f7ff ff26 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001954:	4c24      	ldr	r4, [pc, #144]	; (80019e8 <test_005_007_execute.8580+0xb8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8001956:	22a4      	movs	r2, #164	; 0xa4
 8001958:	0053      	lsls	r3, r2, #1
  /* [5.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800195a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800195c:	1cb1      	adds	r1, r6, #2
 800195e:	18f8      	adds	r0, r7, r3
 8001960:	1c2a      	adds	r2, r5, #0
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <test_005_007_execute.8580+0xbc>)
 8001964:	f7ff ff1c 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001968:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800196a:	20a4      	movs	r0, #164	; 0xa4
 800196c:	0081      	lsls	r1, r0, #2
 800196e:	1878      	adds	r0, r7, r1
 8001970:	1c2a      	adds	r2, r5, #0
 8001972:	1cf1      	adds	r1, r6, #3
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <test_005_007_execute.8580+0xc0>)
 8001976:	f7ff ff13 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800197a:	22f6      	movs	r2, #246	; 0xf6
 800197c:	0093      	lsls	r3, r2, #2
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800197e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8001980:	1d31      	adds	r1, r6, #4
 8001982:	18f8      	adds	r0, r7, r3
 8001984:	1c2a      	adds	r2, r5, #0
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <test_005_007_execute.8580+0xc4>)
 8001988:	f7ff ff0a 	bl	80017a0 <chThdCreateStatic.constprop.56>
 800198c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800198e:	20a4      	movs	r0, #164	; 0xa4
 8001990:	00c1      	lsls	r1, r0, #3
 8001992:	1878      	adds	r0, r7, r1
 8001994:	1c2a      	adds	r2, r5, #0
 8001996:	1d71      	adds	r1, r6, #5
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <test_005_007_execute.8580+0xc8>)
 800199a:	f7ff ff01 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [5.7.2] Atomically signaling the condition variable five times
     then waiting for the threads to terminate in priority order, the
     order is tested.*/
  test_set_step(2);
 800199e:	2602      	movs	r6, #2
 80019a0:	4647      	mov	r7, r8
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80019a2:	6120      	str	r0, [r4, #16]
  }

  /* [5.7.2] Atomically signaling the condition variable five times
     then waiting for the threads to terminate in priority order, the
     order is tested.*/
  test_set_step(2);
 80019a4:	603e      	str	r6, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a6:	b672      	cpsid	i
  {
    chSysLock();
    chCondSignalI(&c1);
 80019a8:	f7ff fe4a 	bl	8001640 <chCondSignalI.constprop.46.4218>
    chCondSignalI(&c1);
 80019ac:	f7ff fe48 	bl	8001640 <chCondSignalI.constprop.46.4218>
    chCondSignalI(&c1);
 80019b0:	f7ff fe46 	bl	8001640 <chCondSignalI.constprop.46.4218>
    chCondSignalI(&c1);
 80019b4:	f7ff fe44 	bl	8001640 <chCondSignalI.constprop.46.4218>
    chCondSignalI(&c1);
 80019b8:	f7ff fe42 	bl	8001640 <chCondSignalI.constprop.46.4218>
    chSchRescheduleS();
 80019bc:	f7ff f930 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80019c0:	b662      	cpsie	i
    chSysUnlock();
    test_wait_threads();
 80019c2:	f7ff fce5 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80019c6:	490d      	ldr	r1, [pc, #52]	; (80019fc <test_005_007_execute.8580+0xcc>)
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <test_005_007_execute.8580+0xd0>)
 80019ca:	f7fe ffc9 	bl	8000960 <_test_assert_sequence>
  }
}
 80019ce:	bc04      	pop	{r2}
 80019d0:	4690      	mov	r8, r2
 80019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d4:	20000ff8 	.word	0x20000ff8
 80019d8:	20000558 	.word	0x20000558
 80019dc:	08001711 	.word	0x08001711
 80019e0:	2000106c 	.word	0x2000106c
 80019e4:	08006268 	.word	0x08006268
 80019e8:	20000bd0 	.word	0x20000bd0
 80019ec:	0800623c 	.word	0x0800623c
 80019f0:	08006240 	.word	0x08006240
 80019f4:	08006244 	.word	0x08006244
 80019f8:	08006248 	.word	0x08006248
 80019fc:	08006220 	.word	0x08006220
 8001a00:	08006264 	.word	0x08006264
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46c0      	nop			; (mov r8, r8)

08001a10 <test_005_008_execute.8578>:
static void test_005_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void test_005_008_execute(void) {
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001a12:	482b      	ldr	r0, [pc, #172]	; (8001ac0 <test_005_008_execute.8578+0xb0>)
 8001a14:	4647      	mov	r7, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001a16:	6981      	ldr	r1, [r0, #24]
 8001a18:	b480      	push	{r7}
 8001a1a:	688e      	ldr	r6, [r1, #8]
  /* [5.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8001a1c:	4f29      	ldr	r7, [pc, #164]	; (8001ac4 <test_005_008_execute.8578+0xb4>)
 8001a1e:	4d2a      	ldr	r5, [pc, #168]	; (8001ac8 <test_005_008_execute.8578+0xb8>)

static void test_005_008_execute(void) {

  /* [5.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <test_005_008_execute.8578+0xbc>)
 8001a22:	2301      	movs	r3, #1
 8001a24:	4690      	mov	r8, r2
 8001a26:	6013      	str	r3, [r2, #0]
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8001a28:	1c71      	adds	r1, r6, #1
 8001a2a:	1c2a      	adds	r2, r5, #0
 8001a2c:	1c38      	adds	r0, r7, #0
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <test_005_008_execute.8578+0xc0>)
 8001a30:	f7ff feb6 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001a34:	4c27      	ldr	r4, [pc, #156]	; (8001ad4 <test_005_008_execute.8578+0xc4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8001a36:	22a4      	movs	r2, #164	; 0xa4
 8001a38:	0053      	lsls	r3, r2, #1
  /* [5.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8001a3a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8001a3c:	1cb1      	adds	r1, r6, #2
 8001a3e:	18f8      	adds	r0, r7, r3
 8001a40:	1c2a      	adds	r2, r5, #0
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <test_005_008_execute.8578+0xc8>)
 8001a44:	f7ff feac 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001a48:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8001a4a:	20a4      	movs	r0, #164	; 0xa4
 8001a4c:	0081      	lsls	r1, r0, #2
 8001a4e:	1878      	adds	r0, r7, r1
 8001a50:	1c2a      	adds	r2, r5, #0
 8001a52:	1cf1      	adds	r1, r6, #3
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <test_005_008_execute.8578+0xcc>)
 8001a56:	f7ff fea3 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8001a5a:	22f6      	movs	r2, #246	; 0xf6
 8001a5c:	0093      	lsls	r3, r2, #2
  test_set_step(1);
  {
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8001a5e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8001a60:	1d31      	adds	r1, r6, #4
 8001a62:	18f8      	adds	r0, r7, r3
 8001a64:	1c2a      	adds	r2, r5, #0
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <test_005_008_execute.8578+0xd0>)
 8001a68:	f7ff fe9a 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001a6c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8001a6e:	20a4      	movs	r0, #164	; 0xa4
 8001a70:	00c1      	lsls	r1, r0, #3
 8001a72:	1878      	adds	r0, r7, r1
 8001a74:	1c2a      	adds	r2, r5, #0
 8001a76:	1d71      	adds	r1, r6, #5
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <test_005_008_execute.8578+0xd4>)
 8001a7a:	f7ff fe91 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [5.8.2] Broarcasting on the condition variable then waiting for
     the threads to terminate in priority order, the order is tested.*/
  test_set_step(2);
 8001a7e:	2602      	movs	r6, #2
 8001a80:	4647      	mov	r7, r8
    tprio_t prio = chThdGetPriorityX();
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8001a82:	6120      	str	r0, [r4, #16]
  }

  /* [5.8.2] Broarcasting on the condition variable then waiting for
     the threads to terminate in priority order, the order is tested.*/
  test_set_step(2);
 8001a84:	603e      	str	r6, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a86:	b672      	cpsid	i
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001a88:	4c17      	ldr	r4, [pc, #92]	; (8001ae8 <test_005_008_execute.8578+0xd8>)

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8001a8a:	2502      	movs	r5, #2
 8001a8c:	6820      	ldr	r0, [r4, #0]
 8001a8e:	426e      	negs	r6, r5
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 8001a90:	42a0      	cmp	r0, r4
 8001a92:	d008      	beq.n	8001aa6 <test_005_008_execute.8578+0x96>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8001a94:	6802      	ldr	r2, [r0, #0]
 8001a96:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a98:	6054      	str	r4, [r2, #4]
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8001a9a:	f7ff fa49 	bl	8000f30 <chSchReadyI>
 8001a9e:	6246      	str	r6, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001aa0:	6820      	ldr	r0, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 8001aa2:	42a0      	cmp	r0, r4
 8001aa4:	d1f6      	bne.n	8001a94 <test_005_008_execute.8578+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8001aa6:	f7ff f8bb 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001aaa:	b662      	cpsie	i
  {
    chCondBroadcast(&c1);
    test_wait_threads();
 8001aac:	f7ff fc70 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <test_005_008_execute.8578+0xdc>)
 8001ab2:	480f      	ldr	r0, [pc, #60]	; (8001af0 <test_005_008_execute.8578+0xe0>)
 8001ab4:	f7fe ff54 	bl	8000960 <_test_assert_sequence>
  }
}
 8001ab8:	bc04      	pop	{r2}
 8001aba:	4690      	mov	r8, r2
 8001abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	20000ff8 	.word	0x20000ff8
 8001ac4:	20000558 	.word	0x20000558
 8001ac8:	08001711 	.word	0x08001711
 8001acc:	2000106c 	.word	0x2000106c
 8001ad0:	08006268 	.word	0x08006268
 8001ad4:	20000bd0 	.word	0x20000bd0
 8001ad8:	0800623c 	.word	0x0800623c
 8001adc:	08006240 	.word	0x08006240
 8001ae0:	08006244 	.word	0x08006244
 8001ae4:	08006248 	.word	0x08006248
 8001ae8:	20000418 	.word	0x20000418
 8001aec:	08006220 	.word	0x08006220
 8001af0:	08006264 	.word	0x08006264
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46c0      	nop			; (mov r8, r8)

08001b00 <test_005_009_execute.8564>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void test_005_009_execute(void) {
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <test_005_009_execute.8564+0x70>)
    prio = chThdGetPriorityX();
  }

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8001b04:	4c1b      	ldr	r4, [pc, #108]	; (8001b74 <test_005_009_execute.8564+0x74>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001b06:	6998      	ldr	r0, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001b08:	4f1b      	ldr	r7, [pc, #108]	; (8001b78 <test_005_009_execute.8564+0x78>)
 8001b0a:	6886      	ldr	r6, [r0, #8]
    prio = chThdGetPriorityX();
  }

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	6021      	str	r1, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001b10:	1c38      	adds	r0, r7, #0
 8001b12:	1c71      	adds	r1, r6, #1
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <test_005_009_execute.8564+0x7c>)
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <test_005_009_execute.8564+0x80>)
 8001b18:	f7ff fe42 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001b1c:	4d19      	ldr	r5, [pc, #100]	; (8001b84 <test_005_009_execute.8564+0x84>)

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001b1e:	23a4      	movs	r3, #164	; 0xa4

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8001b20:	6028      	str	r0, [r5, #0]
  }

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8001b22:	2203      	movs	r2, #3
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001b24:	0058      	lsls	r0, r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
  }

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8001b26:	6022      	str	r2, [r4, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001b28:	1cb1      	adds	r1, r6, #2
 8001b2a:	1838      	adds	r0, r7, r0
 8001b2c:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <test_005_009_execute.8564+0x88>)
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <test_005_009_execute.8564+0x8c>)
 8001b30:	f7ff fe36 	bl	80017a0 <chThdCreateStatic.constprop.56>

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001b34:	22a4      	movs	r2, #164	; 0xa4
 8001b36:	0093      	lsls	r3, r2, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
  }

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8001b38:	2104      	movs	r1, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <test_005_009_execute.8564+0x90>)

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8001b3c:	6068      	str	r0, [r5, #4]
  }

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8001b3e:	6021      	str	r1, [r4, #0]
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001b40:	18f8      	adds	r0, r7, r3
 8001b42:	1cf1      	adds	r1, r6, #3
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <test_005_009_execute.8564+0x94>)
 8001b46:	f7ff fe2b 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [5.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8001b4a:	2605      	movs	r6, #5
 8001b4c:	6026      	str	r6, [r4, #0]
  {
    chCondSignal(&c1);
  }

  /* [5.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8001b4e:	2706      	movs	r7, #6

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8001b50:	60a8      	str	r0, [r5, #8]
  /* [5.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
  {
    chCondSignal(&c1);
 8001b52:	f7ff fd85 	bl	8001660 <chCondSignal.constprop.47.4214>
  {
    chCondSignal(&c1);
  }

  /* [5.9.7] Checking the order of operations.*/
  test_set_step(7);
 8001b56:	2507      	movs	r5, #7
  {
    chCondSignal(&c1);
  }

  /* [5.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8001b58:	6027      	str	r7, [r4, #0]
  {
    chCondSignal(&c1);
 8001b5a:	f7ff fd81 	bl	8001660 <chCondSignal.constprop.47.4214>
  }

  /* [5.9.7] Checking the order of operations.*/
  test_set_step(7);
 8001b5e:	6025      	str	r5, [r4, #0]
  {
    test_wait_threads();
 8001b60:	f7ff fc16 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <test_005_009_execute.8564+0x98>)
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <test_005_009_execute.8564+0x9c>)
 8001b68:	f7fe fefa 	bl	8000960 <_test_assert_sequence>
  }
}
 8001b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	20000ff8 	.word	0x20000ff8
 8001b74:	2000106c 	.word	0x2000106c
 8001b78:	20000558 	.word	0x20000558
 8001b7c:	08003761 	.word	0x08003761
 8001b80:	08006248 	.word	0x08006248
 8001b84:	20000bd0 	.word	0x20000bd0
 8001b88:	08001711 	.word	0x08001711
 8001b8c:	08006240 	.word	0x08006240
 8001b90:	080011f1 	.word	0x080011f1
 8001b94:	08006244 	.word	0x08006244
 8001b98:	08006220 	.word	0x08006220
 8001b9c:	0800621c 	.word	0x0800621c

08001ba0 <test_004_004_execute.8395>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001ba0:	4822      	ldr	r0, [pc, #136]	; (8001c2c <test_004_004_execute.8395+0x8c>)

static void test_004_004_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_004_execute(void) {
 8001ba2:	b538      	push	{r3, r4, r5, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001ba4:	6981      	ldr	r1, [r0, #24]

  /* [4.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
 8001ba6:	4c22      	ldr	r4, [pc, #136]	; (8001c30 <test_004_004_execute.8395+0x90>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8001ba8:	4d22      	ldr	r5, [pc, #136]	; (8001c34 <test_004_004_execute.8395+0x94>)
 8001baa:	6889      	ldr	r1, [r1, #8]
}

static void test_004_004_execute(void) {

  /* [4.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
 8001bac:	2301      	movs	r3, #1
 8001bae:	6023      	str	r3, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8001bb0:	3101      	adds	r1, #1
 8001bb2:	1c2b      	adds	r3, r5, #0
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <test_004_004_execute.8395+0x98>)
 8001bb6:	4821      	ldr	r0, [pc, #132]	; (8001c3c <test_004_004_execute.8395+0x9c>)
 8001bb8:	f7ff fdf2 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <test_004_004_execute.8395+0xa0>)
  }

  /* [4.4.2] The semaphore counter is increased by two, it is then
     tested to be one, the thread must have completed.*/
  test_set_step(2);
 8001bbe:	2302      	movs	r3, #2
static void test_004_004_execute(void) {

  /* [4.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8001bc0:	6010      	str	r0, [r2, #0]
  }

  /* [4.4.2] The semaphore counter is increased by two, it is then
     tested to be one, the thread must have completed.*/
  test_set_step(2);
 8001bc2:	6023      	str	r3, [r4, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
 8001bc6:	4c1f      	ldr	r4, [pc, #124]	; (8001c44 <test_004_004_execute.8395+0xa4>)
 8001bc8:	68a0      	ldr	r0, [r4, #8]
 8001bca:	3001      	adds	r0, #1
 8001bcc:	60a0      	str	r0, [r4, #8]
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	dd22      	ble.n	8001c18 <test_004_004_execute.8395+0x78>
 8001bd2:	68a3      	ldr	r3, [r4, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	60a3      	str	r3, [r4, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dd14      	ble.n	8001c06 <test_004_004_execute.8395+0x66>
  {
    chSysLock();
    chSemAddCounterI(&sem1, 2);
    chSchRescheduleS();
 8001bdc:	f7ff f820 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001be0:	b662      	cpsie	i
    chSysUnlock();
    test_wait_threads();
 8001be2:	f7ff fbd5 	bl	8001390 <test_wait_threads>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be6:	b672      	cpsid	i
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8001be8:	68a0      	ldr	r0, [r4, #8]
 8001bea:	4917      	ldr	r1, [pc, #92]	; (8001c48 <test_004_004_execute.8395+0xa8>)
 8001bec:	3801      	subs	r0, #1
 8001bee:	4243      	negs	r3, r0
 8001bf0:	4158      	adcs	r0, r3
 8001bf2:	f7fe ff05 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf6:	b662      	cpsie	i
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d103      	bne.n	8001c04 <test_004_004_execute.8395+0x64>
    test_assert_sequence("A", "invalid sequence");
 8001bfc:	1c28      	adds	r0, r5, #0
 8001bfe:	4913      	ldr	r1, [pc, #76]	; (8001c4c <test_004_004_execute.8395+0xac>)
 8001c00:	f7fe feae 	bl	8000960 <_test_assert_sequence>
  }
}
 8001c04:	bd38      	pop	{r3, r4, r5, pc}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8001c06:	6820      	ldr	r0, [r4, #0]

  tqp->next             = tp->queue.next;
 8001c08:	6801      	ldr	r1, [r0, #0]
 8001c0a:	6021      	str	r1, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001c0c:	604c      	str	r4, [r1, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8001c0e:	f7ff f98f 	bl	8000f30 <chSchReadyI>
 8001c12:	2200      	movs	r2, #0
 8001c14:	6242      	str	r2, [r0, #36]	; 0x24
 8001c16:	e7e1      	b.n	8001bdc <test_004_004_execute.8395+0x3c>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8001c18:	6820      	ldr	r0, [r4, #0]

  tqp->next             = tp->queue.next;
 8001c1a:	6801      	ldr	r1, [r0, #0]
 8001c1c:	6021      	str	r1, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001c1e:	604c      	str	r4, [r1, #4]
 8001c20:	f7ff f986 	bl	8000f30 <chSchReadyI>
 8001c24:	2200      	movs	r2, #0
 8001c26:	6242      	str	r2, [r0, #36]	; 0x24
 8001c28:	e7d3      	b.n	8001bd2 <test_004_004_execute.8395+0x32>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000ff8 	.word	0x20000ff8
 8001c30:	2000106c 	.word	0x2000106c
 8001c34:	08006248 	.word	0x08006248
 8001c38:	08000ef1 	.word	0x08000ef1
 8001c3c:	20000558 	.word	0x20000558
 8001c40:	20000bd0 	.word	0x20000bd0
 8001c44:	20000508 	.word	0x20000508
 8001c48:	0800626c 	.word	0x0800626c
 8001c4c:	08006220 	.word	0x08006220

08001c50 <test_004_005_execute.8387>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001c50:	481d      	ldr	r0, [pc, #116]	; (8001cc8 <test_004_005_execute.8387+0x78>)

static void test_004_005_teardown(void) {
  test_wait_threads();
}

static void test_004_005_execute(void) {
 8001c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001c54:	6981      	ldr	r1, [r0, #24]

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8001c56:	4d1d      	ldr	r5, [pc, #116]	; (8001ccc <test_004_005_execute.8387+0x7c>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001c58:	6889      	ldr	r1, [r1, #8]

static void test_004_005_execute(void) {

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8001c5a:	2301      	movs	r3, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001c5c:	3101      	adds	r1, #1

static void test_004_005_execute(void) {

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8001c5e:	602b      	str	r3, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <test_004_005_execute.8387+0x80>)
 8001c62:	2300      	movs	r3, #0
 8001c64:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <test_004_005_execute.8387+0x84>)
 8001c66:	f7ff fd9b 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [4.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8001c6a:	2402      	movs	r4, #2

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <test_004_005_execute.8387+0x88>)
  }

  /* [4.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8001c6e:	602c      	str	r4, [r5, #0]

  /* [4.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001c70:	6010      	str	r0, [r2, #0]
  /* [4.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
  {
    chSemSignalWait(&sem1, &sem1);
 8001c72:	f7ff fd1d 	bl	80016b0 <chSemSignalWait.constprop.50.4210>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next == (const thread_t *)tqp);
 8001c76:	4c19      	ldr	r4, [pc, #100]	; (8001cdc <test_004_005_execute.8387+0x8c>)
 8001c78:	6826      	ldr	r6, [r4, #0]
 8001c7a:	1b30      	subs	r0, r6, r4
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8001c7c:	4e18      	ldr	r6, [pc, #96]	; (8001ce0 <test_004_005_execute.8387+0x90>)
 8001c7e:	4243      	negs	r3, r0
 8001c80:	4158      	adcs	r0, r3
 8001c82:	1c31      	adds	r1, r6, #0
 8001c84:	f7fe febc 	bl	8000a00 <_test_assert>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d000      	beq.n	8001c8e <test_004_005_execute.8387+0x3e>
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
}
 8001c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     value must be one on exit.*/
  test_set_step(2);
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
 8001c8e:	68a7      	ldr	r7, [r4, #8]
 8001c90:	4278      	negs	r0, r7
 8001c92:	4178      	adcs	r0, r7
 8001c94:	4f13      	ldr	r7, [pc, #76]	; (8001ce4 <test_004_005_execute.8387+0x94>)
 8001c96:	1c39      	adds	r1, r7, #0
 8001c98:	f7fe feb2 	bl	8000a00 <_test_assert>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d1f5      	bne.n	8001c8c <test_004_005_execute.8387+0x3c>
  }

  /* [4.5.3] The function chSemSignalWait() is invoked again by
     specifying the same semaphore for the wait and signal phases. The
     counter value must be one on exit.*/
  test_set_step(3);
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8001ca4:	f7ff fd04 	bl	80016b0 <chSemSignalWait.constprop.50.4210>
 8001ca8:	6825      	ldr	r5, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8001caa:	1c31      	adds	r1, r6, #0
 8001cac:	1b28      	subs	r0, r5, r4
 8001cae:	4243      	negs	r3, r0
 8001cb0:	4158      	adcs	r0, r3
 8001cb2:	f7fe fea5 	bl	8000a00 <_test_assert>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d1e8      	bne.n	8001c8c <test_004_005_execute.8387+0x3c>
    test_assert(sem1.cnt == 0, "counter not zero");
 8001cba:	68a0      	ldr	r0, [r4, #8]
 8001cbc:	1c39      	adds	r1, r7, #0
 8001cbe:	4243      	negs	r3, r0
 8001cc0:	4158      	adcs	r0, r3
 8001cc2:	f7fe fe9d 	bl	8000a00 <_test_assert>
 8001cc6:	e7e1      	b.n	8001c8c <test_004_005_execute.8387+0x3c>
 8001cc8:	20000ff8 	.word	0x20000ff8
 8001ccc:	2000106c 	.word	0x2000106c
 8001cd0:	08000f11 	.word	0x08000f11
 8001cd4:	20000558 	.word	0x20000558
 8001cd8:	20000bd0 	.word	0x20000bd0
 8001cdc:	20000508 	.word	0x20000508
 8001ce0:	0800627c 	.word	0x0800627c
 8001ce4:	0800628c 	.word	0x0800628c
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46c0      	nop			; (mov r8, r8)

08001cf0 <test_004_002_execute.8383>:

static void test_004_002_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_002_execute(void) {
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001cf2:	4e2d      	ldr	r6, [pc, #180]	; (8001da8 <test_004_002_execute.8383+0xb8>)
 8001cf4:	4647      	mov	r7, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001cf6:	69b0      	ldr	r0, [r6, #24]
 8001cf8:	b480      	push	{r7}
  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001cfa:	4d2c      	ldr	r5, [pc, #176]	; (8001dac <test_004_002_execute.8383+0xbc>)
 8001cfc:	4f2c      	ldr	r7, [pc, #176]	; (8001db0 <test_004_002_execute.8383+0xc0>)
static void test_004_002_execute(void) {

  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
 8001cfe:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <test_004_002_execute.8383+0xc4>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001d00:	6881      	ldr	r1, [r0, #8]
static void test_004_002_execute(void) {

  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
 8001d02:	2301      	movs	r3, #1
 8001d04:	4690      	mov	r8, r2
 8001d06:	6013      	str	r3, [r2, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001d08:	3105      	adds	r1, #5
 8001d0a:	1c2a      	adds	r2, r5, #0
 8001d0c:	1c38      	adds	r0, r7, #0
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <test_004_002_execute.8383+0xc8>)
 8001d10:	f7ff fd46 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001d14:	69b3      	ldr	r3, [r6, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001d16:	21a4      	movs	r1, #164	; 0xa4
  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001d18:	4c28      	ldr	r4, [pc, #160]	; (8001dbc <test_004_002_execute.8383+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001d1a:	004a      	lsls	r2, r1, #1
 8001d1c:	6899      	ldr	r1, [r3, #8]
  /* [4.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001d1e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001d20:	3101      	adds	r1, #1
 8001d22:	18b8      	adds	r0, r7, r2
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <test_004_002_execute.8383+0xd0>)
 8001d26:	1c2a      	adds	r2, r5, #0
 8001d28:	f7ff fd3a 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001d2c:	69b2      	ldr	r2, [r6, #24]
 8001d2e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001d30:	20a4      	movs	r0, #164	; 0xa4
 8001d32:	0081      	lsls	r1, r0, #2
 8001d34:	1878      	adds	r0, r7, r1
 8001d36:	6891      	ldr	r1, [r2, #8]
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <test_004_002_execute.8383+0xd4>)
 8001d3a:	1c2a      	adds	r2, r5, #0
 8001d3c:	3103      	adds	r1, #3
 8001d3e:	f7ff fd2f 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001d42:	69b1      	ldr	r1, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001d44:	23f6      	movs	r3, #246	; 0xf6
 8001d46:	6889      	ldr	r1, [r1, #8]
     initialized to zero.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001d48:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001d4a:	0098      	lsls	r0, r3, #2
 8001d4c:	1c2a      	adds	r2, r5, #0
 8001d4e:	1838      	adds	r0, r7, r0
 8001d50:	3104      	adds	r1, #4
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <test_004_002_execute.8383+0xd8>)
 8001d54:	f7ff fd24 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8001d58:	22a4      	movs	r2, #164	; 0xa4
 8001d5a:	00d3      	lsls	r3, r2, #3
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001d5c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8001d5e:	18f8      	adds	r0, r7, r3
 8001d60:	69b7      	ldr	r7, [r6, #24]
 8001d62:	1c2a      	adds	r2, r5, #0
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <test_004_002_execute.8383+0xdc>)
 8001d68:	3102      	adds	r1, #2
 8001d6a:	f7ff fd19 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001d6e:	6120      	str	r0, [r4, #16]

  /* [4.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
  {
    chSemSignal(&sem1);
 8001d70:	4c17      	ldr	r4, [pc, #92]	; (8001dd0 <test_004_002_execute.8383+0xe0>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  }

  /* [4.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
 8001d72:	4645      	mov	r5, r8
 8001d74:	2602      	movs	r6, #2
 8001d76:	602e      	str	r6, [r5, #0]
  {
    chSemSignal(&sem1);
 8001d78:	1c20      	adds	r0, r4, #0
 8001d7a:	f7ff f821 	bl	8000dc0 <chSemSignal>
    chSemSignal(&sem1);
 8001d7e:	1c20      	adds	r0, r4, #0
 8001d80:	f7ff f81e 	bl	8000dc0 <chSemSignal>
    chSemSignal(&sem1);
 8001d84:	1c20      	adds	r0, r4, #0
 8001d86:	f7ff f81b 	bl	8000dc0 <chSemSignal>
    chSemSignal(&sem1);
 8001d8a:	1c20      	adds	r0, r4, #0
 8001d8c:	f7ff f818 	bl	8000dc0 <chSemSignal>
    chSemSignal(&sem1);
 8001d90:	1c20      	adds	r0, r4, #0
 8001d92:	f7ff f815 	bl	8000dc0 <chSemSignal>
    test_wait_threads();
 8001d96:	f7ff fafb 	bl	8001390 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
    test_assert_sequence("ADCEB", "invalid sequence");
#else
    test_assert_sequence("ABCDE", "invalid sequence");
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <test_004_002_execute.8383+0xe4>)
 8001d9c:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <test_004_002_execute.8383+0xe8>)
 8001d9e:	f7fe fddf 	bl	8000960 <_test_assert_sequence>
#endif
  }
}
 8001da2:	bc04      	pop	{r2}
 8001da4:	4690      	mov	r8, r2
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	20000ff8 	.word	0x20000ff8
 8001dac:	08000ef1 	.word	0x08000ef1
 8001db0:	20000558 	.word	0x20000558
 8001db4:	2000106c 	.word	0x2000106c
 8001db8:	08006248 	.word	0x08006248
 8001dbc:	20000bd0 	.word	0x20000bd0
 8001dc0:	08006244 	.word	0x08006244
 8001dc4:	08006240 	.word	0x08006240
 8001dc8:	0800623c 	.word	0x0800623c
 8001dcc:	08006268 	.word	0x08006268
 8001dd0:	20000508 	.word	0x20000508
 8001dd4:	08006220 	.word	0x08006220
 8001dd8:	08006264 	.word	0x08006264
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46c0      	nop			; (mov r8, r8)

08001de0 <test_002_002_execute.7949>:
 * - [2.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void test_002_002_execute(void) {
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de2:	465f      	mov	r7, fp
 8001de4:	4656      	mov	r6, sl
 8001de6:	464d      	mov	r5, r9
 8001de8:	4644      	mov	r4, r8
 8001dea:	b4f0      	push	{r4, r5, r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001dec:	4e5b      	ldr	r6, [pc, #364]	; (8001f5c <test_002_002_execute.7949+0x17c>)

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001dee:	4d5c      	ldr	r5, [pc, #368]	; (8001f60 <test_002_002_execute.7949+0x180>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001df0:	69b0      	ldr	r0, [r6, #24]

static void test_002_002_execute(void) {

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8001df2:	4a5c      	ldr	r2, [pc, #368]	; (8001f64 <test_002_002_execute.7949+0x184>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001df4:	4f5c      	ldr	r7, [pc, #368]	; (8001f68 <test_002_002_execute.7949+0x188>)
 8001df6:	6881      	ldr	r1, [r0, #8]

static void test_002_002_execute(void) {

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001dfc:	3905      	subs	r1, #5
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <test_002_002_execute.7949+0x18c>)

static void test_002_002_execute(void) {

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8001e00:	4693      	mov	fp, r2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001e02:	1c38      	adds	r0, r7, #0
 8001e04:	1c2a      	adds	r2, r5, #0
 8001e06:	f7ff fccb 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001e0a:	4c59      	ldr	r4, [pc, #356]	; (8001f70 <test_002_002_execute.7949+0x190>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001e0c:	21a4      	movs	r1, #164	; 0xa4

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001e0e:	6020      	str	r0, [r4, #0]
 8001e10:	69b0      	ldr	r0, [r6, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001e12:	004a      	lsls	r2, r1, #1
 8001e14:	6881      	ldr	r1, [r0, #8]
 8001e16:	19d3      	adds	r3, r2, r7
 8001e18:	3904      	subs	r1, #4
 8001e1a:	1c18      	adds	r0, r3, #0
 8001e1c:	1c2a      	adds	r2, r5, #0
 8001e1e:	469a      	mov	sl, r3
 8001e20:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <test_002_002_execute.7949+0x194>)
 8001e22:	f7ff fcbd 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001e26:	69b1      	ldr	r1, [r6, #24]
 8001e28:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001e2a:	6889      	ldr	r1, [r1, #8]
 8001e2c:	1c2a      	adds	r2, r5, #0
 8001e2e:	3903      	subs	r1, #3
 8001e30:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <test_002_002_execute.7949+0x198>)
 8001e32:	4852      	ldr	r0, [pc, #328]	; (8001f7c <test_002_002_execute.7949+0x19c>)
 8001e34:	f7ff fcb4 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001e38:	69b2      	ldr	r2, [r6, #24]
 8001e3a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001e3c:	6891      	ldr	r1, [r2, #8]
 8001e3e:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <test_002_002_execute.7949+0x1a0>)
 8001e40:	3902      	subs	r1, #2
 8001e42:	1c2a      	adds	r2, r5, #0
 8001e44:	484f      	ldr	r0, [pc, #316]	; (8001f84 <test_002_002_execute.7949+0x1a4>)
 8001e46:	f7ff fcab 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001e4a:	69b3      	ldr	r3, [r6, #24]
 8001e4c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	1c2a      	adds	r2, r5, #0
 8001e52:	3901      	subs	r1, #1
 8001e54:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <test_002_002_execute.7949+0x1a8>)
 8001e56:	484d      	ldr	r0, [pc, #308]	; (8001f8c <test_002_002_execute.7949+0x1ac>)
 8001e58:	f7ff fca2 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001e5c:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8001e5e:	f7ff fa97 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8001e62:	484b      	ldr	r0, [pc, #300]	; (8001f90 <test_002_002_execute.7949+0x1b0>)
 8001e64:	494b      	ldr	r1, [pc, #300]	; (8001f94 <test_002_002_execute.7949+0x1b4>)
 8001e66:	4681      	mov	r9, r0
 8001e68:	4688      	mov	r8, r1
 8001e6a:	f7fe fd79 	bl	8000960 <_test_assert_sequence>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d005      	beq.n	8001e7e <test_002_002_execute.7949+0x9e>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 8001e72:	bc3c      	pop	{r2, r3, r4, r5}
 8001e74:	4690      	mov	r8, r2
 8001e76:	4699      	mov	r9, r3
 8001e78:	46a2      	mov	sl, r4
 8001e7a:	46ab      	mov	fp, r5
 8001e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e7e:	69b0      	ldr	r0, [r6, #24]
    test_assert_sequence("ABCDE", "invalid sequence");
  }

  /* [2.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
 8001e80:	2302      	movs	r3, #2
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001e82:	6881      	ldr	r1, [r0, #8]
    test_assert_sequence("ABCDE", "invalid sequence");
  }

  /* [2.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
 8001e84:	465a      	mov	r2, fp
 8001e86:	6013      	str	r3, [r2, #0]
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001e88:	3901      	subs	r1, #1
 8001e8a:	1c2a      	adds	r2, r5, #0
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <test_002_002_execute.7949+0x1a8>)
 8001e8e:	483f      	ldr	r0, [pc, #252]	; (8001f8c <test_002_002_execute.7949+0x1ac>)
 8001e90:	f7ff fc86 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001e94:	69b1      	ldr	r1, [r6, #24]
 8001e96:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001e98:	6889      	ldr	r1, [r1, #8]
 8001e9a:	1c2a      	adds	r2, r5, #0
 8001e9c:	3902      	subs	r1, #2
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <test_002_002_execute.7949+0x1a0>)
 8001ea0:	4838      	ldr	r0, [pc, #224]	; (8001f84 <test_002_002_execute.7949+0x1a4>)
 8001ea2:	f7ff fc7d 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001ea6:	69b3      	ldr	r3, [r6, #24]
 8001ea8:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	1c2a      	adds	r2, r5, #0
 8001eae:	3903      	subs	r1, #3
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <test_002_002_execute.7949+0x198>)
 8001eb2:	4832      	ldr	r0, [pc, #200]	; (8001f7c <test_002_002_execute.7949+0x19c>)
 8001eb4:	f7ff fc74 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001eb8:	69b2      	ldr	r2, [r6, #24]
 8001eba:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001ebc:	6891      	ldr	r1, [r2, #8]
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <test_002_002_execute.7949+0x194>)
 8001ec0:	3904      	subs	r1, #4
 8001ec2:	1c2a      	adds	r2, r5, #0
 8001ec4:	4650      	mov	r0, sl
 8001ec6:	f7ff fc6b 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001eca:	6060      	str	r0, [r4, #4]
 8001ecc:	69b0      	ldr	r0, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001ece:	1c2a      	adds	r2, r5, #0
 8001ed0:	6881      	ldr	r1, [r0, #8]
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <test_002_002_execute.7949+0x18c>)
 8001ed4:	3905      	subs	r1, #5
 8001ed6:	1c38      	adds	r0, r7, #0
 8001ed8:	f7ff fc62 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001edc:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8001ede:	f7ff fa57 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8001ee2:	4648      	mov	r0, r9
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	f7fe fd3b 	bl	8000960 <_test_assert_sequence>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1c1      	bne.n	8001e72 <test_002_002_execute.7949+0x92>
 8001eee:	69b2      	ldr	r2, [r6, #24]
  }

  /* [2.2.3] Creating 5 threads with pseudo-random priority, execution
     sequence is tested.*/
  test_set_step(3);
 8001ef0:	465b      	mov	r3, fp
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	6019      	str	r1, [r3, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001ef6:	6891      	ldr	r1, [r2, #8]
 8001ef8:	4650      	mov	r0, sl
 8001efa:	1c2a      	adds	r2, r5, #0
 8001efc:	3904      	subs	r1, #4
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <test_002_002_execute.7949+0x194>)
 8001f00:	f7ff fc4e 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001f04:	6060      	str	r0, [r4, #4]
 8001f06:	69b0      	ldr	r0, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001f08:	1c2a      	adds	r2, r5, #0
 8001f0a:	6881      	ldr	r1, [r0, #8]
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <test_002_002_execute.7949+0x18c>)
 8001f0e:	3905      	subs	r1, #5
 8001f10:	1c38      	adds	r0, r7, #0
 8001f12:	f7ff fc45 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001f16:	69b7      	ldr	r7, [r6, #24]
 8001f18:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	1c2a      	adds	r2, r5, #0
 8001f1e:	3901      	subs	r1, #1
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <test_002_002_execute.7949+0x1a8>)
 8001f22:	481a      	ldr	r0, [pc, #104]	; (8001f8c <test_002_002_execute.7949+0x1ac>)
 8001f24:	f7ff fc3c 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001f28:	69b1      	ldr	r1, [r6, #24]
 8001f2a:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001f2c:	6889      	ldr	r1, [r1, #8]
 8001f2e:	1c2a      	adds	r2, r5, #0
 8001f30:	3902      	subs	r1, #2
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <test_002_002_execute.7949+0x1a0>)
 8001f34:	4813      	ldr	r0, [pc, #76]	; (8001f84 <test_002_002_execute.7949+0x1a4>)
 8001f36:	f7ff fc33 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001f3a:	69b6      	ldr	r6, [r6, #24]
 8001f3c:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001f3e:	68b1      	ldr	r1, [r6, #8]
 8001f40:	1c2a      	adds	r2, r5, #0
 8001f42:	3903      	subs	r1, #3
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <test_002_002_execute.7949+0x198>)
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <test_002_002_execute.7949+0x19c>)
 8001f48:	f7ff fc2a 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8001f4c:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8001f4e:	f7ff fa1f 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8001f52:	4648      	mov	r0, r9
 8001f54:	4641      	mov	r1, r8
 8001f56:	f7fe fd03 	bl	8000960 <_test_assert_sequence>
 8001f5a:	e78a      	b.n	8001e72 <test_002_002_execute.7949+0x92>
 8001f5c:	20000ff8 	.word	0x20000ff8
 8001f60:	08000741 	.word	0x08000741
 8001f64:	2000106c 	.word	0x2000106c
 8001f68:	20000558 	.word	0x20000558
 8001f6c:	08006268 	.word	0x08006268
 8001f70:	20000bd0 	.word	0x20000bd0
 8001f74:	0800623c 	.word	0x0800623c
 8001f78:	08006240 	.word	0x08006240
 8001f7c:	200007e8 	.word	0x200007e8
 8001f80:	08006244 	.word	0x08006244
 8001f84:	20000930 	.word	0x20000930
 8001f88:	08006248 	.word	0x08006248
 8001f8c:	20000a78 	.word	0x20000a78
 8001f90:	08006264 	.word	0x08006264
 8001f94:	08006220 	.word	0x08006220
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46c0      	nop			; (mov r8, r8)

08001fa0 <chEvtGetAndClearEvents.constprop.40>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->epending & events;
 8001fa2:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <chEvtGetAndClearEvents.constprop.40+0x10>)
  currp->epending &= ~events;
 8001fa4:	2200      	movs	r2, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->epending & events;
 8001fa6:	6999      	ldr	r1, [r3, #24]
 8001fa8:	6b48      	ldr	r0, [r1, #52]	; 0x34
  currp->epending &= ~events;
 8001faa:	634a      	str	r2, [r1, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001fac:	b662      	cpsie	i
  chSysUnlock();

  return m;
}
 8001fae:	4770      	bx	lr
 8001fb0:	20000ff8 	.word	0x20000ff8
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46c0      	nop			; (mov r8, r8)

08001fc0 <test_007_002_setup.8893>:
 * - [7.2.1] Three evenf flag bits are raised then chEvtDispatch() is
 *   invoked, the sequence of handlers calls is tested.
 * .
 */

static void test_007_002_setup(void) {
 8001fc0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001fc2:	f7ff ffed 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
}
 8001fc6:	bd08      	pop	{r3, pc}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46c0      	nop			; (mov r8, r8)

08001fd0 <test_007_003_setup.8891>:
 *   been received after 50mS and that the event flags mask has been
 *   emptied.
 * .
 */

static void test_007_003_setup(void) {
 8001fd0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001fd2:	f7ff ffe5 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
}
 8001fd6:	bd08      	pop	{r3, pc}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46c0      	nop			; (mov r8, r8)

08001fe0 <test_007_004_setup.8889>:
 *   been received after 50mS and that the event flags mask has been
 *   emptied.
 * .
 */

static void test_007_004_setup(void) {
 8001fe0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001fe2:	f7ff ffdd 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
}
 8001fe6:	bd08      	pop	{r3, pc}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46c0      	nop			; (mov r8, r8)

08001ff0 <test_007_005_setup.8887>:
 *   flags have been received after 50mS and that the event flags mask
 *   has been emptied.
 * .
 */

static void test_007_005_setup(void) {
 8001ff0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001ff2:	f7ff ffd5 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
}
 8001ff6:	bd08      	pop	{r3, pc}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46c0      	nop			; (mov r8, r8)

08002000 <test_007_006_setup.8885>:
 * - [7.6.2] The functions are invoked first with a 50mS timeout, the
 *   timeout condition is tested.
 * .
 */

static void test_007_006_setup(void) {
 8002000:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8002002:	f7ff ffcd 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
}
 8002006:	bd08      	pop	{r3, pc}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46c0      	nop			; (mov r8, r8)

08002010 <test_007_007_setup.8883>:
 *   has been emptied.
 * - [7.7.4] Unregistering from the Event Sources.
 * .
 */

static void test_007_007_setup(void) {
 8002010:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8002012:	f7ff ffc5 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002016:	4b02      	ldr	r3, [pc, #8]	; (8002020 <test_007_007_setup.8883+0x10>)
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <test_007_007_setup.8883+0x14>)
 800201a:	601b      	str	r3, [r3, #0]
 800201c:	6000      	str	r0, [r0, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800201e:	bd08      	pop	{r3, pc}
 8002020:	20000434 	.word	0x20000434
 8002024:	20000430 	.word	0x20000430
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46c0      	nop			; (mov r8, r8)

08002030 <chEvtWaitOne.constprop.36>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <chEvtWaitOne.constprop.36+0x28>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8002032:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8002034:	699c      	ldr	r4, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002036:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002038:	6b62      	ldr	r2, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800203a:	2a00      	cmp	r2, #0
 800203c:	d106      	bne.n	800204c <chEvtWaitOne.constprop.36+0x1c>
    ctp->u.ewmask = events;
 800203e:	2001      	movs	r0, #1
 8002040:	4241      	negs	r1, r0
 8002042:	6261      	str	r1, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002044:	200a      	movs	r0, #10
 8002046:	f7fe fed3 	bl	8000df0 <chSchGoSleepS>
    m = ctp->epending & events;
 800204a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800204c:	4250      	negs	r0, r2
 800204e:	4010      	ands	r0, r2
  ctp->epending &= ~m;
 8002050:	4382      	bics	r2, r0
 8002052:	6362      	str	r2, [r4, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002054:	b662      	cpsie	i
  chSysUnlock();

  return m;
}
 8002056:	bd10      	pop	{r4, pc}
 8002058:	20000ff8 	.word	0x20000ff8
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46c0      	nop			; (mov r8, r8)

08002060 <chEvtWaitAny.constprop.35>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <chEvtWaitAny.constprop.35+0x24>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8002062:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8002064:	699c      	ldr	r4, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002066:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002068:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800206a:	2800      	cmp	r0, #0
 800206c:	d106      	bne.n	800207c <chEvtWaitAny.constprop.35+0x1c>
    ctp->u.ewmask = events;
 800206e:	2001      	movs	r0, #1
 8002070:	4241      	negs	r1, r0
 8002072:	6261      	str	r1, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002074:	200a      	movs	r0, #10
 8002076:	f7fe febb 	bl	8000df0 <chSchGoSleepS>
    m = ctp->epending & events;
 800207a:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 800207c:	2200      	movs	r2, #0
 800207e:	6362      	str	r2, [r4, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002080:	b662      	cpsie	i
  chSysUnlock();

  return m;
}
 8002082:	bd10      	pop	{r4, pc}
 8002084:	20000ff8 	.word	0x20000ff8
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46c0      	nop			; (mov r8, r8)

08002090 <chEvtWaitAll.constprop.34>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <chEvtWaitAll.constprop.34+0x2c>)
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8002092:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8002094:	699c      	ldr	r4, [r3, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002096:	b672      	cpsid	i

  chSysLock();
  if ((ctp->epending & events) != events) {
 8002098:	2205      	movs	r2, #5
 800209a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800209c:	1c11      	adds	r1, r2, #0
 800209e:	4001      	ands	r1, r0
 80020a0:	2905      	cmp	r1, #5
 80020a2:	d004      	beq.n	80020ae <chEvtWaitAll.constprop.34+0x1e>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80020a4:	200b      	movs	r0, #11
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;

  chSysLock();
  if ((ctp->epending & events) != events) {
    ctp->u.ewmask = events;
 80020a6:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80020a8:	f7fe fea2 	bl	8000df0 <chSchGoSleepS>
 80020ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 80020ae:	2305      	movs	r3, #5
 80020b0:	4398      	bics	r0, r3
 80020b2:	6360      	str	r0, [r4, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80020b4:	b662      	cpsie	i
  chSysUnlock();

  return events;
}
 80020b6:	2005      	movs	r0, #5
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000ff8 	.word	0x20000ff8

080020c0 <chHeapAllocAligned.constprop.30>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	4656      	mov	r6, sl
 80020c4:	464d      	mov	r5, r9
 80020c6:	465f      	mov	r7, fp
 80020c8:	4644      	mov	r4, r8
 80020ca:	b4f0      	push	{r4, r5, r6, r7}
 80020cc:	4682      	mov	sl, r0
 80020ce:	b083      	sub	sp, #12
 80020d0:	4689      	mov	r9, r1
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d100      	bne.n	80020d8 <chHeapAllocAligned.constprop.30+0x18>
 80020d6:	e071      	b.n	80021bc <chHeapAllocAligned.constprop.30+0xfc>

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80020d8:	2210      	movs	r2, #16
 80020da:	4690      	mov	r8, r2
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80020dc:	464e      	mov	r6, r9
 80020de:	3607      	adds	r6, #7

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80020e0:	44d0      	add	r8, sl
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80020e2:	08f1      	lsrs	r1, r6, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80020e4:	4640      	mov	r0, r8
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80020e6:	9101      	str	r1, [sp, #4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80020e8:	f7ff f86a 	bl	80011c0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 80020ec:	4651      	mov	r1, sl

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80020ee:	2307      	movs	r3, #7

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 80020f0:	3108      	adds	r1, #8

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80020f2:	469b      	mov	fp, r3
  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 80020f4:	680b      	ldr	r3, [r1, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01a      	beq.n	8002130 <chHeapAllocAligned.constprop.30+0x70>

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80020fa:	1c18      	adds	r0, r3, #0
 80020fc:	300f      	adds	r0, #15
 80020fe:	1c06      	adds	r6, r0, #0

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002100:	6858      	ldr	r0, [r3, #4]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8002102:	465a      	mov	r2, fp
 8002104:	4396      	bics	r6, r2

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002106:	1c44      	adds	r4, r0, #1

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8002108:	1c32      	adds	r2, r6, #0

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800210a:	00e4      	lsls	r4, r4, #3

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800210c:	1c1d      	adds	r5, r3, #0
 800210e:	3a08      	subs	r2, #8

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002110:	191f      	adds	r7, r3, r4

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8002112:	3508      	adds	r5, #8

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8002114:	42ba      	cmp	r2, r7
 8002116:	d207      	bcs.n	8002128 <chHeapAllocAligned.constprop.30+0x68>
 8002118:	3c08      	subs	r4, #8
 800211a:	46a4      	mov	ip, r4
 800211c:	9f01      	ldr	r7, [sp, #4]
 800211e:	1a9c      	subs	r4, r3, r2
 8002120:	4464      	add	r4, ip
 8002122:	10e4      	asrs	r4, r4, #3
 8002124:	42a7      	cmp	r7, r4
 8002126:	d91e      	bls.n	8002166 <chHeapAllocAligned.constprop.30+0xa6>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8002128:	1c19      	adds	r1, r3, #0
  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800212a:	680b      	ldr	r3, [r1, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e4      	bne.n	80020fa <chHeapAllocAligned.constprop.30+0x3a>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8002130:	4640      	mov	r0, r8

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8002132:	4654      	mov	r4, sl
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8002134:	f7fe ffac 	bl	8001090 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8002138:	6825      	ldr	r5, [r4, #0]
 800213a:	2d00      	cmp	r5, #0
 800213c:	d045      	beq.n	80021ca <chHeapAllocAligned.constprop.30+0x10a>
    hp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT, align);
 800213e:	9f01      	ldr	r7, [sp, #4]
 8002140:	2108      	movs	r1, #8
 8002142:	3701      	adds	r7, #1
 8002144:	00f8      	lsls	r0, r7, #3
 8002146:	47a8      	blx	r5
    if (hp != NULL) {
 8002148:	2800      	cmp	r0, #0
 800214a:	d03e      	beq.n	80021ca <chHeapAllocAligned.constprop.30+0x10a>
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 800214c:	4649      	mov	r1, r9

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 800214e:	1c05      	adds	r5, r0, #0
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
    hp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT, align);
    if (hp != NULL) {
      H_HEAP(hp) = heapp;
 8002150:	6004      	str	r4, [r0, #0]
      H_SIZE(hp) = size;
 8002152:	6041      	str	r1, [r0, #4]

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 8002154:	3508      	adds	r5, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8002156:	1c28      	adds	r0, r5, #0
 8002158:	b003      	add	sp, #12
 800215a:	bc3c      	pop	{r2, r3, r4, r5}
 800215c:	4690      	mov	r8, r2
 800215e:	4699      	mov	r9, r3
 8002160:	46a2      	mov	sl, r4
 8002162:	46ab      	mov	fp, r5
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
      /* The block is large enough to contain a correctly aligned area
         of sufficient size.*/

      if (ahp > hp) {
 8002166:	429a      	cmp	r2, r3
 8002168:	d816      	bhi.n	8002198 <chHeapAllocAligned.constprop.30+0xd8>
        hp = ahp;
      }
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
 800216a:	9e01      	ldr	r6, [sp, #4]
 800216c:	4286      	cmp	r6, r0
 800216e:	d028      	beq.n	80021c2 <chHeapAllocAligned.constprop.30+0x102>
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 8002170:	9a01      	ldr	r2, [sp, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8002172:	681f      	ldr	r7, [r3, #0]
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 8002174:	3201      	adds	r2, #1
 8002176:	00d0      	lsls	r0, r2, #3
 8002178:	181c      	adds	r4, r3, r0
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800217a:	1b1e      	subs	r6, r3, r4
 800217c:	4466      	add	r6, ip
 800217e:	10f2      	asrs	r2, r6, #3
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
 8002180:	6027      	str	r7, [r4, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8002182:	6062      	str	r2, [r4, #4]
          H_NEXT(qp) = fp;
 8002184:	600c      	str	r4, [r1, #0]
 8002186:	1c1a      	adds	r2, r3, #0
        }
      }

      /* Setting in the block owner heap and size.*/
      H_SIZE(hp) = size;
 8002188:	464b      	mov	r3, r9
      H_HEAP(hp) = heapp;
 800218a:	4656      	mov	r6, sl
          H_NEXT(qp) = fp;
        }
      }

      /* Setting in the block owner heap and size.*/
      H_SIZE(hp) = size;
 800218c:	6053      	str	r3, [r2, #4]
      H_HEAP(hp) = heapp;
 800218e:	6016      	str	r6, [r2, #0]

      /* Releasing heap mutex/semaphore.*/
      H_UNLOCK(heapp);
 8002190:	4640      	mov	r0, r8
 8002192:	f7fe ff7d 	bl	8001090 <chMtxUnlock>
 8002196:	e7de      	b.n	8002156 <chHeapAllocAligned.constprop.30+0x96>
      if (ahp > hp) {
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8002198:	1b55      	subs	r5, r2, r5
 800219a:	10e9      	asrs	r1, r5, #3
 800219c:	6059      	str	r1, [r3, #4]
        if (bpages > pages) {
 800219e:	42a7      	cmp	r7, r4
 80021a0:	d20a      	bcs.n	80021b8 <chHeapAllocAligned.constprop.30+0xf8>
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 80021a2:	9f01      	ldr	r7, [sp, #4]
          H_PAGES(fp) = (bpages - pages) - 1U;
 80021a4:	9d01      	ldr	r5, [sp, #4]
        if (bpages > pages) {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 80021a6:	3701      	adds	r7, #1
 80021a8:	00f8      	lsls	r0, r7, #3
 80021aa:	1811      	adds	r1, r2, r0
          H_PAGES(fp) = (bpages - pages) - 1U;
 80021ac:	43ef      	mvns	r7, r5

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
 80021ae:	6818      	ldr	r0, [r3, #0]
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
          H_PAGES(fp) = (bpages - pages) - 1U;
 80021b0:	193c      	adds	r4, r7, r4

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
 80021b2:	6008      	str	r0, [r1, #0]
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
          H_PAGES(fp) = (bpages - pages) - 1U;
 80021b4:	604c      	str	r4, [r1, #4]

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
          H_NEXT(hp) = fp;
 80021b6:	6019      	str	r1, [r3, #0]
 80021b8:	1c35      	adds	r5, r6, #0
 80021ba:	e7e5      	b.n	8002188 <chHeapAllocAligned.constprop.30+0xc8>

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <chHeapAllocAligned.constprop.30+0x110>)
 80021be:	4682      	mov	sl, r0
 80021c0:	e78a      	b.n	80020d8 <chHeapAllocAligned.constprop.30+0x18>
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
          /* Exact size, getting the whole block.*/
          H_NEXT(qp) = H_NEXT(hp);
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	1c1a      	adds	r2, r3, #0
 80021c6:	6008      	str	r0, [r1, #0]
 80021c8:	e7de      	b.n	8002188 <chHeapAllocAligned.constprop.30+0xc8>
      return (void *)H_BLOCK(hp);
      /*lint -restore*/
    }
  }

  return NULL;
 80021ca:	2500      	movs	r5, #0
 80021cc:	e7c3      	b.n	8002156 <chHeapAllocAligned.constprop.30+0x96>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20001088 	.word	0x20001088
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46c0      	nop			; (mov r8, r8)

080021e0 <chHeapAlloc.9355>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80021e0:	b508      	push	{r3, lr}

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 80021e2:	f7ff ff6d 	bl	80020c0 <chHeapAllocAligned.constprop.30>
}
 80021e6:	bd08      	pop	{r3, pc}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46c0      	nop			; (mov r8, r8)

080021f0 <chThdCreateFromHeap.constprop.29.4277>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	1c04      	adds	r4, r0, #0
 80021f4:	b087      	sub	sp, #28
 80021f6:	1c0f      	adds	r7, r1, #0
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 80021f8:	4810      	ldr	r0, [pc, #64]	; (800223c <chThdCreateFromHeap.constprop.29.4277+0x4c>)
 80021fa:	1c21      	adds	r1, r4, #0
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 80021fc:	1c16      	adds	r6, r2, #0
 80021fe:	1c1d      	adds	r5, r3, #0
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8002200:	f7ff ff5e 	bl	80020c0 <chHeapAllocAligned.constprop.30>
  if (wsp == NULL) {
 8002204:	2800      	cmp	r0, #0
 8002206:	d016      	beq.n	8002236 <chThdCreateFromHeap.constprop.29.4277+0x46>
    return NULL;
  }

  thread_descriptor_t td = {
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <chThdCreateFromHeap.constprop.29.4277+0x50>)
 800220a:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 800220c:	1900      	adds	r0, r0, r4
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
  if (wsp == NULL) {
    return NULL;
  }

  thread_descriptor_t td = {
 800220e:	9700      	str	r7, [sp, #0]
 8002210:	9002      	str	r0, [sp, #8]
 8002212:	9603      	str	r6, [sp, #12]
 8002214:	9304      	str	r3, [sp, #16]
 8002216:	9505      	str	r5, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800221a:	4668      	mov	r0, sp
 800221c:	f7fe fcc8 	bl	8000bb0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8002220:	2201      	movs	r2, #1
 8002222:	2121      	movs	r1, #33	; 0x21
 8002224:	5442      	strb	r2, [r0, r1]
  chSchWakeupS(tp, MSG_OK);
 8002226:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8002228:	1c04      	adds	r4, r0, #0
  tp->flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 800222a:	f7fe fd99 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800222e:	b662      	cpsie	i
  chSysUnlock();

  return tp;
}
 8002230:	1c20      	adds	r0, r4, #0
 8002232:	b007      	add	sp, #28
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
  if (wsp == NULL) {
    return NULL;
 8002236:	2400      	movs	r4, #0
 8002238:	e7fa      	b.n	8002230 <chThdCreateFromHeap.constprop.29.4277+0x40>
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	200004b0 	.word	0x200004b0
 8002240:	08000701 	.word	0x08000701
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46c0      	nop			; (mov r8, r8)

08002250 <test_011_001_execute.9486>:

static void test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}

static void test_011_001_execute(void) {
 8002250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002252:	464f      	mov	r7, r9
 8002254:	4646      	mov	r6, r8
 8002256:	b4c0      	push	{r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002258:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <test_011_001_execute.9486+0x108>)
  {
    prio = chThdGetPriorityX();
  }

  /* [11.1.2] Getting heap info before the test.*/
  test_set_step(2);
 800225a:	4c40      	ldr	r4, [pc, #256]	; (800235c <test_011_001_execute.9486+0x10c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 800225c:	6998      	ldr	r0, [r3, #24]
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800225e:	4e40      	ldr	r6, [pc, #256]	; (8002360 <test_011_001_execute.9486+0x110>)

static void test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}

static void test_011_001_execute(void) {
 8002260:	b085      	sub	sp, #20
  {
    prio = chThdGetPriorityX();
  }

  /* [11.1.2] Getting heap info before the test.*/
  test_set_step(2);
 8002262:	2102      	movs	r1, #2
 8002264:	6887      	ldr	r7, [r0, #8]
 8002266:	6021      	str	r1, [r4, #0]
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8002268:	1c30      	adds	r0, r6, #0
 800226a:	4669      	mov	r1, sp
 800226c:	aa01      	add	r2, sp, #4
 800226e:	f7fe ffcf 	bl	8001210 <chHeapStatus>
 8002272:	1c05      	adds	r5, r0, #0
    test_assert(n1 == 1, "heap fragmented");
 8002274:	3801      	subs	r0, #1
 8002276:	4243      	negs	r3, r0
 8002278:	4158      	adcs	r0, r3
 800227a:	493a      	ldr	r1, [pc, #232]	; (8002364 <test_011_001_execute.9486+0x114>)
 800227c:	f7fe fbc0 	bl	8000a00 <_test_assert>
 8002280:	2800      	cmp	r0, #0
 8002282:	d004      	beq.n	800228e <test_011_001_execute.9486+0x3e>
    n2 = chHeapStatus(&heap1, &total2, &largest2);
    test_assert(n1 == n2, "fragmentation changed");
    test_assert(total1 == total2, "total free space changed");
    test_assert(largest1 == largest2, "largest fragment size changed");
  }
}
 8002284:	b005      	add	sp, #20
 8002286:	bc0c      	pop	{r2, r3}
 8002288:	4690      	mov	r8, r2
 800228a:	4699      	mov	r9, r3
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    n1 = chHeapStatus(&heap1, &total1, &largest1);
    test_assert(n1 == 1, "heap fragmented");
  }

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
 800228e:	2203      	movs	r2, #3
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 8002290:	23a4      	movs	r3, #164	; 0xa4
    n1 = chHeapStatus(&heap1, &total1, &largest1);
    test_assert(n1 == 1, "heap fragmented");
  }

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
 8002292:	6022      	str	r2, [r4, #0]
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 8002294:	0058      	lsls	r0, r3, #1
 8002296:	4934      	ldr	r1, [pc, #208]	; (8002368 <test_011_001_execute.9486+0x118>)
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <test_011_001_execute.9486+0x11c>)
 800229a:	1e7a      	subs	r2, r7, #1
 800229c:	f7ff ffa8 	bl	80021f0 <chThdCreateFromHeap.constprop.29.4277>
 80022a0:	4933      	ldr	r1, [pc, #204]	; (8002370 <test_011_001_execute.9486+0x120>)
 80022a2:	6008      	str	r0, [r1, #0]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn1",
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
 80022a4:	1e43      	subs	r3, r0, #1
 80022a6:	4198      	sbcs	r0, r3
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <test_011_001_execute.9486+0x124>)
  }

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 80022aa:	4688      	mov	r8, r1
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn1",
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
 80022ac:	1c19      	adds	r1, r3, #0
 80022ae:	4699      	mov	r9, r3
 80022b0:	f7fe fba6 	bl	8000a00 <_test_assert>
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d1e5      	bne.n	8002284 <test_011_001_execute.9486+0x34>
  }

  /* [11.1.4] Creating thread 2, it is expected to succeed.*/
  test_set_step(4);
 80022b8:	2004      	movs	r0, #4
  {
    threads[1] = chThdCreateFromHeap(&heap1,
 80022ba:	21a4      	movs	r1, #164	; 0xa4
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
  }

  /* [11.1.4] Creating thread 2, it is expected to succeed.*/
  test_set_step(4);
 80022bc:	6020      	str	r0, [r4, #0]
  {
    threads[1] = chThdCreateFromHeap(&heap1,
 80022be:	1eba      	subs	r2, r7, #2
 80022c0:	0048      	lsls	r0, r1, #1
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <test_011_001_execute.9486+0x128>)
 80022c4:	492d      	ldr	r1, [pc, #180]	; (800237c <test_011_001_execute.9486+0x12c>)
 80022c6:	f7ff ff93 	bl	80021f0 <chThdCreateFromHeap.constprop.29.4277>
 80022ca:	4642      	mov	r2, r8
 80022cc:	6050      	str	r0, [r2, #4]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn2",
                                     prio-2, dyn_thread1, "B");
    test_assert(threads[1] != NULL, "thread creation failed");
 80022ce:	4649      	mov	r1, r9
 80022d0:	1e43      	subs	r3, r0, #1
 80022d2:	4198      	sbcs	r0, r3
 80022d4:	f7fe fb94 	bl	8000a00 <_test_assert>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1d3      	bne.n	8002284 <test_011_001_execute.9486+0x34>
  }

  /* [11.1.5] Creating thread 3, it is expected to fail.*/
  test_set_step(5);
 80022dc:	2305      	movs	r3, #5
 80022de:	6023      	str	r3, [r4, #0]
  {
    threads[2] = chThdCreateFromHeap(&heap1,
 80022e0:	1efa      	subs	r2, r7, #3
 80022e2:	4927      	ldr	r1, [pc, #156]	; (8002380 <test_011_001_execute.9486+0x130>)
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <test_011_001_execute.9486+0x134>)
 80022e6:	4828      	ldr	r0, [pc, #160]	; (8002388 <test_011_001_execute.9486+0x138>)
 80022e8:	f7ff ff82 	bl	80021f0 <chThdCreateFromHeap.constprop.29.4277>
 80022ec:	4647      	mov	r7, r8
 80022ee:	60b8      	str	r0, [r7, #8]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE * 1024),
                                     "dyn3",
                                     prio-3, dyn_thread1, "C");
    test_assert(threads[2] == NULL, "thread creation not failed");
 80022f0:	4926      	ldr	r1, [pc, #152]	; (800238c <test_011_001_execute.9486+0x13c>)
 80022f2:	4243      	negs	r3, r0
 80022f4:	4158      	adcs	r0, r3
 80022f6:	f7fe fb83 	bl	8000a00 <_test_assert>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d1c2      	bne.n	8002284 <test_011_001_execute.9486+0x34>
  }

  /* [11.1.6] Letting threads execute then checking the start order and
     freeing memory.*/
  test_set_step(6);
 80022fe:	2006      	movs	r0, #6
 8002300:	6020      	str	r0, [r4, #0]
  {
    test_wait_threads();
 8002302:	f7ff f845 	bl	8001390 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8002306:	4822      	ldr	r0, [pc, #136]	; (8002390 <test_011_001_execute.9486+0x140>)
 8002308:	4922      	ldr	r1, [pc, #136]	; (8002394 <test_011_001_execute.9486+0x144>)
 800230a:	f7fe fb29 	bl	8000960 <_test_assert_sequence>
 800230e:	2800      	cmp	r0, #0
 8002310:	d1b8      	bne.n	8002284 <test_011_001_execute.9486+0x34>
  }

  /* [11.1.7] Getting heap info again for verification.*/
  test_set_step(7);
 8002312:	2107      	movs	r1, #7
 8002314:	6021      	str	r1, [r4, #0]
  {
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8002316:	1c30      	adds	r0, r6, #0
 8002318:	a902      	add	r1, sp, #8
 800231a:	aa03      	add	r2, sp, #12
 800231c:	f7fe ff78 	bl	8001210 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8002320:	1a28      	subs	r0, r5, r0
 8002322:	4245      	negs	r5, r0
 8002324:	4168      	adcs	r0, r5
 8002326:	491c      	ldr	r1, [pc, #112]	; (8002398 <test_011_001_execute.9486+0x148>)
 8002328:	f7fe fb6a 	bl	8000a00 <_test_assert>
 800232c:	2800      	cmp	r0, #0
 800232e:	d1a9      	bne.n	8002284 <test_011_001_execute.9486+0x34>
    test_assert(total1 == total2, "total free space changed");
 8002330:	9c00      	ldr	r4, [sp, #0]
 8002332:	9e02      	ldr	r6, [sp, #8]
 8002334:	4919      	ldr	r1, [pc, #100]	; (800239c <test_011_001_execute.9486+0x14c>)
 8002336:	1ba0      	subs	r0, r4, r6
 8002338:	4243      	negs	r3, r0
 800233a:	4158      	adcs	r0, r3
 800233c:	f7fe fb60 	bl	8000a00 <_test_assert>
 8002340:	2800      	cmp	r0, #0
 8002342:	d19f      	bne.n	8002284 <test_011_001_execute.9486+0x34>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8002344:	9d01      	ldr	r5, [sp, #4]
 8002346:	9a03      	ldr	r2, [sp, #12]
 8002348:	4915      	ldr	r1, [pc, #84]	; (80023a0 <test_011_001_execute.9486+0x150>)
 800234a:	1aa8      	subs	r0, r5, r2
 800234c:	4243      	negs	r3, r0
 800234e:	4158      	adcs	r0, r3
 8002350:	f7fe fb56 	bl	8000a00 <_test_assert>
 8002354:	e796      	b.n	8002284 <test_011_001_execute.9486+0x34>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	20000ff8 	.word	0x20000ff8
 800235c:	2000106c 	.word	0x2000106c
 8002360:	200004b0 	.word	0x200004b0
 8002364:	080062a0 	.word	0x080062a0
 8002368:	080062b0 	.word	0x080062b0
 800236c:	08006248 	.word	0x08006248
 8002370:	20000bd0 	.word	0x20000bd0
 8002374:	080062b8 	.word	0x080062b8
 8002378:	08006244 	.word	0x08006244
 800237c:	080062d0 	.word	0x080062d0
 8002380:	080062d8 	.word	0x080062d8
 8002384:	08006240 	.word	0x08006240
 8002388:	000200c8 	.word	0x000200c8
 800238c:	080062e0 	.word	0x080062e0
 8002390:	080062fc 	.word	0x080062fc
 8002394:	08006220 	.word	0x08006220
 8002398:	08006300 	.word	0x08006300
 800239c:	08006318 	.word	0x08006318
 80023a0:	08006334 	.word	0x08006334
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46c0      	nop			; (mov r8, r8)

080023b0 <chThdCreateFromMemoryPool.constprop.28>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80023b2:	4d12      	ldr	r5, [pc, #72]	; (80023fc <chThdCreateFromMemoryPool.constprop.28+0x4c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80023b4:	b087      	sub	sp, #28
 80023b6:	1c07      	adds	r7, r0, #0
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80023b8:	1c28      	adds	r0, r5, #0
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80023ba:	1c0e      	adds	r6, r1, #0
 80023bc:	1c14      	adds	r4, r2, #0
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80023be:	f7fe fbbf 	bl	8000b40 <chPoolAlloc>
  if (wsp == NULL) {
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d018      	beq.n	80023f8 <chThdCreateFromMemoryPool.constprop.28+0x48>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80023c6:	686b      	ldr	r3, [r5, #4]
  wsp = chPoolAlloc(mp);
  if (wsp == NULL) {
    return NULL;
  }

  thread_descriptor_t td = {
 80023c8:	490d      	ldr	r1, [pc, #52]	; (8002400 <chThdCreateFromMemoryPool.constprop.28+0x50>)
 80023ca:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80023cc:	18c0      	adds	r0, r0, r3
  wsp = chPoolAlloc(mp);
  if (wsp == NULL) {
    return NULL;
  }

  thread_descriptor_t td = {
 80023ce:	9700      	str	r7, [sp, #0]
 80023d0:	9002      	str	r0, [sp, #8]
 80023d2:	9603      	str	r6, [sp, #12]
 80023d4:	9104      	str	r1, [sp, #16]
 80023d6:	9405      	str	r4, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d8:	b672      	cpsid	i
                  CH_DBG_STACK_FILL_VALUE);
#endif


  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80023da:	4668      	mov	r0, sp
 80023dc:	f7fe fbe8 	bl	8000bb0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 80023e0:	2721      	movs	r7, #33	; 0x21
 80023e2:	2202      	movs	r2, #2
 80023e4:	55c2      	strb	r2, [r0, r7]
  tp->mpool = mp;
 80023e6:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 80023e8:	2100      	movs	r1, #0
                  CH_DBG_STACK_FILL_VALUE);
#endif


  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80023ea:	1c06      	adds	r6, r0, #0
  tp->flags = CH_FLAG_MODE_MPOOL;
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 80023ec:	f7fe fcb8 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023f0:	b662      	cpsie	i
  chSysUnlock();

  return tp;
}
 80023f2:	1c30      	adds	r0, r6, #0
 80023f4:	b007      	add	sp, #28
 80023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
  if (wsp == NULL) {
    return NULL;
 80023f8:	2600      	movs	r6, #0
 80023fa:	e7fa      	b.n	80023f2 <chThdCreateFromMemoryPool.constprop.28+0x42>
 80023fc:	20000be4 	.word	0x20000be4
 8002400:	08000701 	.word	0x08000701
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46c0      	nop			; (mov r8, r8)

08002410 <test_004_003_execute.8399>:

static void test_004_003_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_004_003_execute(void) {
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	4646      	mov	r6, r8
 8002414:	464f      	mov	r7, r9
 8002416:	b4c0      	push	{r6, r7}
  unsigned i;
  systime_t target_time;
  msg_t msg;

  /* [4.3.1] Testing special case TIME_IMMEDIATE.*/
  test_set_step(1);
 8002418:	4e94      	ldr	r6, [pc, #592]	; (800266c <test_004_003_execute.8399+0x25c>)
 800241a:	2301      	movs	r3, #1
 800241c:	6033      	str	r3, [r6, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241e:	b672      	cpsid	i
  {
    msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8002420:	4c93      	ldr	r4, [pc, #588]	; (8002670 <test_004_003_execute.8399+0x260>)
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8002422:	2100      	movs	r1, #0
 8002424:	1c20      	adds	r0, r4, #0
 8002426:	f001 fb5b 	bl	8003ae0 <chSemWaitTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800242a:	b662      	cpsie	i
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800242c:	4d91      	ldr	r5, [pc, #580]	; (8002674 <test_004_003_execute.8399+0x264>)
 800242e:	3001      	adds	r0, #1
 8002430:	4243      	negs	r3, r0
 8002432:	4158      	adcs	r0, r3
 8002434:	1c29      	adds	r1, r5, #0
 8002436:	f7fe fae3 	bl	8000a00 <_test_assert>
 800243a:	2800      	cmp	r0, #0
 800243c:	d003      	beq.n	8002446 <test_004_003_execute.8399+0x36>
    }
    test_assert_sequence("ABCDE", "invalid sequence");
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
                            "out of time window");
  }
}
 800243e:	bc0c      	pop	{r2, r3}
 8002440:	4690      	mov	r8, r2
 8002442:	4699      	mov	r9, r3
 8002444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002446:	6822      	ldr	r2, [r4, #0]
  /* [4.3.1] Testing special case TIME_IMMEDIATE.*/
  test_set_step(1);
  {
    msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8002448:	4f8b      	ldr	r7, [pc, #556]	; (8002678 <test_004_003_execute.8399+0x268>)
 800244a:	1b10      	subs	r0, r2, r4
 800244c:	4243      	negs	r3, r0
 800244e:	4158      	adcs	r0, r3
 8002450:	1c39      	adds	r1, r7, #0
 8002452:	f7fe fad5 	bl	8000a00 <_test_assert>
 8002456:	2800      	cmp	r0, #0
 8002458:	d1f1      	bne.n	800243e <test_004_003_execute.8399+0x2e>
    test_assert(sem1.cnt == 0, "counter not zero");
 800245a:	68a1      	ldr	r1, [r4, #8]
 800245c:	4248      	negs	r0, r1
 800245e:	4148      	adcs	r0, r1
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <test_004_003_execute.8399+0x26c>)
 8002462:	1c19      	adds	r1, r3, #0
 8002464:	4698      	mov	r8, r3
 8002466:	f7fe facb 	bl	8000a00 <_test_assert>
 800246a:	2800      	cmp	r0, #0
 800246c:	d1e7      	bne.n	800243e <test_004_003_execute.8399+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 800246e:	4a84      	ldr	r2, [pc, #528]	; (8002680 <test_004_003_execute.8399+0x270>)
  }

  /* [4.3.2] Testing non-timeout condition.*/
  test_set_step(2);
 8002470:	2002      	movs	r0, #2
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002472:	6991      	ldr	r1, [r2, #24]
 8002474:	6030      	str	r0, [r6, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002476:	6889      	ldr	r1, [r1, #8]
 8002478:	4a82      	ldr	r2, [pc, #520]	; (8002684 <test_004_003_execute.8399+0x274>)
 800247a:	3901      	subs	r1, #1
 800247c:	2300      	movs	r3, #0
 800247e:	4882      	ldr	r0, [pc, #520]	; (8002688 <test_004_003_execute.8399+0x278>)
 8002480:	f7ff f98e 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002484:	4b81      	ldr	r3, [pc, #516]	; (800268c <test_004_003_execute.8399+0x27c>)
 8002486:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
 800248a:	4981      	ldr	r1, [pc, #516]	; (8002690 <test_004_003_execute.8399+0x280>)
 800248c:	1c20      	adds	r0, r4, #0
 800248e:	f001 fb27 	bl	8003ae0 <chSemWaitTimeoutS>
 8002492:	4681      	mov	r9, r0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002494:	b662      	cpsie	i
                                   thread2, 0);
    msg = chSemWaitTimeout(&sem1, MS2ST(500));
    test_wait_threads();
 8002496:	f7fe ff7b 	bl	8001390 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800249a:	464a      	mov	r2, r9
 800249c:	4250      	negs	r0, r2
 800249e:	4150      	adcs	r0, r2
 80024a0:	1c29      	adds	r1, r5, #0
 80024a2:	f7fe faad 	bl	8000a00 <_test_assert>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	d1c9      	bne.n	800243e <test_004_003_execute.8399+0x2e>
 80024aa:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80024ac:	1c39      	adds	r1, r7, #0
 80024ae:	1b00      	subs	r0, r0, r4
 80024b0:	4243      	negs	r3, r0
 80024b2:	4158      	adcs	r0, r3
 80024b4:	f7fe faa4 	bl	8000a00 <_test_assert>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d1c0      	bne.n	800243e <test_004_003_execute.8399+0x2e>
    test_assert(sem1.cnt == 0, "counter not zero");
 80024bc:	68a1      	ldr	r1, [r4, #8]
 80024be:	4248      	negs	r0, r1
 80024c0:	4148      	adcs	r0, r1
 80024c2:	4641      	mov	r1, r8
 80024c4:	f7fe fa9c 	bl	8000a00 <_test_assert>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d1b8      	bne.n	800243e <test_004_003_execute.8399+0x2e>
  }

  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
 80024cc:	2303      	movs	r3, #3
 80024ce:	6033      	str	r3, [r6, #0]
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
 80024d0:	f002 ffbe 	bl	8005450 <test_wait_tick>
 80024d4:	1c06      	adds	r6, r0, #0
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
 80024d6:	2041      	movs	r0, #65	; 0x41
 80024d8:	f7fe f902 	bl	80006e0 <test_emit_token>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
 80024de:	22fa      	movs	r2, #250	; 0xfa
 80024e0:	1c20      	adds	r0, r4, #0
 80024e2:	0051      	lsls	r1, r2, #1
 80024e4:	f001 fafc 	bl	8003ae0 <chSemWaitTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80024e8:	b662      	cpsie	i
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80024ea:	3001      	adds	r0, #1
 80024ec:	4243      	negs	r3, r0
 80024ee:	4158      	adcs	r0, r3
 80024f0:	1c29      	adds	r1, r5, #0
 80024f2:	f7fe fa85 	bl	8000a00 <_test_assert>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d1a1      	bne.n	800243e <test_004_003_execute.8399+0x2e>
 80024fa:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80024fc:	1c39      	adds	r1, r7, #0
 80024fe:	1b00      	subs	r0, r0, r4
 8002500:	4243      	negs	r3, r0
 8002502:	4158      	adcs	r0, r3
 8002504:	f7fe fa7c 	bl	8000a00 <_test_assert>
 8002508:	2800      	cmp	r0, #0
 800250a:	d198      	bne.n	800243e <test_004_003_execute.8399+0x2e>
      test_assert(sem1.cnt == 0, "counter not zero");
 800250c:	68a1      	ldr	r1, [r4, #8]
 800250e:	4248      	negs	r0, r1
 8002510:	4148      	adcs	r0, r1
 8002512:	4641      	mov	r1, r8
 8002514:	f7fe fa74 	bl	8000a00 <_test_assert>
 8002518:	2800      	cmp	r0, #0
 800251a:	d000      	beq.n	800251e <test_004_003_execute.8399+0x10e>
 800251c:	e78f      	b.n	800243e <test_004_003_execute.8399+0x2e>
  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
 800251e:	2042      	movs	r0, #66	; 0x42
 8002520:	f7fe f8de 	bl	80006e0 <test_emit_token>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
 8002526:	23fa      	movs	r3, #250	; 0xfa
 8002528:	1c20      	adds	r0, r4, #0
 800252a:	0059      	lsls	r1, r3, #1
 800252c:	f001 fad8 	bl	8003ae0 <chSemWaitTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002530:	b662      	cpsie	i
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8002532:	3001      	adds	r0, #1
 8002534:	4243      	negs	r3, r0
 8002536:	4158      	adcs	r0, r3
 8002538:	1c29      	adds	r1, r5, #0
 800253a:	f7fe fa61 	bl	8000a00 <_test_assert>
 800253e:	2800      	cmp	r0, #0
 8002540:	d000      	beq.n	8002544 <test_004_003_execute.8399+0x134>
 8002542:	e77c      	b.n	800243e <test_004_003_execute.8399+0x2e>
 8002544:	6822      	ldr	r2, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8002546:	1c39      	adds	r1, r7, #0
 8002548:	1b10      	subs	r0, r2, r4
 800254a:	4243      	negs	r3, r0
 800254c:	4158      	adcs	r0, r3
 800254e:	f7fe fa57 	bl	8000a00 <_test_assert>
 8002552:	2800      	cmp	r0, #0
 8002554:	d000      	beq.n	8002558 <test_004_003_execute.8399+0x148>
 8002556:	e772      	b.n	800243e <test_004_003_execute.8399+0x2e>
      test_assert(sem1.cnt == 0, "counter not zero");
 8002558:	68a1      	ldr	r1, [r4, #8]
 800255a:	4248      	negs	r0, r1
 800255c:	4148      	adcs	r0, r1
 800255e:	4641      	mov	r1, r8
 8002560:	f7fe fa4e 	bl	8000a00 <_test_assert>
 8002564:	2800      	cmp	r0, #0
 8002566:	d000      	beq.n	800256a <test_004_003_execute.8399+0x15a>
 8002568:	e769      	b.n	800243e <test_004_003_execute.8399+0x2e>
  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
 800256a:	2043      	movs	r0, #67	; 0x43
 800256c:	f7fe f8b8 	bl	80006e0 <test_emit_token>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002570:	b672      	cpsid	i
 8002572:	23fa      	movs	r3, #250	; 0xfa
 8002574:	1c20      	adds	r0, r4, #0
 8002576:	0059      	lsls	r1, r3, #1
 8002578:	f001 fab2 	bl	8003ae0 <chSemWaitTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800257c:	b662      	cpsie	i
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800257e:	3001      	adds	r0, #1
 8002580:	4243      	negs	r3, r0
 8002582:	4158      	adcs	r0, r3
 8002584:	1c29      	adds	r1, r5, #0
 8002586:	f7fe fa3b 	bl	8000a00 <_test_assert>
 800258a:	2800      	cmp	r0, #0
 800258c:	d000      	beq.n	8002590 <test_004_003_execute.8399+0x180>
 800258e:	e756      	b.n	800243e <test_004_003_execute.8399+0x2e>
 8002590:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8002592:	1c39      	adds	r1, r7, #0
 8002594:	1b00      	subs	r0, r0, r4
 8002596:	4243      	negs	r3, r0
 8002598:	4158      	adcs	r0, r3
 800259a:	f7fe fa31 	bl	8000a00 <_test_assert>
 800259e:	2800      	cmp	r0, #0
 80025a0:	d000      	beq.n	80025a4 <test_004_003_execute.8399+0x194>
 80025a2:	e74c      	b.n	800243e <test_004_003_execute.8399+0x2e>
      test_assert(sem1.cnt == 0, "counter not zero");
 80025a4:	68a2      	ldr	r2, [r4, #8]
 80025a6:	4641      	mov	r1, r8
 80025a8:	4250      	negs	r0, r2
 80025aa:	4150      	adcs	r0, r2
 80025ac:	f7fe fa28 	bl	8000a00 <_test_assert>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d000      	beq.n	80025b6 <test_004_003_execute.8399+0x1a6>
 80025b4:	e743      	b.n	800243e <test_004_003_execute.8399+0x2e>
  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
 80025b6:	2044      	movs	r0, #68	; 0x44
 80025b8:	f7fe f892 	bl	80006e0 <test_emit_token>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025bc:	b672      	cpsid	i
 80025be:	21fa      	movs	r1, #250	; 0xfa
 80025c0:	1c20      	adds	r0, r4, #0
 80025c2:	0049      	lsls	r1, r1, #1
 80025c4:	f001 fa8c 	bl	8003ae0 <chSemWaitTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80025c8:	b662      	cpsie	i
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80025ca:	3001      	adds	r0, #1
 80025cc:	4243      	negs	r3, r0
 80025ce:	4158      	adcs	r0, r3
 80025d0:	1c29      	adds	r1, r5, #0
 80025d2:	f7fe fa15 	bl	8000a00 <_test_assert>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d000      	beq.n	80025dc <test_004_003_execute.8399+0x1cc>
 80025da:	e730      	b.n	800243e <test_004_003_execute.8399+0x2e>
 80025dc:	6823      	ldr	r3, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80025de:	1c39      	adds	r1, r7, #0
 80025e0:	1b18      	subs	r0, r3, r4
 80025e2:	4243      	negs	r3, r0
 80025e4:	4158      	adcs	r0, r3
 80025e6:	f7fe fa0b 	bl	8000a00 <_test_assert>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d000      	beq.n	80025f0 <test_004_003_execute.8399+0x1e0>
 80025ee:	e726      	b.n	800243e <test_004_003_execute.8399+0x2e>
      test_assert(sem1.cnt == 0, "counter not zero");
 80025f0:	68a2      	ldr	r2, [r4, #8]
 80025f2:	4641      	mov	r1, r8
 80025f4:	4250      	negs	r0, r2
 80025f6:	4150      	adcs	r0, r2
 80025f8:	f7fe fa02 	bl	8000a00 <_test_assert>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d000      	beq.n	8002602 <test_004_003_execute.8399+0x1f2>
 8002600:	e71d      	b.n	800243e <test_004_003_execute.8399+0x2e>
  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
    for (i = 0; i < 5; i++) {
      test_emit_token('A' + i);
 8002602:	2045      	movs	r0, #69	; 0x45
 8002604:	f7fe f86c 	bl	80006e0 <test_emit_token>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
 800260a:	21fa      	movs	r1, #250	; 0xfa
 800260c:	1c20      	adds	r0, r4, #0
 800260e:	0049      	lsls	r1, r1, #1
 8002610:	f001 fa66 	bl	8003ae0 <chSemWaitTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002614:	b662      	cpsie	i
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8002616:	3001      	adds	r0, #1
 8002618:	4243      	negs	r3, r0
 800261a:	4158      	adcs	r0, r3
 800261c:	1c29      	adds	r1, r5, #0
 800261e:	f7fe f9ef 	bl	8000a00 <_test_assert>
 8002622:	2800      	cmp	r0, #0
 8002624:	d000      	beq.n	8002628 <test_004_003_execute.8399+0x218>
 8002626:	e70a      	b.n	800243e <test_004_003_execute.8399+0x2e>
 8002628:	6825      	ldr	r5, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800262a:	1c39      	adds	r1, r7, #0
 800262c:	1b28      	subs	r0, r5, r4
 800262e:	4243      	negs	r3, r0
 8002630:	4158      	adcs	r0, r3
 8002632:	f7fe f9e5 	bl	8000a00 <_test_assert>
 8002636:	2800      	cmp	r0, #0
 8002638:	d000      	beq.n	800263c <test_004_003_execute.8399+0x22c>
 800263a:	e700      	b.n	800243e <test_004_003_execute.8399+0x2e>
      test_assert(sem1.cnt == 0, "counter not zero");
 800263c:	68a0      	ldr	r0, [r4, #8]
 800263e:	4641      	mov	r1, r8
 8002640:	4243      	negs	r3, r0
 8002642:	4158      	adcs	r0, r3
 8002644:	f7fe f9dc 	bl	8000a00 <_test_assert>
 8002648:	2800      	cmp	r0, #0
 800264a:	d000      	beq.n	800264e <test_004_003_execute.8399+0x23e>
 800264c:	e6f7      	b.n	800243e <test_004_003_execute.8399+0x2e>
    }
    test_assert_sequence("ABCDE", "invalid sequence");
 800264e:	4811      	ldr	r0, [pc, #68]	; (8002694 <test_004_003_execute.8399+0x284>)
 8002650:	4911      	ldr	r1, [pc, #68]	; (8002698 <test_004_003_execute.8399+0x288>)
 8002652:	f7fe f985 	bl	8000960 <_test_assert_sequence>
 8002656:	2800      	cmp	r0, #0
 8002658:	d000      	beq.n	800265c <test_004_003_execute.8399+0x24c>
 800265a:	e6f0      	b.n	800243e <test_004_003_execute.8399+0x2e>
  }

  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
 800265c:	4c0f      	ldr	r4, [pc, #60]	; (800269c <test_004_003_execute.8399+0x28c>)
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
      test_assert(sem1.cnt == 0, "counter not zero");
    }
    test_assert_sequence("ABCDE", "invalid sequence");
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 800265e:	4f10      	ldr	r7, [pc, #64]	; (80026a0 <test_004_003_execute.8399+0x290>)
  }

  /* [4.3.3] Testing timeout condition.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(5 * 50);
 8002660:	1930      	adds	r0, r6, r4
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
      test_assert(sem1.cnt == 0, "counter not zero");
    }
    test_assert_sequence("ABCDE", "invalid sequence");
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002662:	19f1      	adds	r1, r6, r7
 8002664:	f7fd ffe4 	bl	8000630 <_test_assert_time_window.constprop.5>
 8002668:	e6e9      	b.n	800243e <test_004_003_execute.8399+0x2e>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	2000106c 	.word	0x2000106c
 8002670:	20000508 	.word	0x20000508
 8002674:	08006360 	.word	0x08006360
 8002678:	0800627c 	.word	0x0800627c
 800267c:	0800628c 	.word	0x0800628c
 8002680:	20000ff8 	.word	0x20000ff8
 8002684:	08005801 	.word	0x08005801
 8002688:	20000558 	.word	0x20000558
 800268c:	20000bd0 	.word	0x20000bd0
 8002690:	00001388 	.word	0x00001388
 8002694:	08006264 	.word	0x08006264
 8002698:	08006220 	.word	0x08006220
 800269c:	000009c4 	.word	0x000009c4
 80026a0:	000009d8 	.word	0x000009d8
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46c0      	nop			; (mov r8, r8)

080026b0 <test_001_002_execute.7885>:
 * - [1.2.4] Testing chSysUnconditionalUnlock().
 * - [1.2.5] Testing from ISR context using a virtual timer.
 * .
 */

static void test_001_002_execute(void) {
 80026b0:	b530      	push	{r4, r5, lr}
  syssts_t sts;
  virtual_timer_t vt;

  /* [1.2.1] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), non reentrant case.*/
  test_set_step(1);
 80026b2:	4c26      	ldr	r4, [pc, #152]	; (800274c <test_001_002_execute.7885+0x9c>)
 80026b4:	2501      	movs	r5, #1
 * - [1.2.4] Testing chSysUnconditionalUnlock().
 * - [1.2.5] Testing from ISR context using a virtual timer.
 * .
 */

static void test_001_002_execute(void) {
 80026b6:	b087      	sub	sp, #28
  syssts_t sts;
  virtual_timer_t vt;

  /* [1.2.1] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), non reentrant case.*/
  test_set_step(1);
 80026b8:	6025      	str	r5, [r4, #0]
  {
    sts = chSysGetStatusAndLockX();
 80026ba:	f7fe ff79 	bl	80015b0 <chSysGetStatusAndLockX>
 80026be:	4205      	tst	r5, r0
 80026c0:	d101      	bne.n	80026c6 <test_001_002_execute.7885+0x16>
 80026c2:	f7fe fb3d 	bl	8000d40 <chSysRestoreStatusX.part.2.4284>
    chSysRestoreStatusX(sts);
  }

  /* [1.2.2] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), reentrant case.*/
  test_set_step(2);
 80026c6:	2302      	movs	r3, #2
 80026c8:	6023      	str	r3, [r4, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ca:	b672      	cpsid	i
  {
    chSysLock();
    sts = chSysGetStatusAndLockX();
 80026cc:	f7fe ff70 	bl	80015b0 <chSysGetStatusAndLockX>
 80026d0:	07c2      	lsls	r2, r0, #31
 80026d2:	d401      	bmi.n	80026d8 <test_001_002_execute.7885+0x28>
 80026d4:	f7fe fb34 	bl	8000d40 <chSysRestoreStatusX.part.2.4284>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026d8:	b662      	cpsie	i
    chSysRestoreStatusX(sts);
    chSysUnlock();
  }

  /* [1.2.3] Testing chSysUnconditionalLock().*/
  test_set_step(3);
 80026da:	2003      	movs	r0, #3
 80026dc:	6020      	str	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026de:	f3ef 8110 	mrs	r1, PRIMASK
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 80026e2:	07ca      	lsls	r2, r1, #31
 80026e4:	d400      	bmi.n	80026e8 <test_001_002_execute.7885+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e6:	b672      	cpsid	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026e8:	f3ef 8210 	mrs	r2, PRIMASK
 80026ec:	07d2      	lsls	r2, r2, #31
 80026ee:	d400      	bmi.n	80026f2 <test_001_002_execute.7885+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f0:	b672      	cpsid	i
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026f2:	b662      	cpsie	i
    chSysUnconditionalLock();
    chSysUnlock();
  }

  /* [1.2.4] Testing chSysUnconditionalUnlock().*/
  test_set_step(4);
 80026f4:	2504      	movs	r5, #4
 80026f6:	6025      	str	r5, [r4, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f8:	b672      	cpsid	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 80026fe:	07da      	lsls	r2, r3, #31
 8002700:	d500      	bpl.n	8002704 <test_001_002_execute.7885+0x54>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002702:	b662      	cpsie	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002704:	f3ef 8010 	mrs	r0, PRIMASK
 8002708:	07c2      	lsls	r2, r0, #31
 800270a:	d500      	bpl.n	800270e <test_001_002_execute.7885+0x5e>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800270c:	b662      	cpsie	i
    chSysUnconditionalUnlock();
    chSysUnconditionalUnlock();
  }

  /* [1.2.5] Testing from ISR context using a virtual timer.*/
  test_set_step(5);
 800270e:	2105      	movs	r1, #5
 8002710:	6021      	str	r1, [r4, #0]
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 8002712:	2400      	movs	r4, #0
 8002714:	9404      	str	r4, [sp, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002716:	b672      	cpsid	i
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8002718:	9a04      	ldr	r2, [sp, #16]
 800271a:	2a00      	cmp	r2, #0
 800271c:	d002      	beq.n	8002724 <test_001_002_execute.7885+0x74>
    chVTDoResetI(vtp);
 800271e:	a801      	add	r0, sp, #4
 8002720:	f000 ffa6 	bl	8003670 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8002724:	a801      	add	r0, sp, #4
 8002726:	2101      	movs	r1, #1
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <test_001_002_execute.7885+0xa0>)
 800272a:	2300      	movs	r3, #0
 800272c:	f000 ffd8 	bl	80036e0 <chVTDoSetI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002730:	b662      	cpsie	i
  {
    chVTObjectInit(&vt);
    chVTSet(&vt, 1, vtcb, NULL);
    chThdSleep(10);
 8002732:	200a      	movs	r0, #10
 8002734:	f002 fe84 	bl	8005440 <chThdSleep>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002738:	b672      	cpsid	i
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->func != NULL);
 800273a:	9804      	ldr	r0, [sp, #16]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800273c:	b662      	cpsie	i

    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 800273e:	4905      	ldr	r1, [pc, #20]	; (8002754 <test_001_002_execute.7885+0xa4>)
 8002740:	4243      	negs	r3, r0
 8002742:	4158      	adcs	r0, r3
 8002744:	f7fe f95c 	bl	8000a00 <_test_assert>
  }
}
 8002748:	b007      	add	sp, #28
 800274a:	bd30      	pop	{r4, r5, pc}
 800274c:	2000106c 	.word	0x2000106c
 8002750:	080015c1 	.word	0x080015c1
 8002754:	08006378 	.word	0x08006378
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46c0      	nop			; (mov r8, r8)

08002760 <test_007_001_execute.8902>:
 * - [7.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void test_007_001_execute(void) {
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	4c27      	ldr	r4, [pc, #156]	; (8002800 <test_007_001_execute.8902+0xa0>)
    chEvtObjectInit(&es1);
  }

  /* [7.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8002764:	4e27      	ldr	r6, [pc, #156]	; (8002804 <test_007_001_execute.8902+0xa4>)
 8002766:	2102      	movs	r1, #2
 * - [7.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void test_007_001_execute(void) {
 8002768:	b08b      	sub	sp, #44	; 0x2c
 800276a:	6024      	str	r4, [r4, #0]
    chEvtObjectInit(&es1);
  }

  /* [7.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 800276c:	6031      	str	r1, [r6, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800276e:	b672      	cpsid	i
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8002770:	6820      	ldr	r0, [r4, #0]
  esp->next     = elp;
 8002772:	ab00      	add	r3, sp, #0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8002774:	9000      	str	r0, [sp, #0]
  esp->next     = elp;
  elp->listener = currp;
 8002776:	4824      	ldr	r0, [pc, #144]	; (8002808 <test_007_001_execute.8902+0xa8>)
  elp->events   = events;
 8002778:	2501      	movs	r5, #1
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 800277a:	6987      	ldr	r7, [r0, #24]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
 800277c:	6023      	str	r3, [r4, #0]
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 800277e:	2200      	movs	r2, #0
  elp->wflags   = wflags;
 8002780:	426b      	negs	r3, r5
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8002782:	9701      	str	r7, [sp, #4]
  elp->events   = events;
 8002784:	9502      	str	r5, [sp, #8]
  elp->flags    = (eventflags_t)0;
 8002786:	9203      	str	r2, [sp, #12]
  elp->wflags   = wflags;
 8002788:	9304      	str	r3, [sp, #16]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800278a:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 800278e:	6827      	ldr	r7, [r4, #0]
  esp->next     = elp;
  elp->listener = currp;
 8002790:	6980      	ldr	r0, [r0, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8002792:	ad05      	add	r5, sp, #20
 8002794:	9705      	str	r7, [sp, #20]
  esp->next     = elp;
 8002796:	6025      	str	r5, [r4, #0]
  elp->listener = currp;
 8002798:	6068      	str	r0, [r5, #4]
  elp->events   = events;
 800279a:	60a9      	str	r1, [r5, #8]
  elp->flags    = (eventflags_t)0;
 800279c:	60ea      	str	r2, [r5, #12]
  elp->wflags   = wflags;
 800279e:	612b      	str	r3, [r5, #16]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80027a0:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a2:	b672      	cpsid	i
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->next);
 80027a4:	6821      	ldr	r1, [r4, #0]
  {
    chEvtRegisterMask(&es1, &el1, 1);
    chEvtRegisterMask(&es1, &el2, 2);
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 80027a6:	4f19      	ldr	r7, [pc, #100]	; (800280c <test_007_001_execute.8902+0xac>)
 80027a8:	1b08      	subs	r0, r1, r4
 80027aa:	1e43      	subs	r3, r0, #1
 80027ac:	4198      	sbcs	r0, r3
 80027ae:	1c39      	adds	r1, r7, #0
 80027b0:	f7fe f926 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80027b4:	b662      	cpsie	i
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d001      	beq.n	80027be <test_007_001_execute.8902+0x5e>
  test_set_step(4);
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
}
 80027ba:	b00b      	add	sp, #44	; 0x2c
 80027bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [7.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 80027be:	2203      	movs	r2, #3
 80027c0:	6032      	str	r2, [r6, #0]
  {
    chEvtUnregister(&es1, &el1);
 80027c2:	1c20      	adds	r0, r4, #0
 80027c4:	4669      	mov	r1, sp
 80027c6:	f7fe f9e3 	bl	8000b90 <chEvtUnregister>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ca:	b672      	cpsid	i
 80027cc:	6823      	ldr	r3, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 80027ce:	1c39      	adds	r1, r7, #0
 80027d0:	1b18      	subs	r0, r3, r4
 80027d2:	1e43      	subs	r3, r0, #1
 80027d4:	4198      	sbcs	r0, r3
 80027d6:	f7fe f913 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80027da:	b662      	cpsie	i
 80027dc:	2800      	cmp	r0, #0
 80027de:	d1ec      	bne.n	80027ba <test_007_001_execute.8902+0x5a>
  }

  /* [7.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 80027e0:	2004      	movs	r0, #4
 80027e2:	6030      	str	r0, [r6, #0]
  {
    chEvtUnregister(&es1, &el2);
 80027e4:	1c29      	adds	r1, r5, #0
 80027e6:	1c20      	adds	r0, r4, #0
 80027e8:	f7fe f9d2 	bl	8000b90 <chEvtUnregister>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 80027ee:	6826      	ldr	r6, [r4, #0]
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <test_007_001_execute.8902+0xb0>)
 80027f2:	1b34      	subs	r4, r6, r4
 80027f4:	4260      	negs	r0, r4
 80027f6:	4160      	adcs	r0, r4
 80027f8:	f7fe f902 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80027fc:	b662      	cpsie	i
 80027fe:	e7dc      	b.n	80027ba <test_007_001_execute.8902+0x5a>
 8002800:	20000434 	.word	0x20000434
 8002804:	2000106c 	.word	0x2000106c
 8002808:	20000ff8 	.word	0x20000ff8
 800280c:	0800638c 	.word	0x0800638c
 8002810:	08006398 	.word	0x08006398
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46c0      	nop			; (mov r8, r8)

08002820 <test_007_007_execute.8900>:
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void test_007_007_execute(void) {
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	4645      	mov	r5, r8
 8002824:	4657      	mov	r7, sl
 8002826:	464e      	mov	r6, r9
 8002828:	b4e0      	push	{r5, r6, r7}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [7.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 800282a:	4d37      	ldr	r5, [pc, #220]	; (8002908 <test_007_007_execute.8900+0xe8>)
 800282c:	2301      	movs	r3, #1
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void test_007_007_execute(void) {
 800282e:	b08a      	sub	sp, #40	; 0x28
  event_listener_t el1, el2;
  systime_t target_time;

  /* [7.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8002830:	602b      	str	r3, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002832:	b672      	cpsid	i
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8002834:	4e35      	ldr	r6, [pc, #212]	; (800290c <test_007_007_execute.8900+0xec>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8002836:	4f36      	ldr	r7, [pc, #216]	; (8002910 <test_007_007_execute.8900+0xf0>)
  esp->next     = elp;
  elp->listener = currp;
 8002838:	69b2      	ldr	r2, [r6, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 800283a:	6838      	ldr	r0, [r7, #0]
  esp->next     = elp;
 800283c:	a900      	add	r1, sp, #0
  elp->listener = currp;
 800283e:	9201      	str	r2, [sp, #4]
  elp->events   = events;
 8002840:	9302      	str	r3, [sp, #8]
  elp->flags    = (eventflags_t)0;
 8002842:	2200      	movs	r2, #0
  elp->wflags   = wflags;
 8002844:	425b      	negs	r3, r3
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8002846:	9000      	str	r0, [sp, #0]
  esp->next     = elp;
 8002848:	6039      	str	r1, [r7, #0]
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 800284a:	9203      	str	r2, [sp, #12]
  elp->wflags   = wflags;
 800284c:	9304      	str	r3, [sp, #16]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800284e:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 8002852:	4830      	ldr	r0, [pc, #192]	; (8002914 <test_007_007_execute.8900+0xf4>)
 8002854:	ac05      	add	r4, sp, #20
 8002856:	6801      	ldr	r1, [r0, #0]
 8002858:	4680      	mov	r8, r0
  esp->next     = elp;
 800285a:	6004      	str	r4, [r0, #0]
  elp->listener = currp;
 800285c:	69b0      	ldr	r0, [r6, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 800285e:	9105      	str	r1, [sp, #20]
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
 8002860:	2104      	movs	r1, #4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
 8002862:	6060      	str	r0, [r4, #4]
  elp->events   = events;
 8002864:	468a      	mov	sl, r1
 8002866:	60a1      	str	r1, [r4, #8]
  elp->flags    = (eventflags_t)0;
 8002868:	60e2      	str	r2, [r4, #12]
  elp->wflags   = wflags;
 800286a:	6123      	str	r3, [r4, #16]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800286c:	b662      	cpsie	i
  }

  /* [7.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 800286e:	2202      	movs	r2, #2
 8002870:	602a      	str	r2, [r5, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002872:	f002 fded 	bl	8005450 <test_wait_tick>
 8002876:	69b6      	ldr	r6, [r6, #24]
 8002878:	4681      	mov	r9, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800287a:	68b1      	ldr	r1, [r6, #8]
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <test_007_007_execute.8900+0xf8>)
 800287e:	3901      	subs	r1, #1
 8002880:	4b26      	ldr	r3, [pc, #152]	; (800291c <test_007_007_execute.8900+0xfc>)
 8002882:	4827      	ldr	r0, [pc, #156]	; (8002920 <test_007_007_execute.8900+0x100>)
 8002884:	f7fe ff8c 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [7.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8002888:	2103      	movs	r1, #3
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  {
    target_time = test_wait_tick() + MS2ST(50);
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <test_007_007_execute.8900+0x104>)
  }

  /* [7.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 800288c:	6029      	str	r1, [r5, #0]
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  {
    target_time = test_wait_tick() + MS2ST(50);
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800288e:	6018      	str	r0, [r3, #0]
  /* [7.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
  {
    m = chEvtWaitAll(5);
 8002890:	f7ff fbfe 	bl	8002090 <chEvtWaitAll.constprop.34>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002894:	2282      	movs	r2, #130	; 0x82
  /* [7.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002896:	4648      	mov	r0, r9
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002898:	0096      	lsls	r6, r2, #2
  /* [7.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  {
    target_time = test_wait_tick() + MS2ST(50);
 800289a:	30f5      	adds	r0, #245	; 0xf5
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 800289c:	1c31      	adds	r1, r6, #0
  /* [7.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
  {
    target_time = test_wait_tick() + MS2ST(50);
 800289e:	30ff      	adds	r0, #255	; 0xff
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 80028a0:	4449      	add	r1, r9
 80028a2:	f7fd fec5 	bl	8000630 <_test_assert_time_window.constprop.5>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d005      	beq.n	80028b6 <test_007_007_execute.8900+0x96>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 80028aa:	b00a      	add	sp, #40	; 0x28
 80028ac:	bc1c      	pop	{r2, r3, r4}
 80028ae:	4690      	mov	r8, r2
 80028b0:	4699      	mov	r9, r3
 80028b2:	46a2      	mov	sl, r4
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
                            "out of time window");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80028b6:	f7ff fb73 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <test_007_007_execute.8900+0x108>)
 80028bc:	4243      	negs	r3, r0
 80028be:	4158      	adcs	r0, r3
 80028c0:	f7fe f89e 	bl	8000a00 <_test_assert>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d1f0      	bne.n	80028aa <test_007_007_execute.8900+0x8a>
    test_wait_threads();
 80028c8:	f7fe fd62 	bl	8001390 <test_wait_threads>
  }

  /* [7.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 80028cc:	4650      	mov	r0, sl
 80028ce:	6028      	str	r0, [r5, #0]
  {
    chEvtUnregister(&es1, &el1);
 80028d0:	4669      	mov	r1, sp
 80028d2:	1c38      	adds	r0, r7, #0
 80028d4:	f7fe f95c 	bl	8000b90 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 80028d8:	1c21      	adds	r1, r4, #0
 80028da:	4640      	mov	r0, r8
 80028dc:	f7fe f958 	bl	8000b90 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 80028e0:	683d      	ldr	r5, [r7, #0]
 80028e2:	4c12      	ldr	r4, [pc, #72]	; (800292c <test_007_007_execute.8900+0x10c>)
 80028e4:	1bef      	subs	r7, r5, r7
 80028e6:	4278      	negs	r0, r7
 80028e8:	4178      	adcs	r0, r7
 80028ea:	1c21      	adds	r1, r4, #0
 80028ec:	f7fe f888 	bl	8000a00 <_test_assert>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d1da      	bne.n	80028aa <test_007_007_execute.8900+0x8a>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 80028f4:	4643      	mov	r3, r8
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	1ac8      	subs	r0, r1, r3
 80028fa:	4243      	negs	r3, r0
 80028fc:	4158      	adcs	r0, r3
 80028fe:	1c21      	adds	r1, r4, #0
 8002900:	f7fe f87e 	bl	8000a00 <_test_assert>
 8002904:	e7d1      	b.n	80028aa <test_007_007_execute.8900+0x8a>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	2000106c 	.word	0x2000106c
 800290c:	20000ff8 	.word	0x20000ff8
 8002910:	20000434 	.word	0x20000434
 8002914:	20000430 	.word	0x20000430
 8002918:	08004401 	.word	0x08004401
 800291c:	08006248 	.word	0x08006248
 8002920:	20000558 	.word	0x20000558
 8002924:	20000bd0 	.word	0x20000bd0
 8002928:	080063a8 	.word	0x080063a8
 800292c:	08006398 	.word	0x08006398

08002930 <test_009_002_execute.9235>:

static void test_009_002_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void test_009_002_execute(void) {
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	4647      	mov	r7, r8
 8002934:	b480      	push	{r7}
  unsigned i;

  /* [9.2.1] Adding the objects to the pool using
     chGuardedPoolLoadArray().*/
  test_set_step(1);
 8002936:	4f65      	ldr	r7, [pc, #404]	; (8002acc <test_009_002_execute.9235+0x19c>)
 8002938:	2301      	movs	r3, #1
 800293a:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800293e:	4c64      	ldr	r4, [pc, #400]	; (8002ad0 <test_009_002_execute.9235+0x1a0>)
 8002940:	4d64      	ldr	r5, [pc, #400]	; (8002ad4 <test_009_002_execute.9235+0x1a4>)
 8002942:	68e0      	ldr	r0, [r4, #12]
  mp->next = php;
 8002944:	60e5      	str	r5, [r4, #12]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002946:	6028      	str	r0, [r5, #0]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002948:	1c20      	adds	r0, r4, #0
 800294a:	f7fe fd61 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800294e:	f7fe f967 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002952:	b662      	cpsie	i
  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
    chGuardedPoolAdd(gmp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8002954:	6921      	ldr	r1, [r4, #16]
 8002956:	186e      	adds	r6, r5, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800295a:	68e2      	ldr	r2, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 800295c:	1c20      	adds	r0, r4, #0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800295e:	6032      	str	r2, [r6, #0]
  mp->next = php;
 8002960:	60e6      	str	r6, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002962:	f7fe fd55 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002966:	f7fe f95b 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800296a:	b662      	cpsie	i
  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
    chGuardedPoolAdd(gmp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800296c:	6923      	ldr	r3, [r4, #16]
 800296e:	18f6      	adds	r6, r6, r3
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002972:	68e0      	ldr	r0, [r4, #12]
  mp->next = php;
 8002974:	60e6      	str	r6, [r4, #12]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002976:	6030      	str	r0, [r6, #0]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002978:	1c20      	adds	r0, r4, #0
 800297a:	f7fe fd49 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800297e:	f7fe f94f 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002982:	b662      	cpsie	i
  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
    chGuardedPoolAdd(gmp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8002984:	6921      	ldr	r1, [r4, #16]
 8002986:	1872      	adds	r2, r6, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800298a:	68e3      	ldr	r3, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 800298c:	1c20      	adds	r0, r4, #0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800298e:	6013      	str	r3, [r2, #0]
  mp->next = php;
 8002990:	60e2      	str	r2, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002992:	f7fe fd3d 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002996:	f7fe f943 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800299a:	b662      	cpsie	i
  {
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
  }

  /* [9.2.2] Emptying the pool using chGuardedPoolAllocTimeout().*/
  test_set_step(2);
 800299c:	2602      	movs	r6, #2
 800299e:	603e      	str	r6, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80029a0:	2000      	movs	r0, #0
 80029a2:	f001 f92d 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 80029a6:	4e4c      	ldr	r6, [pc, #304]	; (8002ad8 <test_009_002_execute.9235+0x1a8>)
 80029a8:	1e43      	subs	r3, r0, #1
 80029aa:	4198      	sbcs	r0, r3
 80029ac:	1c31      	adds	r1, r6, #0
 80029ae:	f7fe f827 	bl	8000a00 <_test_assert>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d000      	beq.n	80029b8 <test_009_002_execute.9235+0x88>
 80029b6:	e086      	b.n	8002ac6 <test_009_002_execute.9235+0x196>
 80029b8:	f001 f922 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 80029bc:	1c31      	adds	r1, r6, #0
 80029be:	1e43      	subs	r3, r0, #1
 80029c0:	4198      	sbcs	r0, r3
 80029c2:	f7fe f81d 	bl	8000a00 <_test_assert>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d000      	beq.n	80029cc <test_009_002_execute.9235+0x9c>
 80029ca:	e07c      	b.n	8002ac6 <test_009_002_execute.9235+0x196>
 80029cc:	f001 f918 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 80029d0:	1c31      	adds	r1, r6, #0
 80029d2:	1e43      	subs	r3, r0, #1
 80029d4:	4198      	sbcs	r0, r3
 80029d6:	f7fe f813 	bl	8000a00 <_test_assert>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d173      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
 80029de:	f001 f90f 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 80029e2:	1c31      	adds	r1, r6, #0
 80029e4:	1e43      	subs	r3, r0, #1
 80029e6:	4198      	sbcs	r0, r3
 80029e8:	f7fe f80a 	bl	8000a00 <_test_assert>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d16a      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
  }

  /* [9.2.3] Now must be empty.*/
  test_set_step(3);
 80029f0:	2103      	movs	r1, #3
 80029f2:	6039      	str	r1, [r7, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80029f4:	f001 f904 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 80029f8:	4a38      	ldr	r2, [pc, #224]	; (8002adc <test_009_002_execute.9235+0x1ac>)
 80029fa:	4243      	negs	r3, r0
 80029fc:	4158      	adcs	r0, r3
 80029fe:	1c11      	adds	r1, r2, #0
 8002a00:	4690      	mov	r8, r2
 8002a02:	f7fd fffd 	bl	8000a00 <_test_assert>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d15d      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
  }

  /* [9.2.4] Adding the objects to the pool using
     chGuardedPoolFree().*/
  test_set_step(4);
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	6038      	str	r0, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0e:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a10:	68e3      	ldr	r3, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002a12:	1c20      	adds	r0, r4, #0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a14:	602b      	str	r3, [r5, #0]
  mp->next = php;
 8002a16:	60e5      	str	r5, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002a18:	f7fe fcfa 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002a1c:	f7fe f900 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002a20:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a22:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a24:	68e1      	ldr	r1, [r4, #12]
  mp->next = php;
 8002a26:	1d2a      	adds	r2, r5, #4
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a28:	6069      	str	r1, [r5, #4]
  mp->next = php;
 8002a2a:	60e2      	str	r2, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002a2c:	1c20      	adds	r0, r4, #0
 8002a2e:	f7fe fcef 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002a32:	f7fe f8f5 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002a36:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a3a:	68e0      	ldr	r0, [r4, #12]
  mp->next = php;
 8002a3c:	1c2b      	adds	r3, r5, #0
 8002a3e:	3308      	adds	r3, #8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a40:	60a8      	str	r0, [r5, #8]
  mp->next = php;
 8002a42:	60e3      	str	r3, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002a44:	1c20      	adds	r0, r4, #0
 8002a46:	f7fe fce3 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002a4a:	f7fe f8e9 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002a4e:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a52:	68e1      	ldr	r1, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002a54:	1c20      	adds	r0, r4, #0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8002a56:	60e9      	str	r1, [r5, #12]
  mp->next = php;
 8002a58:	350c      	adds	r5, #12
 8002a5a:	60e5      	str	r5, [r4, #12]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8002a5c:	f7fe fcd8 	bl	8001410 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8002a60:	f7fe f8de 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002a64:	b662      	cpsie	i
      chGuardedPoolFree(&gmp1, &objects[i]);
  }

  /* [9.2.5] Emptying the pool using chGuardedPoolAllocTimeout()
     again.*/
  test_set_step(5);
 8002a66:	2505      	movs	r5, #5
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8002a68:	2000      	movs	r0, #0
      chGuardedPoolFree(&gmp1, &objects[i]);
  }

  /* [9.2.5] Emptying the pool using chGuardedPoolAllocTimeout()
     again.*/
  test_set_step(5);
 8002a6a:	603d      	str	r5, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8002a6c:	f001 f8c8 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 8002a70:	1c31      	adds	r1, r6, #0
 8002a72:	1e43      	subs	r3, r0, #1
 8002a74:	4198      	sbcs	r0, r3
 8002a76:	f7fd ffc3 	bl	8000a00 <_test_assert>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d123      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
 8002a7e:	f001 f8bf 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 8002a82:	1c31      	adds	r1, r6, #0
 8002a84:	1e43      	subs	r3, r0, #1
 8002a86:	4198      	sbcs	r0, r3
 8002a88:	f7fd ffba 	bl	8000a00 <_test_assert>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d11a      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
 8002a90:	f001 f8b6 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 8002a94:	1c31      	adds	r1, r6, #0
 8002a96:	1e43      	subs	r3, r0, #1
 8002a98:	4198      	sbcs	r0, r3
 8002a9a:	f7fd ffb1 	bl	8000a00 <_test_assert>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d111      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
 8002aa2:	f001 f8ad 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 8002aa6:	1c31      	adds	r1, r6, #0
 8002aa8:	1e43      	subs	r3, r0, #1
 8002aaa:	4198      	sbcs	r0, r3
 8002aac:	f7fd ffa8 	bl	8000a00 <_test_assert>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d108      	bne.n	8002ac6 <test_009_002_execute.9235+0x196>
  }

  /* [9.2.6] Now must be empty again.*/
  test_set_step(6);
 8002ab4:	2406      	movs	r4, #6
 8002ab6:	603c      	str	r4, [r7, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8002ab8:	f001 f8a2 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 8002abc:	4641      	mov	r1, r8
 8002abe:	4243      	negs	r3, r0
 8002ac0:	4158      	adcs	r0, r3
 8002ac2:	f7fd ff9d 	bl	8000a00 <_test_assert>
  }
}
 8002ac6:	bc04      	pop	{r2}
 8002ac8:	4690      	mov	r8, r2
 8002aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002acc:	2000106c 	.word	0x2000106c
 8002ad0:	20000400 	.word	0x20000400
 8002ad4:	200004f8 	.word	0x200004f8
 8002ad8:	080063b4 	.word	0x080063b4
 8002adc:	080063c0 	.word	0x080063c0

08002ae0 <test_007_005_execute.8924>:

static void test_007_005_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_005_execute(void) {
 8002ae0:	b570      	push	{r4, r5, r6, lr}
  eventmask_t m;
  systime_t target_time;

  /* [7.5.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 8002ae2:	4c2a      	ldr	r4, [pc, #168]	; (8002b8c <test_007_005_execute.8924+0xac>)
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(5);
 8002ae8:	2005      	movs	r0, #5
 8002aea:	f7fe f841 	bl	8000b70 <chEvtAddEvents>
  }

  /* [7.5.2] Calling chEvtWaitAll() one time, the two flags must be
     returned.*/
  test_set_step(2);
 8002aee:	2002      	movs	r0, #2
 8002af0:	6020      	str	r0, [r4, #0]
  {
    m = chEvtWaitAll(5);
 8002af2:	f7ff facd 	bl	8002090 <chEvtWaitAll.constprop.34>
    test_assert(m == 5, "unexpected pending bit");
 8002af6:	3805      	subs	r0, #5
 8002af8:	4243      	negs	r3, r0
 8002afa:	4158      	adcs	r0, r3
 8002afc:	4924      	ldr	r1, [pc, #144]	; (8002b90 <test_007_005_execute.8924+0xb0>)
 8002afe:	f7fd ff7f 	bl	8000a00 <_test_assert>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d000      	beq.n	8002b08 <test_007_005_execute.8924+0x28>
    test_assert(m == 5, "event flags error");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
    test_wait_threads();
  }
}
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
     returned.*/
  test_set_step(2);
  {
    m = chEvtWaitAll(5);
    test_assert(m == 5, "unexpected pending bit");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002b08:	f7ff fa4a 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 8002b0c:	4d21      	ldr	r5, [pc, #132]	; (8002b94 <test_007_005_execute.8924+0xb4>)
 8002b0e:	4243      	negs	r3, r0
 8002b10:	4158      	adcs	r0, r3
 8002b12:	1c29      	adds	r1, r5, #0
 8002b14:	f7fd ff74 	bl	8000a00 <_test_assert>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d1f4      	bne.n	8002b06 <test_007_005_execute.8924+0x26>
  }

  /* [7.5.3] Setting one event flag.*/
  test_set_step(3);
 8002b1c:	2103      	movs	r1, #3
  {
    chEvtAddEvents(4);
 8002b1e:	2004      	movs	r0, #4
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
  }

  /* [7.5.3] Setting one event flag.*/
  test_set_step(3);
 8002b20:	6021      	str	r1, [r4, #0]
  {
    chEvtAddEvents(4);
 8002b22:	f7fe f825 	bl	8000b70 <chEvtAddEvents>
  }

  /* [7.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
 8002b26:	2204      	movs	r2, #4
 8002b28:	6022      	str	r2, [r4, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002b2a:	f002 fc91 	bl	8005450 <test_wait_tick>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <test_007_005_execute.8924+0xb8>)
 8002b30:	1c06      	adds	r6, r0, #0
 8002b32:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <test_007_005_execute.8924+0xbc>)
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <test_007_005_execute.8924+0xc0>)
 8002b3a:	3901      	subs	r1, #1
 8002b3c:	f7fe fe30 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002b40:	4918      	ldr	r1, [pc, #96]	; (8002ba4 <test_007_005_execute.8924+0xc4>)
 8002b42:	6008      	str	r0, [r1, #0]
  }

  /* [7.5.5] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
 8002b44:	2005      	movs	r0, #5
 8002b46:	6020      	str	r0, [r4, #0]
  {
    m = chEvtWaitAll(5);
 8002b48:	f7ff faa2 	bl	8002090 <chEvtWaitAll.constprop.34>

  /* [7.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002b4c:	22fa      	movs	r2, #250	; 0xfa
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002b4e:	2182      	movs	r1, #130	; 0x82

  /* [7.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002b50:	0053      	lsls	r3, r2, #1
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002b52:	008a      	lsls	r2, r1, #2
  /* [7.5.5] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
  {
    m = chEvtWaitAll(5);
 8002b54:	1c04      	adds	r4, r0, #0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002b56:	18b1      	adds	r1, r6, r2

  /* [7.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002b58:	18f0      	adds	r0, r6, r3
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002b5a:	f7fd fd69 	bl	8000630 <_test_assert_time_window.constprop.5>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d1d1      	bne.n	8002b06 <test_007_005_execute.8924+0x26>
                            "out of time window");
    test_assert(m == 5, "event flags error");
 8002b62:	3c05      	subs	r4, #5
 8002b64:	4260      	negs	r0, r4
 8002b66:	4160      	adcs	r0, r4
 8002b68:	490f      	ldr	r1, [pc, #60]	; (8002ba8 <test_007_005_execute.8924+0xc8>)
 8002b6a:	f7fd ff49 	bl	8000a00 <_test_assert>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d1c9      	bne.n	8002b06 <test_007_005_execute.8924+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002b72:	f7ff fa15 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 8002b76:	1c29      	adds	r1, r5, #0
 8002b78:	4243      	negs	r3, r0
 8002b7a:	4158      	adcs	r0, r3
 8002b7c:	f7fd ff40 	bl	8000a00 <_test_assert>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d1c0      	bne.n	8002b06 <test_007_005_execute.8924+0x26>
    test_wait_threads();
 8002b84:	f7fe fc04 	bl	8001390 <test_wait_threads>
 8002b88:	e7bd      	b.n	8002b06 <test_007_005_execute.8924+0x26>
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	2000106c 	.word	0x2000106c
 8002b90:	080063d0 	.word	0x080063d0
 8002b94:	080063a8 	.word	0x080063a8
 8002b98:	20000ff8 	.word	0x20000ff8
 8002b9c:	080059c1 	.word	0x080059c1
 8002ba0:	20000558 	.word	0x20000558
 8002ba4:	20000bd0 	.word	0x20000bd0
 8002ba8:	080063e8 	.word	0x080063e8
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46c0      	nop			; (mov r8, r8)

08002bb0 <test_007_004_execute.8928>:

static void test_007_004_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_004_execute(void) {
 8002bb0:	b570      	push	{r4, r5, r6, lr}
  eventmask_t m;
  systime_t target_time;

  /* [7.4.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 8002bb2:	4c27      	ldr	r4, [pc, #156]	; (8002c50 <test_007_004_execute.8928+0xa0>)
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(5);
 8002bb8:	2005      	movs	r0, #5
 8002bba:	f7fd ffd9 	bl	8000b70 <chEvtAddEvents>
  }

  /* [7.4.2] Calling chEvtWaitAny() one time, the two flags must be
     returned.*/
  test_set_step(2);
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	6020      	str	r0, [r4, #0]
  {
    m = chEvtWaitAny(ALL_EVENTS);
 8002bc2:	f7ff fa4d 	bl	8002060 <chEvtWaitAny.constprop.35>
    test_assert(m == 5, "unexpected pending bit");
 8002bc6:	3805      	subs	r0, #5
 8002bc8:	4243      	negs	r3, r0
 8002bca:	4158      	adcs	r0, r3
 8002bcc:	4921      	ldr	r1, [pc, #132]	; (8002c54 <test_007_004_execute.8928+0xa4>)
 8002bce:	f7fd ff17 	bl	8000a00 <_test_assert>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d000      	beq.n	8002bd8 <test_007_004_execute.8928+0x28>
    test_assert(m == 1, "event flag error");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
    test_wait_threads();
  }
}
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
     returned.*/
  test_set_step(2);
  {
    m = chEvtWaitAny(ALL_EVENTS);
    test_assert(m == 5, "unexpected pending bit");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002bd8:	f7ff f9e2 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 8002bdc:	4d1e      	ldr	r5, [pc, #120]	; (8002c58 <test_007_004_execute.8928+0xa8>)
 8002bde:	4243      	negs	r3, r0
 8002be0:	4158      	adcs	r0, r3
 8002be2:	1c29      	adds	r1, r5, #0
 8002be4:	f7fd ff0c 	bl	8000a00 <_test_assert>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d1f4      	bne.n	8002bd6 <test_007_004_execute.8928+0x26>
  }

  /* [7.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
 8002bec:	2103      	movs	r1, #3
 8002bee:	6021      	str	r1, [r4, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002bf0:	f002 fc2e 	bl	8005450 <test_wait_tick>
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <test_007_004_execute.8928+0xac>)
 8002bf6:	1c06      	adds	r6, r0, #0
 8002bf8:	6993      	ldr	r3, [r2, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002bfa:	4819      	ldr	r0, [pc, #100]	; (8002c60 <test_007_004_execute.8928+0xb0>)
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <test_007_004_execute.8928+0xb4>)
 8002c00:	3901      	subs	r1, #1
 8002c02:	f7fe fdcd 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <test_007_004_execute.8928+0xb8>)
 8002c08:	6018      	str	r0, [r3, #0]
  }

  /* [7.4.4] Calling chEvtWaitAny() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
 8002c0a:	2004      	movs	r0, #4
 8002c0c:	6020      	str	r0, [r4, #0]
  {
    m = chEvtWaitAny(ALL_EVENTS);
 8002c0e:	f7ff fa27 	bl	8002060 <chEvtWaitAny.constprop.35>

  /* [7.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002c12:	21fa      	movs	r1, #250	; 0xfa
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitAny(ALL_EVENTS);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002c14:	2382      	movs	r3, #130	; 0x82

  /* [7.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002c16:	004a      	lsls	r2, r1, #1
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitAny(ALL_EVENTS);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002c18:	0099      	lsls	r1, r3, #2
  /* [7.4.4] Calling chEvtWaitAny() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitAny(ALL_EVENTS);
 8002c1a:	1c04      	adds	r4, r0, #0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002c1c:	1871      	adds	r1, r6, r1

  /* [7.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002c1e:	18b0      	adds	r0, r6, r2
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitAny(ALL_EVENTS);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002c20:	f7fd fd06 	bl	8000630 <_test_assert_time_window.constprop.5>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d1d6      	bne.n	8002bd6 <test_007_004_execute.8928+0x26>
                            "out of time window");
    test_assert(m == 1, "event flag error");
 8002c28:	3c01      	subs	r4, #1
 8002c2a:	4260      	negs	r0, r4
 8002c2c:	4160      	adcs	r0, r4
 8002c2e:	490f      	ldr	r1, [pc, #60]	; (8002c6c <test_007_004_execute.8928+0xbc>)
 8002c30:	f7fd fee6 	bl	8000a00 <_test_assert>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1ce      	bne.n	8002bd6 <test_007_004_execute.8928+0x26>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002c38:	f7ff f9b2 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 8002c3c:	1c29      	adds	r1, r5, #0
 8002c3e:	4243      	negs	r3, r0
 8002c40:	4158      	adcs	r0, r3
 8002c42:	f7fd fedd 	bl	8000a00 <_test_assert>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d1c5      	bne.n	8002bd6 <test_007_004_execute.8928+0x26>
    test_wait_threads();
 8002c4a:	f7fe fba1 	bl	8001390 <test_wait_threads>
 8002c4e:	e7c2      	b.n	8002bd6 <test_007_004_execute.8928+0x26>
 8002c50:	2000106c 	.word	0x2000106c
 8002c54:	080063d0 	.word	0x080063d0
 8002c58:	080063a8 	.word	0x080063a8
 8002c5c:	20000ff8 	.word	0x20000ff8
 8002c60:	20000558 	.word	0x20000558
 8002c64:	080059c1 	.word	0x080059c1
 8002c68:	20000bd0 	.word	0x20000bd0
 8002c6c:	080063fc 	.word	0x080063fc

08002c70 <test_007_003_execute.8932>:

static void test_007_003_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_003_execute(void) {
 8002c70:	b570      	push	{r4, r5, r6, lr}
  eventmask_t m;
  systime_t target_time;

  /* [7.3.1] Setting three event flags.*/
  test_set_step(1);
 8002c72:	4c32      	ldr	r4, [pc, #200]	; (8002d3c <test_007_003_execute.8932+0xcc>)
 8002c74:	2301      	movs	r3, #1
 8002c76:	6023      	str	r3, [r4, #0]
  {
    chEvtAddEvents(7);
 8002c78:	2007      	movs	r0, #7
 8002c7a:	f7fd ff79 	bl	8000b70 <chEvtAddEvents>
  }

  /* [7.3.2] Calling chEvtWaitOne() three times, each time a single
     flag must be returned in order of priority.*/
  test_set_step(2);
 8002c7e:	2002      	movs	r0, #2
 8002c80:	6020      	str	r0, [r4, #0]
  {
    m = chEvtWaitOne(ALL_EVENTS);
 8002c82:	f7ff f9d5 	bl	8002030 <chEvtWaitOne.constprop.36>
    test_assert(m == 1, "single event error");
 8002c86:	4d2e      	ldr	r5, [pc, #184]	; (8002d40 <test_007_003_execute.8932+0xd0>)
 8002c88:	3801      	subs	r0, #1
 8002c8a:	4243      	negs	r3, r0
 8002c8c:	4158      	adcs	r0, r3
 8002c8e:	1c29      	adds	r1, r5, #0
 8002c90:	f7fd feb6 	bl	8000a00 <_test_assert>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d000      	beq.n	8002c9a <test_007_003_execute.8932+0x2a>
    test_assert(m == 1, "event flag error");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
    test_assert(m == 0, "stuck event");
    test_wait_threads();
  }
}
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
     flag must be returned in order of priority.*/
  test_set_step(2);
  {
    m = chEvtWaitOne(ALL_EVENTS);
    test_assert(m == 1, "single event error");
    m = chEvtWaitOne(ALL_EVENTS);
 8002c9a:	f7ff f9c9 	bl	8002030 <chEvtWaitOne.constprop.36>
    test_assert(m == 2, "single event error");
 8002c9e:	3802      	subs	r0, #2
 8002ca0:	4243      	negs	r3, r0
 8002ca2:	4158      	adcs	r0, r3
 8002ca4:	1c29      	adds	r1, r5, #0
 8002ca6:	f7fd feab 	bl	8000a00 <_test_assert>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d1f4      	bne.n	8002c98 <test_007_003_execute.8932+0x28>
    m = chEvtWaitOne(ALL_EVENTS);
 8002cae:	f7ff f9bf 	bl	8002030 <chEvtWaitOne.constprop.36>
    test_assert(m == 4, "single event error");
 8002cb2:	3804      	subs	r0, #4
 8002cb4:	4243      	negs	r3, r0
 8002cb6:	4158      	adcs	r0, r3
 8002cb8:	1c29      	adds	r1, r5, #0
 8002cba:	f7fd fea1 	bl	8000a00 <_test_assert>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d1ea      	bne.n	8002c98 <test_007_003_execute.8932+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002cc2:	f7ff f96d 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 8002cc6:	4d1f      	ldr	r5, [pc, #124]	; (8002d44 <test_007_003_execute.8932+0xd4>)
 8002cc8:	4243      	negs	r3, r0
 8002cca:	4158      	adcs	r0, r3
 8002ccc:	1c29      	adds	r1, r5, #0
 8002cce:	f7fd fe97 	bl	8000a00 <_test_assert>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d1e0      	bne.n	8002c98 <test_007_003_execute.8932+0x28>
  }

  /* [7.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
 8002cd6:	2103      	movs	r1, #3
 8002cd8:	6021      	str	r1, [r4, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002cda:	f002 fbb9 	bl	8005450 <test_wait_tick>
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <test_007_003_execute.8932+0xd8>)
 8002ce0:	1c06      	adds	r6, r0, #0
 8002ce2:	6993      	ldr	r3, [r2, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002ce4:	4819      	ldr	r0, [pc, #100]	; (8002d4c <test_007_003_execute.8932+0xdc>)
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <test_007_003_execute.8932+0xe0>)
 8002cea:	3901      	subs	r1, #1
 8002cec:	f7fe fd58 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <test_007_003_execute.8932+0xe4>)
 8002cf2:	6018      	str	r0, [r3, #0]
  }

  /* [7.3.4] Calling chEvtWaitOne() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
 8002cf4:	2004      	movs	r0, #4
 8002cf6:	6020      	str	r0, [r4, #0]
  {
    m = chEvtWaitOne(ALL_EVENTS);
 8002cf8:	f7ff f99a 	bl	8002030 <chEvtWaitOne.constprop.36>

  /* [7.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002cfc:	21fa      	movs	r1, #250	; 0xfa
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitOne(ALL_EVENTS);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002cfe:	2382      	movs	r3, #130	; 0x82

  /* [7.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002d00:	004a      	lsls	r2, r1, #1
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitOne(ALL_EVENTS);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002d02:	0099      	lsls	r1, r3, #2
  /* [7.3.4] Calling chEvtWaitOne() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitOne(ALL_EVENTS);
 8002d04:	1c04      	adds	r4, r0, #0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002d06:	1871      	adds	r1, r6, r1

  /* [7.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
  {
    target_time = test_wait_tick() + MS2ST(50);
 8002d08:	18b0      	adds	r0, r6, r2
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
  {
    m = chEvtWaitOne(ALL_EVENTS);
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002d0a:	f7fd fc91 	bl	8000630 <_test_assert_time_window.constprop.5>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d1c2      	bne.n	8002c98 <test_007_003_execute.8932+0x28>
                            "out of time window");
    test_assert(m == 1, "event flag error");
 8002d12:	1e60      	subs	r0, r4, #1
 8002d14:	4244      	negs	r4, r0
 8002d16:	4160      	adcs	r0, r4
 8002d18:	490f      	ldr	r1, [pc, #60]	; (8002d58 <test_007_003_execute.8932+0xe8>)
 8002d1a:	f7fd fe71 	bl	8000a00 <_test_assert>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d1ba      	bne.n	8002c98 <test_007_003_execute.8932+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002d22:	f7ff f93d 	bl	8001fa0 <chEvtGetAndClearEvents.constprop.40>
    test_assert(m == 0, "stuck event");
 8002d26:	1c29      	adds	r1, r5, #0
 8002d28:	4243      	negs	r3, r0
 8002d2a:	4158      	adcs	r0, r3
 8002d2c:	f7fd fe68 	bl	8000a00 <_test_assert>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d1b1      	bne.n	8002c98 <test_007_003_execute.8932+0x28>
    test_wait_threads();
 8002d34:	f7fe fb2c 	bl	8001390 <test_wait_threads>
 8002d38:	e7ae      	b.n	8002c98 <test_007_003_execute.8932+0x28>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	2000106c 	.word	0x2000106c
 8002d40:	08006410 	.word	0x08006410
 8002d44:	080063a8 	.word	0x080063a8
 8002d48:	20000ff8 	.word	0x20000ff8
 8002d4c:	20000558 	.word	0x20000558
 8002d50:	080059c1 	.word	0x080059c1
 8002d54:	20000bd0 	.word	0x20000bd0
 8002d58:	080063fc 	.word	0x080063fc
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46c0      	nop			; (mov r8, r8)

08002d60 <test_012_009_execute.9662>:
 *   one-second time window.
 * - [12.9.2] The score is printed.
 * .
 */

static void test_012_009_execute(void) {
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;

  /* [12.9.1] Two timers are set then reset without waiting for their
     counter to elapse. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <test_012_009_execute.9662+0x88>)
 *   one-second time window.
 * - [12.9.2] The score is printed.
 * .
 */

static void test_012_009_execute(void) {
 8002d64:	465f      	mov	r7, fp
 8002d66:	4656      	mov	r6, sl
 8002d68:	464d      	mov	r5, r9
 8002d6a:	4644      	mov	r4, r8
  uint32_t n;

  /* [12.9.1] Two timers are set then reset without waiting for their
     counter to elapse. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8002d6c:	2301      	movs	r3, #1
 *   one-second time window.
 * - [12.9.2] The score is printed.
 * .
 */

static void test_012_009_execute(void) {
 8002d6e:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n;

  /* [12.9.1] Two timers are set then reset without waiting for their
     counter to elapse. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4693      	mov	fp, r2
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8002d74:	f002 fb6c 	bl	8005450 <test_wait_tick>
      chSysUnlock();
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <test_012_009_execute.9662+0x8c>)
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8002d7a:	4682      	mov	sl, r0
 8002d7c:	2080      	movs	r0, #128	; 0x80
 8002d7e:	05c1      	lsls	r1, r0, #23
 8002d80:	4f1b      	ldr	r7, [pc, #108]	; (8002df0 <test_012_009_execute.9662+0x90>)
 8002d82:	4e1c      	ldr	r6, [pc, #112]	; (8002df4 <test_012_009_execute.9662+0x94>)
 8002d84:	4d1c      	ldr	r5, [pc, #112]	; (8002df8 <test_012_009_execute.9662+0x98>)
     one-second time window.*/
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
 8002d86:	2400      	movs	r4, #0
 8002d88:	4689      	mov	r9, r1
      chSysUnlock();
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002d8a:	4690      	mov	r8, r2
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8c:	b672      	cpsid	i
    n = 0;
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSysLock();
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8002d8e:	2101      	movs	r1, #1
 8002d90:	1c38      	adds	r0, r7, #0
 8002d92:	1c32      	adds	r2, r6, #0
 8002d94:	2300      	movs	r3, #0
 8002d96:	f000 fca3 	bl	80036e0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002d9a:	4918      	ldr	r1, [pc, #96]	; (8002dfc <test_012_009_execute.9662+0x9c>)
 8002d9c:	1c32      	adds	r2, r6, #0
 8002d9e:	2300      	movs	r3, #0
 8002da0:	1c28      	adds	r0, r5, #0
 8002da2:	f000 fc9d 	bl	80036e0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8002da6:	1c38      	adds	r0, r7, #0
 8002da8:	f000 fc62 	bl	8003670 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8002dac:	1c28      	adds	r0, r5, #0
 8002dae:	f000 fc5f 	bl	8003670 <chVTDoResetI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002db2:	b662      	cpsie	i
 8002db4:	464b      	mov	r3, r9
 8002db6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8002db8:	4651      	mov	r1, sl
      chSysUnlock();
      n++;
 8002dba:	3401      	adds	r4, #1
 8002dbc:	1a42      	subs	r2, r0, r1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002dbe:	4542      	cmp	r2, r8
 8002dc0:	d9e4      	bls.n	8002d8c <test_012_009_execute.9662+0x2c>
  }

  /* [12.9.2] The score is printed.*/
  test_set_step(2);
 8002dc2:	465e      	mov	r6, fp
 8002dc4:	2702      	movs	r7, #2
 8002dc6:	6037      	str	r7, [r6, #0]
  {
    test_print("--- Score : ");
 8002dc8:	480d      	ldr	r0, [pc, #52]	; (8002e00 <test_012_009_execute.9662+0xa0>)
 8002dca:	f7fd fce1 	bl	8000790 <test_print>
    test_printn(n * 2);
 8002dce:	0060      	lsls	r0, r4, #1
 8002dd0:	f7fd fcf6 	bl	80007c0 <test_printn>
    test_println(" timers/S");
 8002dd4:	480b      	ldr	r0, [pc, #44]	; (8002e04 <test_012_009_execute.9662+0xa4>)
 8002dd6:	f7fd fcbb 	bl	8000750 <test_println>
  }
}
 8002dda:	bc3c      	pop	{r2, r3, r4, r5}
 8002ddc:	4690      	mov	r8, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	46a2      	mov	sl, r4
 8002de2:	46ab      	mov	fp, r5
 8002de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	2000106c 	.word	0x2000106c
 8002dec:	0000270f 	.word	0x0000270f
 8002df0:	200004d0 	.word	0x200004d0
 8002df4:	080002f1 	.word	0x080002f1
 8002df8:	200004e4 	.word	0x200004e4
 8002dfc:	00002710 	.word	0x00002710
 8002e00:	08006424 	.word	0x08006424
 8002e04:	08006434 	.word	0x08006434
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46c0      	nop			; (mov r8, r8)

08002e10 <test_012_011_execute.9652>:

static void test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}

static void test_012_011_execute(void) {
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <test_012_011_execute.9652+0x7c>)

static void test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}

static void test_012_011_execute(void) {
 8002e14:	464f      	mov	r7, r9
 8002e16:	4646      	mov	r6, r8
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8002e18:	2301      	movs	r3, #1

static void test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}

static void test_012_011_execute(void) {
 8002e1a:	b4c0      	push	{r6, r7}
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4691      	mov	r9, r2
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8002e20:	f002 fb16 	bl	8005450 <test_wait_tick>
 8002e24:	2780      	movs	r7, #128	; 0x80
 8002e26:	4c1a      	ldr	r4, [pc, #104]	; (8002e90 <test_012_011_execute.9652+0x80>)
      chMtxUnlock(&mtx1);
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002e28:	4e1a      	ldr	r6, [pc, #104]	; (8002e94 <test_012_011_execute.9652+0x84>)
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8002e2a:	4680      	mov	r8, r0
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	05ff      	lsls	r7, r7, #23
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chMtxLock(&mtx1);
 8002e30:	1c20      	adds	r0, r4, #0
 8002e32:	f7fe f9c5 	bl	80011c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8002e36:	1c20      	adds	r0, r4, #0
 8002e38:	f7fe f92a 	bl	8001090 <chMtxUnlock>
      chMtxLock(&mtx1);
 8002e3c:	1c20      	adds	r0, r4, #0
 8002e3e:	f7fe f9bf 	bl	80011c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8002e42:	1c20      	adds	r0, r4, #0
 8002e44:	f7fe f924 	bl	8001090 <chMtxUnlock>
      chMtxLock(&mtx1);
 8002e48:	1c20      	adds	r0, r4, #0
 8002e4a:	f7fe f9b9 	bl	80011c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8002e4e:	1c20      	adds	r0, r4, #0
 8002e50:	f7fe f91e 	bl	8001090 <chMtxUnlock>
      chMtxLock(&mtx1);
 8002e54:	1c20      	adds	r0, r4, #0
 8002e56:	f7fe f9b3 	bl	80011c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8002e5a:	1c20      	adds	r0, r4, #0
 8002e5c:	f7fe f918 	bl	8001090 <chMtxUnlock>
 8002e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e62:	4641      	mov	r1, r8
      n++;
 8002e64:	3501      	adds	r5, #1
 8002e66:	1a42      	subs	r2, r0, r1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002e68:	42b2      	cmp	r2, r6
 8002e6a:	d9e1      	bls.n	8002e30 <test_012_011_execute.9652+0x20>
  }

  /* [12.11.2] The score is printed.*/
  test_set_step(2);
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	464c      	mov	r4, r9
 8002e70:	6023      	str	r3, [r4, #0]
  {
    test_print("--- Score : ");
 8002e72:	4809      	ldr	r0, [pc, #36]	; (8002e98 <test_012_011_execute.9652+0x88>)
 8002e74:	f7fd fc8c 	bl	8000790 <test_print>
    test_printn(n * 4);
 8002e78:	00a8      	lsls	r0, r5, #2
 8002e7a:	f7fd fca1 	bl	80007c0 <test_printn>
    test_println(" lock+unlock/S");
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <test_012_011_execute.9652+0x8c>)
 8002e80:	f7fd fc66 	bl	8000750 <test_println>
  }
}
 8002e84:	bc0c      	pop	{r2, r3}
 8002e86:	4690      	mov	r8, r2
 8002e88:	4699      	mov	r9, r3
 8002e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e8c:	2000106c 	.word	0x2000106c
 8002e90:	20000520 	.word	0x20000520
 8002e94:	0000270f 	.word	0x0000270f
 8002e98:	08006424 	.word	0x08006424
 8002e9c:	08006440 	.word	0x08006440

08002ea0 <test_012_010_execute.9656>:

static void test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}

static void test_012_010_execute(void) {
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;

  /* [12.10.1] A semaphore is teken and released. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <test_012_010_execute.9656+0x7c>)

static void test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}

static void test_012_010_execute(void) {
 8002ea4:	464f      	mov	r7, r9
 8002ea6:	4646      	mov	r6, r8
  uint32_t n;

  /* [12.10.1] A semaphore is teken and released. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8002ea8:	2301      	movs	r3, #1

static void test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}

static void test_012_010_execute(void) {
 8002eaa:	b4c0      	push	{r6, r7}
  uint32_t n;

  /* [12.10.1] A semaphore is teken and released. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4691      	mov	r9, r2
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8002eb0:	f002 face 	bl	8005450 <test_wait_tick>
 8002eb4:	2780      	movs	r7, #128	; 0x80
 8002eb6:	4c1a      	ldr	r4, [pc, #104]	; (8002f20 <test_012_010_execute.9656+0x80>)
      chSemSignal(&sem1);
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002eb8:	4e1a      	ldr	r6, [pc, #104]	; (8002f24 <test_012_010_execute.9656+0x84>)
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8002eba:	4680      	mov	r8, r0
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    systime_t start, end;

    n = 0;
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	05ff      	lsls	r7, r7, #23
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSemWait(&sem1);
 8002ec0:	1c20      	adds	r0, r4, #0
 8002ec2:	f7fd ffdd 	bl	8000e80 <chSemWait>
      chSemSignal(&sem1);
 8002ec6:	1c20      	adds	r0, r4, #0
 8002ec8:	f7fd ff7a 	bl	8000dc0 <chSemSignal>
      chSemWait(&sem1);
 8002ecc:	1c20      	adds	r0, r4, #0
 8002ece:	f7fd ffd7 	bl	8000e80 <chSemWait>
      chSemSignal(&sem1);
 8002ed2:	1c20      	adds	r0, r4, #0
 8002ed4:	f7fd ff74 	bl	8000dc0 <chSemSignal>
      chSemWait(&sem1);
 8002ed8:	1c20      	adds	r0, r4, #0
 8002eda:	f7fd ffd1 	bl	8000e80 <chSemWait>
      chSemSignal(&sem1);
 8002ede:	1c20      	adds	r0, r4, #0
 8002ee0:	f7fd ff6e 	bl	8000dc0 <chSemSignal>
      chSemWait(&sem1);
 8002ee4:	1c20      	adds	r0, r4, #0
 8002ee6:	f7fd ffcb 	bl	8000e80 <chSemWait>
      chSemSignal(&sem1);
 8002eea:	1c20      	adds	r0, r4, #0
 8002eec:	f7fd ff68 	bl	8000dc0 <chSemSignal>
 8002ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ef2:	4641      	mov	r1, r8
      n++;
 8002ef4:	3501      	adds	r5, #1
 8002ef6:	1a42      	subs	r2, r0, r1
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8002ef8:	42b2      	cmp	r2, r6
 8002efa:	d9e1      	bls.n	8002ec0 <test_012_010_execute.9656+0x20>
  }

  /* [12.10.2] The score is printed.*/
  test_set_step(2);
 8002efc:	2302      	movs	r3, #2
 8002efe:	464c      	mov	r4, r9
 8002f00:	6023      	str	r3, [r4, #0]
  {
    test_print("--- Score : ");
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <test_012_010_execute.9656+0x88>)
 8002f04:	f7fd fc44 	bl	8000790 <test_print>
    test_printn(n * 4);
 8002f08:	00a8      	lsls	r0, r5, #2
 8002f0a:	f7fd fc59 	bl	80007c0 <test_printn>
    test_println(" wait+signal/S");
 8002f0e:	4807      	ldr	r0, [pc, #28]	; (8002f2c <test_012_010_execute.9656+0x8c>)
 8002f10:	f7fd fc1e 	bl	8000750 <test_println>
  }
}
 8002f14:	bc0c      	pop	{r2, r3}
 8002f16:	4690      	mov	r8, r2
 8002f18:	4699      	mov	r9, r3
 8002f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f1c:	2000106c 	.word	0x2000106c
 8002f20:	20000514 	.word	0x20000514
 8002f24:	0000270f 	.word	0x0000270f
 8002f28:	08006424 	.word	0x08006424
 8002f2c:	08006450 	.word	0x08006450

08002f30 <test_012_008_execute.9664>:
 * - [12.8.2] Waiting one second then terminating the 5 threads.
 * - [12.8.3] The score is printed.
 * .
 */

static void test_012_008_execute(void) {
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f32:	4647      	mov	r7, r8
 8002f34:	b480      	push	{r7}
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 8002f36:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <test_012_008_execute.9664+0xbc>)
 8002f38:	2301      	movs	r3, #1
 * - [12.8.2] Waiting one second then terminating the 5 threads.
 * - [12.8.3] The score is printed.
 * .
 */

static void test_012_008_execute(void) {
 8002f3a:	b082      	sub	sp, #8
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 8002f3c:	6013      	str	r3, [r2, #0]
  {
    n = 0;
 8002f3e:	2000      	movs	r0, #0
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 8002f40:	4690      	mov	r8, r2
  {
    n = 0;
 8002f42:	9001      	str	r0, [sp, #4]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f44:	f002 fa84 	bl	8005450 <test_wait_tick>
 8002f48:	4e29      	ldr	r6, [pc, #164]	; (8002ff0 <test_012_008_execute.9664+0xc0>)
 8002f4a:	4f2a      	ldr	r7, [pc, #168]	; (8002ff4 <test_012_008_execute.9664+0xc4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8002f4c:	69b1      	ldr	r1, [r6, #24]
 8002f4e:	4d2a      	ldr	r5, [pc, #168]	; (8002ff8 <test_012_008_execute.9664+0xc8>)
 8002f50:	6889      	ldr	r1, [r1, #8]
 8002f52:	1c2a      	adds	r2, r5, #0
 8002f54:	ab01      	add	r3, sp, #4
 8002f56:	3901      	subs	r1, #1
 8002f58:	1c38      	adds	r0, r7, #0
 8002f5a:	f7fe fc21 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002f5e:	69b1      	ldr	r1, [r6, #24]
 8002f60:	4c26      	ldr	r4, [pc, #152]	; (8002ffc <test_012_008_execute.9664+0xcc>)

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f62:	22a4      	movs	r2, #164	; 0xa4
 8002f64:	6889      	ldr	r1, [r1, #8]
 8002f66:	0053      	lsls	r3, r2, #1
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
  {
    n = 0;
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f68:	6020      	str	r0, [r4, #0]

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f6a:	1c2a      	adds	r2, r5, #0
 8002f6c:	18f8      	adds	r0, r7, r3
 8002f6e:	3901      	subs	r1, #1
 8002f70:	ab01      	add	r3, sp, #4
 8002f72:	f7fe fc15 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002f76:	69b3      	ldr	r3, [r6, #24]
 8002f78:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	20a4      	movs	r0, #164	; 0xa4
 8002f7e:	0082      	lsls	r2, r0, #2
 8002f80:	18b8      	adds	r0, r7, r2
 8002f82:	ab01      	add	r3, sp, #4
 8002f84:	1c2a      	adds	r2, r5, #0
 8002f86:	3901      	subs	r1, #1
 8002f88:	f7fe fc0a 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8002f8c:	69b2      	ldr	r2, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f8e:	21f6      	movs	r1, #246	; 0xf6
  {
    n = 0;
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f90:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002f92:	0088      	lsls	r0, r1, #2
 8002f94:	6891      	ldr	r1, [r2, #8]
 8002f96:	ab01      	add	r3, sp, #4
 8002f98:	1c2a      	adds	r2, r5, #0
 8002f9a:	1838      	adds	r0, r7, r0
 8002f9c:	3901      	subs	r1, #1
 8002f9e:	f7fe fbff 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002fa2:	23a4      	movs	r3, #164	; 0xa4
 8002fa4:	00d9      	lsls	r1, r3, #3
    n = 0;
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002fa6:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002fa8:	1878      	adds	r0, r7, r1
 8002faa:	69b7      	ldr	r7, [r6, #24]
 8002fac:	1c2a      	adds	r2, r5, #0
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	ab01      	add	r3, sp, #4
 8002fb2:	3901      	subs	r1, #1
 8002fb4:	f7fe fbf4 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
 8002fb8:	4645      	mov	r5, r8
 8002fba:	2602      	movs	r6, #2
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8002fbc:	6120      	str	r0, [r4, #16]
  }

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
 8002fbe:	602e      	str	r6, [r5, #0]
  {
    chThdSleepSeconds(1);
 8002fc0:	480f      	ldr	r0, [pc, #60]	; (8003000 <test_012_008_execute.9664+0xd0>)
    test_terminate_threads();
    test_wait_threads();
  }

  /* [12.8.3] The score is printed.*/
  test_set_step(3);
 8002fc2:	2403      	movs	r4, #3
  }

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
  {
    chThdSleepSeconds(1);
 8002fc4:	f002 fa3c 	bl	8005440 <chThdSleep>
    test_terminate_threads();
 8002fc8:	f7fd fb52 	bl	8000670 <test_terminate_threads>
    test_wait_threads();
 8002fcc:	f7fe f9e0 	bl	8001390 <test_wait_threads>
  }

  /* [12.8.3] The score is printed.*/
  test_set_step(3);
 8002fd0:	602c      	str	r4, [r5, #0]
  {
    test_print("--- Score : ");
 8002fd2:	480c      	ldr	r0, [pc, #48]	; (8003004 <test_012_008_execute.9664+0xd4>)
 8002fd4:	f7fd fbdc 	bl	8000790 <test_print>
    test_printn(n);
 8002fd8:	9801      	ldr	r0, [sp, #4]
 8002fda:	f7fd fbf1 	bl	80007c0 <test_printn>
    test_println(" ctxswc/S");
 8002fde:	480a      	ldr	r0, [pc, #40]	; (8003008 <test_012_008_execute.9664+0xd8>)
 8002fe0:	f7fd fbb6 	bl	8000750 <test_println>
  }
}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bc04      	pop	{r2}
 8002fe8:	4690      	mov	r8, r2
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fec:	2000106c 	.word	0x2000106c
 8002ff0:	20000ff8 	.word	0x20000ff8
 8002ff4:	20000558 	.word	0x20000558
 8002ff8:	08000531 	.word	0x08000531
 8002ffc:	20000bd0 	.word	0x20000bd0
 8003000:	00002710 	.word	0x00002710
 8003004:	08006424 	.word	0x08006424
 8003008:	08006460 	.word	0x08006460
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46c0      	nop			; (mov r8, r8)

08003010 <test_012_007_execute.9666>:

static void test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}

static void test_012_007_execute(void) {
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	464f      	mov	r7, r9
 8003014:	4646      	mov	r6, r8
 8003016:	b4c0      	push	{r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8003018:	4e39      	ldr	r6, [pc, #228]	; (8003100 <test_012_007_execute.9666+0xf0>)

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800301a:	4f3a      	ldr	r7, [pc, #232]	; (8003104 <test_012_007_execute.9666+0xf4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 800301c:	69b0      	ldr	r0, [r6, #24]
 800301e:	4d3a      	ldr	r5, [pc, #232]	; (8003108 <test_012_007_execute.9666+0xf8>)
static void test_012_007_execute(void) {
  uint32_t n;

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
 8003020:	4a3a      	ldr	r2, [pc, #232]	; (800310c <test_012_007_execute.9666+0xfc>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8003022:	6881      	ldr	r1, [r0, #8]
static void test_012_007_execute(void) {
  uint32_t n;

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
 8003024:	2301      	movs	r3, #1
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4691      	mov	r9, r2
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800302a:	3105      	adds	r1, #5
 800302c:	1c2a      	adds	r2, r5, #0
 800302e:	1c38      	adds	r0, r7, #0
 8003030:	2300      	movs	r3, #0
 8003032:	f7fe fbb5 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8003036:	69b3      	ldr	r3, [r6, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8003038:	21a4      	movs	r1, #164	; 0xa4

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800303a:	4c35      	ldr	r4, [pc, #212]	; (8003110 <test_012_007_execute.9666+0x100>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800303c:	004a      	lsls	r2, r1, #1
 800303e:	6899      	ldr	r1, [r3, #8]

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8003040:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8003042:	3104      	adds	r1, #4
 8003044:	18b8      	adds	r0, r7, r2
 8003046:	2300      	movs	r3, #0
 8003048:	1c2a      	adds	r2, r5, #0
 800304a:	f7fe fba9 	bl	80017a0 <chThdCreateStatic.constprop.56>
 800304e:	69b2      	ldr	r2, [r6, #24]
 8003050:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8003052:	20a4      	movs	r0, #164	; 0xa4
 8003054:	0081      	lsls	r1, r0, #2
 8003056:	1878      	adds	r0, r7, r1
 8003058:	6891      	ldr	r1, [r2, #8]
 800305a:	2300      	movs	r3, #0
 800305c:	1c2a      	adds	r2, r5, #0
 800305e:	3103      	adds	r1, #3
 8003060:	f7fe fb9e 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8003064:	69b1      	ldr	r1, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8003066:	23f6      	movs	r3, #246	; 0xf6
 8003068:	6889      	ldr	r1, [r1, #8]
     immediately enqueue on a semaphore.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800306a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800306c:	0098      	lsls	r0, r3, #2
 800306e:	1c2a      	adds	r2, r5, #0
 8003070:	1838      	adds	r0, r7, r0
 8003072:	3102      	adds	r1, #2
 8003074:	2300      	movs	r3, #0
 8003076:	f7fe fb93 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800307a:	22a4      	movs	r2, #164	; 0xa4
 800307c:	00d3      	lsls	r3, r2, #3
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800307e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8003080:	18f8      	adds	r0, r7, r3
 8003082:	69b7      	ldr	r7, [r6, #24]
 8003084:	1c2a      	adds	r2, r5, #0
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	2300      	movs	r3, #0
 800308a:	3101      	adds	r1, #1
 800308c:	f7fe fb88 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [12.7.2] The semaphore is reset waking up the five threads. The
     operation is repeated continuously in a one-second time window.*/
  test_set_step(2);
 8003090:	2602      	movs	r6, #2
 8003092:	464d      	mov	r5, r9
 8003094:	602e      	str	r6, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8003096:	6120      	str	r0, [r4, #16]
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 8003098:	f002 f9da 	bl	8005450 <test_wait_tick>
      chSemReset(&sem1, 0);
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800309c:	4e1d      	ldr	r6, [pc, #116]	; (8003114 <test_012_007_execute.9666+0x104>)
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 800309e:	4680      	mov	r8, r0
 80030a0:	4d1d      	ldr	r5, [pc, #116]	; (8003118 <test_012_007_execute.9666+0x108>)
 80030a2:	2080      	movs	r0, #128	; 0x80
     operation is repeated continuously in a one-second time window.*/
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
 80030a4:	2400      	movs	r4, #0
 80030a6:	05c7      	lsls	r7, r0, #23
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSemReset(&sem1, 0);
 80030a8:	2100      	movs	r1, #0
 80030aa:	1c28      	adds	r0, r5, #0
 80030ac:	f7fe fa28 	bl	8001500 <chSemReset>
 80030b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b2:	4642      	mov	r2, r8
      n++;
 80030b4:	3401      	adds	r4, #1
 80030b6:	1a8b      	subs	r3, r1, r2
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80030b8:	42b3      	cmp	r3, r6
 80030ba:	d9f5      	bls.n	80030a8 <test_012_007_execute.9666+0x98>
  }

  /* [12.7.3] The five threads are terminated.*/
  test_set_step(3);
 80030bc:	464f      	mov	r7, r9
 80030be:	2003      	movs	r0, #3
 80030c0:	6038      	str	r0, [r7, #0]
  {
    test_terminate_threads();
 80030c2:	f7fd fad5 	bl	8000670 <test_terminate_threads>
    chSemReset(&sem1, 0);
 80030c6:	2100      	movs	r1, #0
 80030c8:	1c28      	adds	r0, r5, #0
    test_wait_threads();
  }

  /* [12.7.4] The score is printed.*/
  test_set_step(4);
 80030ca:	2504      	movs	r5, #4

  /* [12.7.3] The five threads are terminated.*/
  test_set_step(3);
  {
    test_terminate_threads();
    chSemReset(&sem1, 0);
 80030cc:	f7fe fa18 	bl	8001500 <chSemReset>
    test_wait_threads();
 80030d0:	f7fe f95e 	bl	8001390 <test_wait_threads>
  }

  /* [12.7.4] The score is printed.*/
  test_set_step(4);
 80030d4:	603d      	str	r5, [r7, #0]
  {
    test_print("--- Score : ");
 80030d6:	4811      	ldr	r0, [pc, #68]	; (800311c <test_012_007_execute.9666+0x10c>)
 80030d8:	f7fd fb5a 	bl	8000790 <test_print>
    test_printn(n);
 80030dc:	1c20      	adds	r0, r4, #0
 80030de:	f7fd fb6f 	bl	80007c0 <test_printn>
    test_print(" reschedules/S, ");
 80030e2:	480f      	ldr	r0, [pc, #60]	; (8003120 <test_012_007_execute.9666+0x110>)
 80030e4:	f7fd fb54 	bl	8000790 <test_print>
    test_printn(n * 6);
 80030e8:	0061      	lsls	r1, r4, #1
 80030ea:	190c      	adds	r4, r1, r4
 80030ec:	0060      	lsls	r0, r4, #1
 80030ee:	f7fd fb67 	bl	80007c0 <test_printn>
    test_println(" ctxswc/S");
 80030f2:	480c      	ldr	r0, [pc, #48]	; (8003124 <test_012_007_execute.9666+0x114>)
 80030f4:	f7fd fb2c 	bl	8000750 <test_println>
  }
}
 80030f8:	bc0c      	pop	{r2, r3}
 80030fa:	4690      	mov	r8, r2
 80030fc:	4699      	mov	r9, r3
 80030fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003100:	20000ff8 	.word	0x20000ff8
 8003104:	20000558 	.word	0x20000558
 8003108:	08000ec1 	.word	0x08000ec1
 800310c:	2000106c 	.word	0x2000106c
 8003110:	20000bd0 	.word	0x20000bd0
 8003114:	0000270f 	.word	0x0000270f
 8003118:	20000514 	.word	0x20000514
 800311c:	08006424 	.word	0x08006424
 8003120:	0800646c 	.word	0x0800646c
 8003124:	08006460 	.word	0x08006460
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46c0      	nop			; (mov r8, r8)

08003130 <test_012_006_execute.9668>:
 *   one-second time window.
 * - [12.6.2] Score is printed.
 * .
 */

static void test_012_006_execute(void) {
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <test_012_006_execute.9668+0x74>)
 8003134:	465f      	mov	r7, fp
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8003136:	6998      	ldr	r0, [r3, #24]
 8003138:	4656      	mov	r6, sl
 800313a:	464d      	mov	r5, r9
 800313c:	4644      	mov	r4, r8
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <test_012_006_execute.9668+0x78>)
 * .
 */

static void test_012_006_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() + 1;
 8003140:	6881      	ldr	r1, [r0, #8]
 *   one-second time window.
 * - [12.6.2] Score is printed.
 * .
 */

static void test_012_006_execute(void) {
 8003142:	b4f0      	push	{r4, r5, r6, r7}
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8003144:	2401      	movs	r4, #1
 * .
 */

static void test_012_006_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() + 1;
 8003146:	3101      	adds	r1, #1
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 8003148:	6014      	str	r4, [r2, #0]
 * .
 */

static void test_012_006_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() + 1;
 800314a:	468a      	mov	sl, r1
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 800314c:	4693      	mov	fp, r2
  {
    n = 0;
    start = test_wait_tick();
 800314e:	f002 f97f 	bl	8005450 <test_wait_tick>
 8003152:	4d16      	ldr	r5, [pc, #88]	; (80031ac <test_012_006_execute.9668+0x7c>)
 8003154:	2680      	movs	r6, #128	; 0x80
 8003156:	46a8      	mov	r8, r5
 8003158:	4f15      	ldr	r7, [pc, #84]	; (80031b0 <test_012_006_execute.9668+0x80>)
#endif
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800315a:	4d16      	ldr	r5, [pc, #88]	; (80031b4 <test_012_006_execute.9668+0x84>)
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
  {
    n = 0;
    start = test_wait_tick();
 800315c:	4681      	mov	r9, r0
  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
  {
    n = 0;
 800315e:	2400      	movs	r4, #0
 8003160:	05f6      	lsls	r6, r6, #23
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
#if CH_CFG_USE_REGISTRY
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8003162:	4651      	mov	r1, sl
 8003164:	2300      	movs	r3, #0
 8003166:	1c3a      	adds	r2, r7, #0
 8003168:	4640      	mov	r0, r8
 800316a:	f7fe fb19 	bl	80017a0 <chThdCreateStatic.constprop.56>
 800316e:	f7fe f8c7 	bl	8001300 <chThdRelease>
 8003172:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003174:	4648      	mov	r0, r9
#else
      chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL);
#endif
      n++;
 8003176:	3401      	adds	r4, #1
 8003178:	1a19      	subs	r1, r3, r0
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800317a:	42a9      	cmp	r1, r5
 800317c:	d9f1      	bls.n	8003162 <test_012_006_execute.9668+0x32>
  }

  /* [12.6.2] Score is printed.*/
  test_set_step(2);
 800317e:	465a      	mov	r2, fp
 8003180:	2702      	movs	r7, #2
 8003182:	6017      	str	r7, [r2, #0]
  {
    test_print("--- Score : ");
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <test_012_006_execute.9668+0x88>)
 8003186:	f7fd fb03 	bl	8000790 <test_print>
    test_printn(n);
 800318a:	1c20      	adds	r0, r4, #0
 800318c:	f7fd fb18 	bl	80007c0 <test_printn>
    test_println(" threads/S");
 8003190:	480a      	ldr	r0, [pc, #40]	; (80031bc <test_012_006_execute.9668+0x8c>)
 8003192:	f7fd fadd 	bl	8000750 <test_println>
  }
}
 8003196:	bc3c      	pop	{r2, r3, r4, r5}
 8003198:	4690      	mov	r8, r2
 800319a:	4699      	mov	r9, r3
 800319c:	46a2      	mov	sl, r4
 800319e:	46ab      	mov	fp, r5
 80031a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	20000ff8 	.word	0x20000ff8
 80031a8:	2000106c 	.word	0x2000106c
 80031ac:	20000558 	.word	0x20000558
 80031b0:	08004f21 	.word	0x08004f21
 80031b4:	0000270f 	.word	0x0000270f
 80031b8:	08006424 	.word	0x08006424
 80031bc:	08006480 	.word	0x08006480

080031c0 <test_012_005_execute.9670>:
 *   repeated continuously in a one-second time window.
 * - [12.5.2] Score is printed.
 * .
 */

static void test_012_005_execute(void) {
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <test_012_005_execute.9670+0x74>)
 80031c4:	465f      	mov	r7, fp
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80031c6:	6998      	ldr	r0, [r3, #24]
 80031c8:	4656      	mov	r6, sl
 80031ca:	464d      	mov	r5, r9
 80031cc:	4644      	mov	r4, r8
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 80031ce:	4a1a      	ldr	r2, [pc, #104]	; (8003238 <test_012_005_execute.9670+0x78>)
 * .
 */

static void test_012_005_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() - 1;
 80031d0:	6881      	ldr	r1, [r0, #8]
 *   repeated continuously in a one-second time window.
 * - [12.5.2] Score is printed.
 * .
 */

static void test_012_005_execute(void) {
 80031d2:	b4f0      	push	{r4, r5, r6, r7}
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 80031d4:	2401      	movs	r4, #1
 * .
 */

static void test_012_005_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() - 1;
 80031d6:	3901      	subs	r1, #1
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 80031d8:	6014      	str	r4, [r2, #0]
 * .
 */

static void test_012_005_execute(void) {
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() - 1;
 80031da:	468a      	mov	sl, r1
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 80031dc:	4693      	mov	fp, r2
  {
    n = 0;
    start = test_wait_tick();
 80031de:	f002 f937 	bl	8005450 <test_wait_tick>
 80031e2:	4d16      	ldr	r5, [pc, #88]	; (800323c <test_012_005_execute.9670+0x7c>)
 80031e4:	2680      	movs	r6, #128	; 0x80
 80031e6:	46a8      	mov	r8, r5
 80031e8:	4f15      	ldr	r7, [pc, #84]	; (8003240 <test_012_005_execute.9670+0x80>)
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80031ea:	4d16      	ldr	r5, [pc, #88]	; (8003244 <test_012_005_execute.9670+0x84>)
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    n = 0;
    start = test_wait_tick();
 80031ec:	4681      	mov	r9, r0
  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
  {
    n = 0;
 80031ee:	2400      	movs	r4, #0
 80031f0:	05f6      	lsls	r6, r6, #23
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80031f2:	4651      	mov	r1, sl
 80031f4:	2300      	movs	r3, #0
 80031f6:	1c3a      	adds	r2, r7, #0
 80031f8:	4640      	mov	r0, r8
 80031fa:	f7fe fad1 	bl	80017a0 <chThdCreateStatic.constprop.56>
 80031fe:	f7fe f8af 	bl	8001360 <chThdWait>
 8003202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003204:	4648      	mov	r0, r9
      n++;
 8003206:	3401      	adds	r4, #1
 8003208:	1a19      	subs	r1, r3, r0
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800320a:	42a9      	cmp	r1, r5
 800320c:	d9f1      	bls.n	80031f2 <test_012_005_execute.9670+0x32>
  }

  /* [12.5.2] Score is printed.*/
  test_set_step(2);
 800320e:	465a      	mov	r2, fp
 8003210:	2702      	movs	r7, #2
 8003212:	6017      	str	r7, [r2, #0]
  {
    test_print("--- Score : ");
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <test_012_005_execute.9670+0x88>)
 8003216:	f7fd fabb 	bl	8000790 <test_print>
    test_printn(n);
 800321a:	1c20      	adds	r0, r4, #0
 800321c:	f7fd fad0 	bl	80007c0 <test_printn>
    test_println(" threads/S");
 8003220:	480a      	ldr	r0, [pc, #40]	; (800324c <test_012_005_execute.9670+0x8c>)
 8003222:	f7fd fa95 	bl	8000750 <test_println>
  }
}
 8003226:	bc3c      	pop	{r2, r3, r4, r5}
 8003228:	4690      	mov	r8, r2
 800322a:	4699      	mov	r9, r3
 800322c:	46a2      	mov	sl, r4
 800322e:	46ab      	mov	fp, r5
 8003230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	20000ff8 	.word	0x20000ff8
 8003238:	2000106c 	.word	0x2000106c
 800323c:	20000558 	.word	0x20000558
 8003240:	08004f21 	.word	0x08004f21
 8003244:	0000270f 	.word	0x0000270f
 8003248:	08006424 	.word	0x08006424
 800324c:	08006480 	.word	0x08006480

08003250 <chMtxTryLock.constprop.49>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003250:	b672      	cpsid	i
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <chMtxTryLock.constprop.49+0x20>)
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 8003254:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8003256:	6899      	ldr	r1, [r3, #8]
 8003258:	2900      	cmp	r1, #0
 800325a:	d001      	beq.n	8003260 <chMtxTryLock.constprop.49+0x10>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800325c:	b662      	cpsie	i
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 800325e:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <chMtxTryLock.constprop.49+0x24>)
 8003262:	6990      	ldr	r0, [r2, #24]
  mp->next = currp->mtxlist;
 8003264:	6b81      	ldr	r1, [r0, #56]	; 0x38

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8003266:	6098      	str	r0, [r3, #8]
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
 8003268:	6383      	str	r3, [r0, #56]	; 0x38
  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
  mp->next = currp->mtxlist;
 800326a:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 800326c:	2001      	movs	r0, #1
 800326e:	e7f5      	b.n	800325c <chMtxTryLock.constprop.49+0xc>
 8003270:	20000420 	.word	0x20000420
 8003274:	20000ff8 	.word	0x20000ff8
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46c0      	nop			; (mov r8, r8)

08003280 <test_005_009_setup.8566>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003280:	4806      	ldr	r0, [pc, #24]	; (800329c <test_005_009_setup.8566+0x1c>)
 8003282:	4907      	ldr	r1, [pc, #28]	; (80032a0 <test_005_009_setup.8566+0x20>)
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <test_005_009_setup.8566+0x24>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8003286:	2200      	movs	r2, #0
 8003288:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800328a:	605b      	str	r3, [r3, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800328c:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 800328e:	6040      	str	r0, [r0, #4]
 8003290:	6082      	str	r2, [r0, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003292:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8003294:	6049      	str	r1, [r1, #4]
 8003296:	608a      	str	r2, [r1, #8]

static void test_005_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8003298:	4770      	bx	lr
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	20000420 	.word	0x20000420
 80032a0:	20000460 	.word	0x20000460
 80032a4:	20000418 	.word	0x20000418
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46c0      	nop			; (mov r8, r8)

080032b0 <test_005_008_setup.8568>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <test_005_008_setup.8568+0x14>)
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <test_005_008_setup.8568+0x18>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80032b8:	605b      	str	r3, [r3, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80032ba:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 80032bc:	6040      	str	r0, [r0, #4]
 80032be:	6082      	str	r2, [r0, #8]
 */

static void test_005_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 80032c0:	4770      	bx	lr
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	20000420 	.word	0x20000420
 80032c8:	20000418 	.word	0x20000418
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46c0      	nop			; (mov r8, r8)

080032d0 <test_005_007_setup.8570>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <test_005_007_setup.8570+0x14>)
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <test_005_007_setup.8570+0x18>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80032d8:	605b      	str	r3, [r3, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80032da:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 80032dc:	6040      	str	r0, [r0, #4]
 80032de:	6082      	str	r2, [r0, #8]
 */

static void test_005_007_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 80032e0:	4770      	bx	lr
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000420 	.word	0x20000420
 80032e8:	20000418 	.word	0x20000418
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46c0      	nop			; (mov r8, r8)

080032f0 <test_009_003_setup.9227>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <test_009_003_setup.9227+0x14>)
 80032f2:	2200      	movs	r2, #0
  mp->object_size = size;
 80032f4:	2104      	movs	r1, #4
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 80032f6:	60da      	str	r2, [r3, #12]
  mp->object_size = size;
 80032f8:	6119      	str	r1, [r3, #16]
  mp->provider = provider;
 80032fa:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80032fc:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80032fe:	605b      	str	r3, [r3, #4]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8003300:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_009_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8003302:	4770      	bx	lr
 8003304:	20000400 	.word	0x20000400
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46c0      	nop			; (mov r8, r8)

08003310 <test_012_011_setup.9654>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003310:	4b02      	ldr	r3, [pc, #8]	; (800331c <test_012_011_setup.9654+0xc>)
 8003312:	2200      	movs	r2, #0
 8003314:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003316:	605b      	str	r3, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800331a:	4770      	bx	lr
 800331c:	20000520 	.word	0x20000520

08003320 <test_005_005_setup.8572>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <test_005_005_setup.8572+0xc>)
 8003322:	2200      	movs	r2, #0
 8003324:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003326:	605b      	str	r3, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_005_005_setup(void) {
  chMtxObjectInit(&m1);
}
 800332a:	4770      	bx	lr
 800332c:	20000420 	.word	0x20000420

08003330 <test_005_004_setup.8574>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <test_005_004_setup.8574+0x14>)
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <test_005_004_setup.8574+0x18>)
 8003334:	2200      	movs	r2, #0
 8003336:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003338:	605b      	str	r3, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800333c:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 800333e:	6040      	str	r0, [r0, #4]
 8003340:	6082      	str	r2, [r0, #8]
 */

static void test_005_004_setup(void) {
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8003342:	4770      	bx	lr
 8003344:	20000420 	.word	0x20000420
 8003348:	20000460 	.word	0x20000460
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46c0      	nop			; (mov r8, r8)

08003350 <test_005_001_setup.8576>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <test_005_001_setup.8576+0xc>)
 8003352:	2200      	movs	r2, #0
 8003354:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003356:	605b      	str	r3, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_005_001_setup(void) {
  chMtxObjectInit(&m1);
}
 800335a:	4770      	bx	lr
 800335c:	20000420 	.word	0x20000420

08003360 <test_008_002_setup.9102>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <test_008_002_setup.9102+0x28>)
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <test_008_002_setup.9102+0x2c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003364:	1c18      	adds	r0, r3, #0
 8003366:	601a      	str	r2, [r3, #0]
  mbp->rdptr = buf;
 8003368:	60da      	str	r2, [r3, #12]
  mbp->wrptr = buf;
 800336a:	609a      	str	r2, [r3, #8]
  mbp->top = &buf[n];
 800336c:	3210      	adds	r2, #16
 800336e:	301c      	adds	r0, #28
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	1c1a      	adds	r2, r3, #0
 8003374:	3210      	adds	r2, #16
 8003376:	61d8      	str	r0, [r3, #28]
  tqp->prev = (thread_t *)tqp;
 8003378:	6218      	str	r0, [r3, #32]
 800337a:	2104      	movs	r1, #4
 800337c:	2000      	movs	r0, #0
 800337e:	6259      	str	r1, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003380:	611a      	str	r2, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	6198      	str	r0, [r3, #24]
 * .
 */

static void test_008_002_setup(void) {
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8003386:	4770      	bx	lr
 8003388:	20000438 	.word	0x20000438
 800338c:	20000bc0 	.word	0x20000bc0

08003390 <test_009_002_setup.9229>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <test_009_002_setup.9229+0x14>)
 8003392:	2200      	movs	r2, #0
  mp->object_size = size;
 8003394:	2104      	movs	r1, #4
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003396:	60da      	str	r2, [r3, #12]
  mp->object_size = size;
 8003398:	6119      	str	r1, [r3, #16]
  mp->provider = provider;
 800339a:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800339c:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800339e:	605b      	str	r3, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_009_002_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 80033a2:	4770      	bx	lr
 80033a4:	20000400 	.word	0x20000400
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46c0      	nop			; (mov r8, r8)

080033b0 <test_004_005_setup.8352>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <test_004_005_setup.8352+0xc>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80033b6:	605b      	str	r3, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_004_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80033ba:	4770      	bx	lr
 80033bc:	20000508 	.word	0x20000508

080033c0 <test_004_004_setup.8354>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <test_004_004_setup.8354+0xc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80033c6:	605b      	str	r3, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_004_004_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80033ca:	4770      	bx	lr
 80033cc:	20000508 	.word	0x20000508

080033d0 <test_004_003_setup.8356>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <test_004_003_setup.8356+0xc>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80033d6:	605b      	str	r3, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_004_003_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80033da:	4770      	bx	lr
 80033dc:	20000508 	.word	0x20000508

080033e0 <test_004_002_setup.8358>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80033e0:	4b02      	ldr	r3, [pc, #8]	; (80033ec <test_004_002_setup.8358+0xc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80033e6:	605b      	str	r3, [r3, #4]
 80033e8:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_004_002_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80033ea:	4770      	bx	lr
 80033ec:	20000508 	.word	0x20000508

080033f0 <test_004_001_setup.8360>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <test_004_001_setup.8360+0xc>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80033f6:	605b      	str	r3, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_004_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 80033fa:	4770      	bx	lr
 80033fc:	20000508 	.word	0x20000508

08003400 <test_012_010_setup.9658>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <test_012_010_setup.9658+0xc>)
 8003402:	2201      	movs	r2, #1
 8003404:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003406:	605b      	str	r3, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 800340a:	4770      	bx	lr
 800340c:	20000514 	.word	0x20000514

08003410 <test_012_007_setup.9660>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <test_012_007_setup.9660+0xc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003416:	605b      	str	r3, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800341a:	4770      	bx	lr
 800341c:	20000514 	.word	0x20000514

08003420 <test_011_002_setup.9484>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <test_011_002_setup.9484+0x10>)
  mp->object_size = size;
 8003422:	21a4      	movs	r1, #164	; 0xa4
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003424:	2200      	movs	r2, #0
  mp->object_size = size;
 8003426:	0048      	lsls	r0, r1, #1
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8003428:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 800342a:	6058      	str	r0, [r3, #4]
  mp->provider = provider;
 800342c:	609a      	str	r2, [r3, #8]
 * .
 */

static void test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 800342e:	4770      	bx	lr
 8003430:	20000be4 	.word	0x20000be4
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46c0      	nop			; (mov r8, r8)

08003440 <Vector7C>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	4646      	mov	r6, r8
 8003444:	464f      	mov	r7, r9
 8003446:	b4c0      	push	{r6, r7}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003448:	2680      	movs	r6, #128	; 0x80
 800344a:	05f6      	lsls	r6, r6, #23
 800344c:	6933      	ldr	r3, [r6, #16]
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 800344e:	46f0      	mov	r8, lr

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003450:	0798      	lsls	r0, r3, #30
 8003452:	d406      	bmi.n	8003462 <Vector7C+0x22>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003454:	4640      	mov	r0, r8
 8003456:	f7fd fb53 	bl	8000b00 <_port_irq_epilogue>
}
 800345a:	bc0c      	pop	{r2, r3}
 800345c:	4690      	mov	r8, r2
 800345e:	4699      	mov	r9, r3
 8003460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8003462:	2000      	movs	r0, #0
 8003464:	6130      	str	r0, [r6, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003466:	b672      	cpsid	i
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8003468:	4c18      	ldr	r4, [pc, #96]	; (80034cc <Vector7C+0x8c>)
 800346a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800346c:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800346e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	1a45      	subs	r5, r0, r1
 8003474:	4295      	cmp	r5, r2
 8003476:	d318      	bcc.n	80034aa <Vector7C+0x6a>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8003478:	1c25      	adds	r5, r4, #0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 800347a:	2700      	movs	r7, #0
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800347c:	351c      	adds	r5, #28
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 800347e:	46b9      	mov	r9, r7
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8003480:	681f      	ldr	r7, [r3, #0]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8003482:	188a      	adds	r2, r1, r2

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8003484:	4648      	mov	r0, r9
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8003486:	62a2      	str	r2, [r4, #40]	; 0x28

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8003488:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800348a:	607d      	str	r5, [r7, #4]
    ch.vtlist.next = vtp->next;
 800348c:	61e7      	str	r7, [r4, #28]
    fn = vtp->func;
    vtp->func = NULL;
 800348e:	60d8      	str	r0, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8003490:	42af      	cmp	r7, r5
 8003492:	d017      	beq.n	80034c4 <Vector7C+0x84>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003494:	b662      	cpsie	i
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8003496:	6918      	ldr	r0, [r3, #16]
 8003498:	4788      	blx	r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800349a:	b672      	cpsid	i
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 800349c:	69e3      	ldr	r3, [r4, #28]
 800349e:	6a70      	ldr	r0, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80034a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	1a47      	subs	r7, r0, r1
 80034a6:	42ba      	cmp	r2, r7
 80034a8:	d9ea      	bls.n	8003480 <Vector7C+0x40>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80034aa:	4e09      	ldr	r6, [pc, #36]	; (80034d0 <Vector7C+0x90>)
 80034ac:	42b3      	cmp	r3, r6
 80034ae:	d007      	beq.n	80034c0 <Vector7C+0x80>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 80034b0:	188c      	adds	r4, r1, r2
 80034b2:	1a25      	subs	r5, r4, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80034b4:	2d01      	cmp	r5, #1
 80034b6:	d907      	bls.n	80034c8 <Vector7C+0x88>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80034b8:	2380      	movs	r3, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80034ba:	1828      	adds	r0, r5, r0
 80034bc:	05da      	lsls	r2, r3, #23
 80034be:	6350      	str	r0, [r2, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80034c0:	b662      	cpsie	i
 80034c2:	e7c7      	b.n	8003454 <Vector7C+0x14>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80034c4:	60f0      	str	r0, [r6, #12]
 80034c6:	e7e5      	b.n	8003494 <Vector7C+0x54>
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80034c8:	2502      	movs	r5, #2
 80034ca:	e7f5      	b.n	80034b8 <Vector7C+0x78>
 80034cc:	20000ff8 	.word	0x20000ff8
 80034d0:	20001014 	.word	0x20001014
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46c0      	nop			; (mov r8, r8)

080034e0 <test_002_004_execute.7945>:
 * - [2.4.3] Raising thread priority above the boosted level.
 * - [2.4.4] Restoring original conditions.
 * .
 */

static void test_002_004_execute(void) {
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	464e      	mov	r6, r9
 80034e4:	4645      	mov	r5, r8
 80034e6:	4657      	mov	r7, sl
 80034e8:	b4e0      	push	{r5, r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80034ea:	4d2f      	ldr	r5, [pc, #188]	; (80035a8 <test_002_004_execute.7945+0xc8>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 80034ec:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <test_002_004_execute.7945+0xcc>)
 80034ee:	69ab      	ldr	r3, [r5, #24]
 80034f0:	2002      	movs	r0, #2
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80034f2:	689c      	ldr	r4, [r3, #8]
 80034f4:	6010      	str	r0, [r2, #0]

  /* [2.4.1] Simulating a priority boost situation (prio > realprio).*/
  test_set_step(1);
  {
    prio = chThdGetPriorityX();
    chThdGetSelfX()->prio += 2;
 80034f6:	1ca6      	adds	r6, r4, #2

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
  {
    p1 = chThdSetPriority(prio + 1);
 80034f8:	1c67      	adds	r7, r4, #1

  /* [2.4.1] Simulating a priority boost situation (prio > realprio).*/
  test_set_step(1);
  {
    prio = chThdGetPriorityX();
    chThdGetSelfX()->prio += 2;
 80034fa:	609e      	str	r6, [r3, #8]

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
  {
    p1 = chThdSetPriority(prio + 1);
 80034fc:	1c38      	adds	r0, r7, #0
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 80034fe:	4690      	mov	r8, r2
  {
    p1 = chThdSetPriority(prio + 1);
 8003500:	f7fd fbb6 	bl	8000c70 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8003504:	492a      	ldr	r1, [pc, #168]	; (80035b0 <test_002_004_execute.7945+0xd0>)
 8003506:	1b00      	subs	r0, r0, r4
 8003508:	4243      	negs	r3, r0
 800350a:	4158      	adcs	r0, r3
 800350c:	4689      	mov	r9, r1
 800350e:	f7fd fa77 	bl	8000a00 <_test_assert>
 8003512:	2800      	cmp	r0, #0
 8003514:	d004      	beq.n	8003520 <test_002_004_execute.7945+0x40>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 8003516:	bc1c      	pop	{r2, r3, r4}
 8003518:	4690      	mov	r8, r2
 800351a:	4699      	mov	r9, r3
 800351c:	46a2      	mov	sl, r4
 800351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     the boosted level.*/
  test_set_step(2);
  {
    p1 = chThdSetPriority(prio + 1);
    test_assert(p1 == prio, "unexpected returned priority level");
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8003520:	69ab      	ldr	r3, [r5, #24]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	1ab6      	subs	r6, r6, r2
 8003526:	4270      	negs	r0, r6
 8003528:	4170      	adcs	r0, r6
 800352a:	4e22      	ldr	r6, [pc, #136]	; (80035b4 <test_002_004_execute.7945+0xd4>)
 800352c:	1c31      	adds	r1, r6, #0
 800352e:	f7fd fa67 	bl	8000a00 <_test_assert>
 8003532:	2800      	cmp	r0, #0
 8003534:	d1ef      	bne.n	8003516 <test_002_004_execute.7945+0x36>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8003536:	69a8      	ldr	r0, [r5, #24]
 8003538:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800353a:	1a78      	subs	r0, r7, r1
 800353c:	4243      	negs	r3, r0
 800353e:	4158      	adcs	r0, r3
 8003540:	491d      	ldr	r1, [pc, #116]	; (80035b8 <test_002_004_execute.7945+0xd8>)
 8003542:	f7fd fa5d 	bl	8000a00 <_test_assert>
 8003546:	2800      	cmp	r0, #0
 8003548:	d1e5      	bne.n	8003516 <test_002_004_execute.7945+0x36>
  }

  /* [2.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 800354a:	2303      	movs	r3, #3
 800354c:	4642      	mov	r2, r8
  {
    p1 = chThdSetPriority(prio + 3);
 800354e:	1ce0      	adds	r0, r4, #3
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }

  /* [2.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8003550:	6013      	str	r3, [r2, #0]
  {
    p1 = chThdSetPriority(prio + 3);
 8003552:	4682      	mov	sl, r0
 8003554:	f7fd fb8c 	bl	8000c70 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8003558:	1a38      	subs	r0, r7, r0
 800355a:	4247      	negs	r7, r0
 800355c:	4178      	adcs	r0, r7
 800355e:	4649      	mov	r1, r9
 8003560:	f7fd fa4e 	bl	8000a00 <_test_assert>
 8003564:	2800      	cmp	r0, #0
 8003566:	d1d6      	bne.n	8003516 <test_002_004_execute.7945+0x36>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8003568:	69af      	ldr	r7, [r5, #24]
 800356a:	4653      	mov	r3, sl
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	1a58      	subs	r0, r3, r1
 8003570:	4243      	negs	r3, r0
 8003572:	4158      	adcs	r0, r3
 8003574:	1c31      	adds	r1, r6, #0
 8003576:	f7fd fa43 	bl	8000a00 <_test_assert>
 800357a:	2800      	cmp	r0, #0
 800357c:	d1cb      	bne.n	8003516 <test_002_004_execute.7945+0x36>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 800357e:	69ae      	ldr	r6, [r5, #24]
 8003580:	4650      	mov	r0, sl
 8003582:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8003584:	490d      	ldr	r1, [pc, #52]	; (80035bc <test_002_004_execute.7945+0xdc>)
 8003586:	1a80      	subs	r0, r0, r2
 8003588:	4243      	negs	r3, r0
 800358a:	4158      	adcs	r0, r3
 800358c:	f7fd fa38 	bl	8000a00 <_test_assert>
 8003590:	2800      	cmp	r0, #0
 8003592:	d1c0      	bne.n	8003516 <test_002_004_execute.7945+0x36>
  }

  /* [2.4.4] Restoring original conditions.*/
  test_set_step(4);
 8003594:	2704      	movs	r7, #4
 8003596:	4641      	mov	r1, r8
 8003598:	600f      	str	r7, [r1, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800359a:	b672      	cpsid	i
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 800359c:	69ad      	ldr	r5, [r5, #24]
  {
    chSysLock();
    chThdGetSelfX()->prio = prio;
 800359e:	60ac      	str	r4, [r5, #8]
    chThdGetSelfX()->realprio = prio;
 80035a0:	63ec      	str	r4, [r5, #60]	; 0x3c
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80035a2:	b662      	cpsie	i
 80035a4:	e7b7      	b.n	8003516 <test_002_004_execute.7945+0x36>
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000ff8 	.word	0x20000ff8
 80035ac:	2000106c 	.word	0x2000106c
 80035b0:	080061b0 	.word	0x080061b0
 80035b4:	080061d4 	.word	0x080061d4
 80035b8:	0800648c 	.word	0x0800648c
 80035bc:	080064b4 	.word	0x080064b4

080035c0 <test_006_001_execute.8670>:
 * - [6.1.1] Starting the messenger thread.
 * - [6.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void test_006_001_execute(void) {
 80035c0:	b510      	push	{r4, lr}
 80035c2:	4821      	ldr	r0, [pc, #132]	; (8003648 <test_006_001_execute.8670+0x88>)
  thread_t *tp;
  msg_t msg;

  /* [6.1.1] Starting the messenger thread.*/
  test_set_step(1);
 80035c4:	4c21      	ldr	r4, [pc, #132]	; (800364c <test_006_001_execute.8670+0x8c>)
 80035c6:	2301      	movs	r3, #1
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	6983      	ldr	r3, [r0, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <test_006_001_execute.8670+0x90>)
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	4820      	ldr	r0, [pc, #128]	; (8003654 <test_006_001_execute.8670+0x94>)
 80035d2:	3101      	adds	r1, #1
 80035d4:	f7fe f8e4 	bl	80017a0 <chThdCreateStatic.constprop.56>
 80035d8:	491f      	ldr	r1, [pc, #124]	; (8003658 <test_006_001_execute.8670+0x98>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [6.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 80035da:	2202      	movs	r2, #2
 80035dc:	6022      	str	r2, [r4, #0]
  msg_t msg;

  /* [6.1.1] Starting the messenger thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80035de:	6008      	str	r0, [r1, #0]
  test_set_step(2);
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 80035e0:	f7fd fc2e 	bl	8000e40 <chMsgWait>
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 80035e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e6:	b672      	cpsid	i
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80035e8:	1c21      	adds	r1, r4, #0
 80035ea:	f7fd fbb9 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80035ee:	b662      	cpsie	i
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 80035f0:	b2e0      	uxtb	r0, r4
 80035f2:	f7fd f875 	bl	80006e0 <test_emit_token>
  test_set_step(2);
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 80035f6:	f7fd fc23 	bl	8000e40 <chMsgWait>
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 80035fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035fc:	b672      	cpsid	i
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80035fe:	1c21      	adds	r1, r4, #0
 8003600:	f7fd fbae 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003604:	b662      	cpsie	i
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8003606:	b2e0      	uxtb	r0, r4
 8003608:	f7fd f86a 	bl	80006e0 <test_emit_token>
  test_set_step(2);
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 800360c:	f7fd fc18 	bl	8000e40 <chMsgWait>
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 8003610:	6a44      	ldr	r4, [r0, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003612:	b672      	cpsid	i
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003614:	1c21      	adds	r1, r4, #0
 8003616:	f7fd fba3 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800361a:	b662      	cpsie	i
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 800361c:	b2e0      	uxtb	r0, r4
 800361e:	f7fd f85f 	bl	80006e0 <test_emit_token>
  test_set_step(2);
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8003622:	f7fd fc0d 	bl	8000e40 <chMsgWait>
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 8003626:	6a44      	ldr	r4, [r0, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003628:	b672      	cpsid	i
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 800362a:	1c21      	adds	r1, r4, #0
 800362c:	f7fd fb98 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003630:	b662      	cpsie	i
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8003632:	b2e0      	uxtb	r0, r4
 8003634:	f7fd f854 	bl	80006e0 <test_emit_token>
    }
    test_wait_threads();
 8003638:	f7fd feaa 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800363c:	4907      	ldr	r1, [pc, #28]	; (800365c <test_006_001_execute.8670+0x9c>)
 800363e:	4808      	ldr	r0, [pc, #32]	; (8003660 <test_006_001_execute.8670+0xa0>)
 8003640:	f7fd f98e 	bl	8000960 <_test_assert_sequence>
  }
}
 8003644:	bd10      	pop	{r4, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	20000ff8 	.word	0x20000ff8
 800364c:	2000106c 	.word	0x2000106c
 8003650:	08000fa1 	.word	0x08000fa1
 8003654:	20000558 	.word	0x20000558
 8003658:	20000bd0 	.word	0x20000bd0
 800365c:	08006220 	.word	0x08006220
 8003660:	080064d4 	.word	0x080064d4
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46c0      	nop			; (mov r8, r8)

08003670 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8003670:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <chVTDoResetI+0x6c>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8003672:	b510      	push	{r4, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8003674:	69d3      	ldr	r3, [r2, #28]
 8003676:	4283      	cmp	r3, r0
 8003678:	d00e      	beq.n	8003698 <chVTDoResetI+0x28>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800367a:	6844      	ldr	r4, [r0, #4]
 800367c:	6801      	ldr	r1, [r0, #0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800367e:	321c      	adds	r2, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003680:	6021      	str	r1, [r4, #0]
    vtp->next->prev = vtp->prev;
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	605c      	str	r4, [r3, #4]
    vtp->func = NULL;
 8003686:	2400      	movs	r4, #0
 8003688:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 800368e:	6882      	ldr	r2, [r0, #8]
 8003690:	6898      	ldr	r0, [r3, #8]
 8003692:	1881      	adds	r1, r0, r2
 8003694:	6099      	str	r1, [r3, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003696:	bd10      	pop	{r4, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8003698:	6819      	ldr	r1, [r3, #0]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800369a:	1c10      	adds	r0, r2, #0
 800369c:	301c      	adds	r0, #28
  vtp->func = NULL;
 800369e:	2400      	movs	r4, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80036a0:	61d1      	str	r1, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80036a2:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 80036a4:	60dc      	str	r4, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80036a6:	4281      	cmp	r1, r0
 80036a8:	d014      	beq.n	80036d4 <chVTDoResetI+0x64>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80036aa:	6888      	ldr	r0, [r1, #8]
 80036ac:	689b      	ldr	r3, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80036ae:	6a92      	ldr	r2, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80036b0:	181c      	adds	r4, r3, r0
 80036b2:	608c      	str	r4, [r1, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	05cb      	lsls	r3, r1, #23
 80036b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80036ba:	1a81      	subs	r1, r0, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80036bc:	428c      	cmp	r4, r1
 80036be:	d9ea      	bls.n	8003696 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80036c0:	1a64      	subs	r4, r4, r1

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80036c2:	2c01      	cmp	r4, #1
 80036c4:	d904      	bls.n	80036d0 <chVTDoResetI+0x60>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 80036c6:	1823      	adds	r3, r4, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80036c8:	2080      	movs	r0, #128	; 0x80
 80036ca:	05c2      	lsls	r2, r0, #23
 80036cc:	6353      	str	r3, [r2, #52]	; 0x34
 80036ce:	e7e2      	b.n	8003696 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80036d0:	2402      	movs	r4, #2
 80036d2:	e7f8      	b.n	80036c6 <chVTDoResetI+0x56>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	05cb      	lsls	r3, r1, #23
 80036d8:	60dc      	str	r4, [r3, #12]
 80036da:	e7dc      	b.n	8003696 <chVTDoResetI+0x26>
 80036dc:	20000ff8 	.word	0x20000ff8

080036e0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 80036e0:	b570      	push	{r4, r5, r6, lr}
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80036e2:	6103      	str	r3, [r0, #16]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80036e4:	2380      	movs	r3, #128	; 0x80
  vtp->func = vtfunc;
 80036e6:	60c2      	str	r2, [r0, #12]
 80036e8:	05da      	lsls	r2, r3, #23
 80036ea:	6a56      	ldr	r6, [r2, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80036ec:	2901      	cmp	r1, #1
 80036ee:	d922      	bls.n	8003736 <chVTDoSetI+0x56>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80036f0:	4d19      	ldr	r5, [pc, #100]	; (8003758 <chVTDoSetI+0x78>)
 80036f2:	1c2c      	adds	r4, r5, #0
 80036f4:	69eb      	ldr	r3, [r5, #28]
 80036f6:	341c      	adds	r4, #28
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d01e      	beq.n	800373a <chVTDoSetI+0x5a>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.lasttime;
 80036fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    if (delta < ch.vtlist.next->delta) {
 80036fe:	689c      	ldr	r4, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.lasttime;
 8003700:	1989      	adds	r1, r1, r6
 8003702:	1a8a      	subs	r2, r1, r2
    if (delta < ch.vtlist.next->delta) {
 8003704:	42a2      	cmp	r2, r4
 8003706:	d203      	bcs.n	8003710 <chVTDoSetI+0x30>
 8003708:	e011      	b.n	800372e <chVTDoSetI+0x4e>
  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
    delta -= p->delta;
    p = p->next;
 800370a:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
    delta -= p->delta;
 800370c:	1b12      	subs	r2, r2, r4
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.next;
  while (p->delta < delta) {
 800370e:	689c      	ldr	r4, [r3, #8]
 8003710:	4294      	cmp	r4, r2
 8003712:	d3fa      	bcc.n	800370a <chVTDoSetI+0x2a>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8003714:	685c      	ldr	r4, [r3, #4]
  vtp->prev->next = vtp;
  p->prev = vtp;
  vtp->delta = delta
 8003716:	6082      	str	r2, [r0, #8]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8003718:	6003      	str	r3, [r0, #0]
  vtp->prev = vtp->next->prev;
 800371a:	6044      	str	r4, [r0, #4]
  vtp->prev->next = vtp;
 800371c:	6020      	str	r0, [r4, #0]
  p->prev = vtp;
 800371e:	6058      	str	r0, [r3, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8003720:	6898      	ldr	r0, [r3, #8]
 8003722:	1a81      	subs	r1, r0, r2
 8003724:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8003726:	2301      	movs	r3, #1
 8003728:	425a      	negs	r2, r3
 800372a:	626a      	str	r2, [r5, #36]	; 0x24
}
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800372e:	2680      	movs	r6, #128	; 0x80
 8003730:	05f6      	lsls	r6, r6, #23
 8003732:	6371      	str	r1, [r6, #52]	; 0x34
 8003734:	e7ec      	b.n	8003710 <chVTDoSetI+0x30>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003736:	2102      	movs	r1, #2
 8003738:	e7da      	b.n	80036f0 <chVTDoSetI+0x10>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 800373a:	62ae      	str	r6, [r5, #40]	; 0x28
      ch.vtlist.next = vtp;
 800373c:	61e8      	str	r0, [r5, #28]
      ch.vtlist.prev = vtp;
 800373e:	6228      	str	r0, [r5, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;
 8003740:	6081      	str	r1, [r0, #8]
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8003742:	6003      	str	r3, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8003744:	6043      	str	r3, [r0, #4]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003746:	2080      	movs	r0, #128	; 0x80
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8003748:	198e      	adds	r6, r1, r6
  STM32_ST_TIM->SR     = 0;
 800374a:	2500      	movs	r5, #0
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800374c:	05c1      	lsls	r1, r0, #23
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800374e:	2202      	movs	r2, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003750:	634e      	str	r6, [r1, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8003752:	610d      	str	r5, [r1, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003754:	60ca      	str	r2, [r1, #12]
 8003756:	e7e9      	b.n	800372c <chVTDoSetI+0x4c>
 8003758:	20000ff8 	.word	0x20000ff8
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	46c0      	nop			; (mov r8, r8)

08003760 <thread8.8550>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static THD_FUNCTION(thread8, p) {
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chMtxLock(&m2);
 8003762:	4d1e      	ldr	r5, [pc, #120]	; (80037dc <thread8.8550+0x7c>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static THD_FUNCTION(thread8, p) {
 8003764:	4646      	mov	r6, r8
 8003766:	464f      	mov	r7, r9
 8003768:	b4c0      	push	{r6, r7}
 800376a:	4680      	mov	r8, r0

  chMtxLock(&m2);
 800376c:	1c28      	adds	r0, r5, #0
 800376e:	f7fd fd27 	bl	80011c0 <chMtxLock>
  chMtxLock(&m1);
 8003772:	4e1b      	ldr	r6, [pc, #108]	; (80037e0 <thread8.8550+0x80>)
 8003774:	1c30      	adds	r0, r6, #0
 8003776:	f7fd fd23 	bl	80011c0 <chMtxLock>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800377a:	b672      	cpsid	i
 800377c:	4c19      	ldr	r4, [pc, #100]	; (80037e4 <thread8.8550+0x84>)
 800377e:	69a3      	ldr	r3, [r4, #24]
 8003780:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003782:	4681      	mov	r9, r0
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8003784:	f7fd fc5c 	bl	8001040 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8003788:	4917      	ldr	r1, [pc, #92]	; (80037e8 <thread8.8550+0x88>)
 800378a:	69a2      	ldr	r2, [r4, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800378c:	1c0b      	adds	r3, r1, #0
 800378e:	6251      	str	r1, [r2, #36]	; 0x24
  do {
    cp = cp->queue.next;
 8003790:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003792:	428b      	cmp	r3, r1
 8003794:	d003      	beq.n	800379e <thread8.8550+0x3e>
 8003796:	689f      	ldr	r7, [r3, #8]
 8003798:	6890      	ldr	r0, [r2, #8]
 800379a:	4287      	cmp	r7, r0
 800379c:	d2f8      	bcs.n	8003790 <thread8.8550+0x30>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800379e:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 80037a0:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
 80037a2:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
 80037a4:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 80037a6:	605a      	str	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80037a8:	2007      	movs	r0, #7
 80037aa:	f7fd fb21 	bl	8000df0 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 80037ae:	69a4      	ldr	r4, [r4, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 80037b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037b2:	1c53      	adds	r3, r2, #1
 80037b4:	d002      	beq.n	80037bc <thread8.8550+0x5c>
    chMtxLockS(mp);
 80037b6:	4648      	mov	r0, r9
 80037b8:	f7fd fc9a 	bl	80010f0 <chMtxLockS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80037bc:	b662      	cpsie	i
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80037be:	4643      	mov	r3, r8
 80037c0:	7818      	ldrb	r0, [r3, #0]
 80037c2:	f7fc ff8d 	bl	80006e0 <test_emit_token>
  chMtxUnlock(&m1);
 80037c6:	1c30      	adds	r0, r6, #0
 80037c8:	f7fd fc62 	bl	8001090 <chMtxUnlock>
  chMtxUnlock(&m2);
 80037cc:	1c28      	adds	r0, r5, #0
 80037ce:	f7fd fc5f 	bl	8001090 <chMtxUnlock>
}
 80037d2:	bc0c      	pop	{r2, r3}
 80037d4:	4690      	mov	r8, r2
 80037d6:	4699      	mov	r9, r3
 80037d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	20000460 	.word	0x20000460
 80037e0:	20000420 	.word	0x20000420
 80037e4:	20000ff8 	.word	0x20000ff8
 80037e8:	20000418 	.word	0x20000418
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46c0      	nop			; (mov r8, r8)

080037f0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80037f0:	b530      	push	{r4, r5, lr}
 80037f2:	1c05      	adds	r5, r0, #0
 80037f4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80037f6:	1c4b      	adds	r3, r1, #1
 80037f8:	d012      	beq.n	8003820 <chSchGoSleepTimeoutS+0x30>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80037fa:	4c0b      	ldr	r4, [pc, #44]	; (8003828 <chSchGoSleepTimeoutS+0x38>)
 80037fc:	a801      	add	r0, sp, #4
 80037fe:	69a3      	ldr	r3, [r4, #24]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <chSchGoSleepTimeoutS+0x3c>)
 8003802:	f7ff ff6d 	bl	80036e0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003806:	1c28      	adds	r0, r5, #0
 8003808:	f7fd faf2 	bl	8000df0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800380c:	9b04      	ldr	r3, [sp, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <chSchGoSleepTimeoutS+0x28>
      chVTDoResetI(&vt);
 8003812:	a801      	add	r0, sp, #4
 8003814:	f7ff ff2c 	bl	8003670 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8003818:	69a0      	ldr	r0, [r4, #24]
 800381a:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800381c:	b007      	add	sp, #28
 800381e:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003820:	f7fd fae6 	bl	8000df0 <chSchGoSleepS>
 8003824:	4c00      	ldr	r4, [pc, #0]	; (8003828 <chSchGoSleepTimeoutS+0x38>)
 8003826:	e7f7      	b.n	8003818 <chSchGoSleepTimeoutS+0x28>
 8003828:	20000ff8 	.word	0x20000ff8
 800382c:	080003e1 	.word	0x080003e1

08003830 <chThdEnqueueTimeoutS.4266>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8003830:	b508      	push	{r3, lr}

  if (TIME_IMMEDIATE == timeout) {
 8003832:	2900      	cmp	r1, #0
 8003834:	d00a      	beq.n	800384c <chThdEnqueueTimeoutS.4266+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <chThdEnqueueTimeoutS.4266+0x24>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8003838:	6842      	ldr	r2, [r0, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
 800383c:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 800383e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003840:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003842:	6043      	str	r3, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003844:	2004      	movs	r0, #4
 8003846:	f7ff ffd3 	bl	80037f0 <chSchGoSleepTimeoutS>
}
 800384a:	bd08      	pop	{r3, pc}
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
 800384c:	2001      	movs	r0, #1
 800384e:	4240      	negs	r0, r0
 8003850:	e7fb      	b.n	800384a <chThdEnqueueTimeoutS.4266+0x1a>
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	20000ff8 	.word	0x20000ff8
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46c0      	nop			; (mov r8, r8)

08003860 <iqGetTimeout.4190>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	1c04      	adds	r4, r0, #0
 8003864:	1c0d      	adds	r5, r1, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003866:	b672      	cpsid	i
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8003868:	68a3      	ldr	r3, [r4, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <iqGetTimeout.4190+0x1e>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800386e:	1c20      	adds	r0, r4, #0
 8003870:	1c29      	adds	r1, r5, #0
 8003872:	f7ff ffdd 	bl	8003830 <chThdEnqueueTimeoutS.4266>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8003876:	2800      	cmp	r0, #0
 8003878:	daf6      	bge.n	8003868 <iqGetTimeout.4190+0x8>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800387a:	b662      	cpsie	i
  }

  osalSysUnlock();

  return (msg_t)b;
}
 800387c:	bd38      	pop	{r3, r4, r5, pc}
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800387e:	68a0      	ldr	r0, [r4, #8]
  b = *iqp->q_rdptr++;
 8003880:	69a1      	ldr	r1, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8003882:	3801      	subs	r0, #1
 8003884:	60a0      	str	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8003886:	6922      	ldr	r2, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003888:	780d      	ldrb	r5, [r1, #0]
 800388a:	3101      	adds	r1, #1
 800388c:	61a1      	str	r1, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 800388e:	4291      	cmp	r1, r2
 8003890:	d301      	bcc.n	8003896 <iqGetTimeout.4190+0x36>
    iqp->q_rdptr = iqp->q_buffer;
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	61a3      	str	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8003896:	69e1      	ldr	r1, [r4, #28]
 8003898:	2900      	cmp	r1, #0
 800389a:	d001      	beq.n	80038a0 <iqGetTimeout.4190+0x40>
    iqp->q_notify(iqp);
 800389c:	1c20      	adds	r0, r4, #0
 800389e:	4788      	blx	r1
 80038a0:	b662      	cpsie	i
  }

  osalSysUnlock();

  return (msg_t)b;
 80038a2:	1c28      	adds	r0, r5, #0
 80038a4:	e7ea      	b.n	800387c <iqGetTimeout.4190+0x1c>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46c0      	nop			; (mov r8, r8)

080038b0 <gett.7082>:
static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {
 80038b0:	b508      	push	{r3, lr}

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80038b2:	300c      	adds	r0, #12
 80038b4:	f7ff ffd4 	bl	8003860 <iqGetTimeout.4190>
}
 80038b8:	bd08      	pop	{r3, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46c0      	nop			; (mov r8, r8)

080038c0 <get.7086>:
static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {
 80038c0:	b508      	push	{r3, lr}

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80038c2:	2101      	movs	r1, #1
 80038c4:	300c      	adds	r0, #12
 80038c6:	4249      	negs	r1, r1
 80038c8:	f7ff ffca 	bl	8003860 <iqGetTimeout.4190>
}
 80038cc:	bd08      	pop	{r3, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)

080038d0 <iqReadTimeout.4223>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 80038d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d2:	4656      	mov	r6, sl
 80038d4:	464d      	mov	r5, r9
 80038d6:	4644      	mov	r4, r8
 80038d8:	465f      	mov	r7, fp
 80038da:	b4f0      	push	{r4, r5, r6, r7}
 80038dc:	1c0e      	adds	r6, r1, #0
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 80038de:	69c1      	ldr	r1, [r0, #28]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 80038e0:	b083      	sub	sp, #12
 80038e2:	1c04      	adds	r4, r0, #0
 80038e4:	1c15      	adds	r5, r2, #0
 80038e6:	4699      	mov	r9, r3
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 80038e8:	4688      	mov	r8, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ea:	b672      	cpsid	i
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	05d8      	lsls	r0, r3, #23
 80038f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80038f2:	2101      	movs	r1, #1
 80038f4:	424b      	negs	r3, r1
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80038f6:	444a      	add	r2, r9
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80038f8:	469a      	mov	sl, r3
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80038fa:	9201      	str	r2, [sp, #4]
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 80038fc:	2700      	movs	r7, #0
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80038fe:	44ca      	add	sl, r9
 8003900:	4683      	mov	fp, r0
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8003902:	68a0      	ldr	r0, [r4, #8]
 8003904:	2800      	cmp	r0, #0
 8003906:	d01b      	beq.n	8003940 <iqReadTimeout.4223+0x70>
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8003908:	68a2      	ldr	r2, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800390a:	69a3      	ldr	r3, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 800390c:	3a01      	subs	r2, #1
 800390e:	60a2      	str	r2, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8003910:	7819      	ldrb	r1, [r3, #0]
 8003912:	3301      	adds	r3, #1
 8003914:	7031      	strb	r1, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8003916:	6920      	ldr	r0, [r4, #16]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8003918:	3601      	adds	r6, #1
 800391a:	61a3      	str	r3, [r4, #24]
    if (iqp->q_rdptr >= iqp->q_top) {
 800391c:	4283      	cmp	r3, r0
 800391e:	d301      	bcc.n	8003924 <iqReadTimeout.4223+0x54>
      iqp->q_rdptr = iqp->q_buffer;
 8003920:	68e2      	ldr	r2, [r4, #12]
 8003922:	61a2      	str	r2, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 8003924:	4643      	mov	r3, r8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <iqReadTimeout.4223+0x5e>
      nfy(iqp);
 800392a:	1c20      	adds	r0, r4, #0
 800392c:	47c0      	blx	r8
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800392e:	b662      	cpsie	i

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 8003930:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 8003932:	3701      	adds	r7, #1
    if (--n == 0U) {
 8003934:	2d00      	cmp	r5, #0
 8003936:	d012      	beq.n	800395e <iqReadTimeout.4223+0x8e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003938:	b672      	cpsid	i
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 800393a:	68a0      	ldr	r0, [r4, #8]
 800393c:	2800      	cmp	r0, #0
 800393e:	d1e3      	bne.n	8003908 <iqReadTimeout.4223+0x38>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003940:	4651      	mov	r1, sl
 8003942:	1ccb      	adds	r3, r1, #3
 8003944:	d813      	bhi.n	800396e <iqReadTimeout.4223+0x9e>
 8003946:	4658      	mov	r0, fp
 8003948:	6a42      	ldr	r2, [r0, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800394a:	9b01      	ldr	r3, [sp, #4]
 800394c:	1a99      	subs	r1, r3, r2

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 800394e:	4589      	cmp	r9, r1
 8003950:	d304      	bcc.n	800395c <iqReadTimeout.4223+0x8c>
 8003952:	1c20      	adds	r0, r4, #0
 8003954:	f7ff ff6c 	bl	8003830 <chThdEnqueueTimeoutS.4266>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003958:	2800      	cmp	r0, #0
 800395a:	d0d2      	beq.n	8003902 <iqReadTimeout.4223+0x32>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800395c:	b662      	cpsie	i
      return r;
    }

    osalSysLock();
  }
}
 800395e:	1c38      	adds	r0, r7, #0
 8003960:	b003      	add	sp, #12
 8003962:	bc3c      	pop	{r2, r3, r4, r5}
 8003964:	4690      	mov	r8, r2
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	46ab      	mov	fp, r5
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	1c20      	adds	r0, r4, #0
 8003970:	4649      	mov	r1, r9
 8003972:	f7ff ff5d 	bl	8003830 <chThdEnqueueTimeoutS.4266>
 8003976:	e7ef      	b.n	8003958 <iqReadTimeout.4223+0x88>
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46c0      	nop			; (mov r8, r8)

08003980 <readt.7059>:
static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8003980:	b508      	push	{r3, lr}

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003982:	300c      	adds	r0, #12
 8003984:	f7ff ffa4 	bl	80038d0 <iqReadTimeout.4223>
}
 8003988:	bd08      	pop	{r3, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46c0      	nop			; (mov r8, r8)

08003990 <read.7066>:

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {
 8003990:	b508      	push	{r3, lr}

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003992:	2301      	movs	r3, #1
 8003994:	300c      	adds	r0, #12
 8003996:	425b      	negs	r3, r3
 8003998:	f7ff ff9a 	bl	80038d0 <iqReadTimeout.4223>
                       n, TIME_INFINITE);
}
 800399c:	bd08      	pop	{r3, pc}
 800399e:	46c0      	nop			; (mov r8, r8)

080039a0 <oqPutTimeout.4238>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	1c04      	adds	r4, r0, #0
 80039a4:	1c0e      	adds	r6, r1, #0
 80039a6:	1c15      	adds	r5, r2, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039a8:	b672      	cpsid	i

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <oqPutTimeout.4238+0x20>
 80039b0:	1c20      	adds	r0, r4, #0
 80039b2:	1c29      	adds	r1, r5, #0
 80039b4:	f7ff ff3c 	bl	8003830 <chThdEnqueueTimeoutS.4266>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80039b8:	2800      	cmp	r0, #0
 80039ba:	daf6      	bge.n	80039aa <oqPutTimeout.4238+0xa>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80039bc:	b662      	cpsie	i
  }

  osalSysUnlock();

  return MSG_OK;
}
 80039be:	bd70      	pop	{r4, r5, r6, pc}
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 80039c0:	68a0      	ldr	r0, [r4, #8]
  *oqp->q_wrptr++ = b;
 80039c2:	6961      	ldr	r1, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 80039c4:	3801      	subs	r0, #1
 80039c6:	60a0      	str	r0, [r4, #8]
  *oqp->q_wrptr++ = b;
 80039c8:	700e      	strb	r6, [r1, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80039ca:	6922      	ldr	r2, [r4, #16]
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80039cc:	3101      	adds	r1, #1
 80039ce:	6161      	str	r1, [r4, #20]
  if (oqp->q_wrptr >= oqp->q_top) {
 80039d0:	4291      	cmp	r1, r2
 80039d2:	d301      	bcc.n	80039d8 <oqPutTimeout.4238+0x38>
    oqp->q_wrptr = oqp->q_buffer;
 80039d4:	68e5      	ldr	r5, [r4, #12]
 80039d6:	6165      	str	r5, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80039d8:	69e6      	ldr	r6, [r4, #28]
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d001      	beq.n	80039e2 <oqPutTimeout.4238+0x42>
    oqp->q_notify(oqp);
 80039de:	1c20      	adds	r0, r4, #0
 80039e0:	47b0      	blx	r6
 80039e2:	b662      	cpsie	i
 80039e4:	2000      	movs	r0, #0
 80039e6:	e7ea      	b.n	80039be <oqPutTimeout.4238+0x1e>
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46c0      	nop			; (mov r8, r8)

080039f0 <putt.7089>:
static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
 80039f0:	b508      	push	{r3, lr}

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80039f2:	3030      	adds	r0, #48	; 0x30
 80039f4:	f7ff ffd4 	bl	80039a0 <oqPutTimeout.4238>
}
 80039f8:	bd08      	pop	{r3, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46c0      	nop			; (mov r8, r8)

08003a00 <put.7094>:

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {
 8003a00:	b508      	push	{r3, lr}

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003a02:	2201      	movs	r2, #1
 8003a04:	3030      	adds	r0, #48	; 0x30
 8003a06:	4252      	negs	r2, r2
 8003a08:	f7ff ffca 	bl	80039a0 <oqPutTimeout.4238>
}
 8003a0c:	bd08      	pop	{r3, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)

08003a10 <oqWriteTimeout.4260>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	4656      	mov	r6, sl
 8003a14:	464d      	mov	r5, r9
 8003a16:	4644      	mov	r4, r8
 8003a18:	465f      	mov	r7, fp
 8003a1a:	b4f0      	push	{r4, r5, r6, r7}
 8003a1c:	1c0e      	adds	r6, r1, #0
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8003a1e:	69c1      	ldr	r1, [r0, #28]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8003a20:	b083      	sub	sp, #12
 8003a22:	1c04      	adds	r4, r0, #0
 8003a24:	1c15      	adds	r5, r2, #0
 8003a26:	4699      	mov	r9, r3
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8003a28:	4688      	mov	r8, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2a:	b672      	cpsid	i
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	05d8      	lsls	r0, r3, #23
 8003a30:	6a42      	ldr	r2, [r0, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003a32:	2101      	movs	r1, #1
 8003a34:	424b      	negs	r3, r1
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8003a36:	444a      	add	r2, r9
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003a38:	469a      	mov	sl, r3
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8003a3a:	9201      	str	r2, [sp, #4]
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 8003a3c:	2700      	movs	r7, #0
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003a3e:	44ca      	add	sl, r9
 8003a40:	4683      	mov	fp, r0
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8003a42:	68a0      	ldr	r0, [r4, #8]
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d01b      	beq.n	8003a80 <oqWriteTimeout.4260+0x70>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8003a48:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003a4a:	6963      	ldr	r3, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003a50:	7831      	ldrb	r1, [r6, #0]
 8003a52:	3601      	adds	r6, #1
 8003a54:	7019      	strb	r1, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003a56:	6920      	ldr	r0, [r4, #16]
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003a58:	3301      	adds	r3, #1
 8003a5a:	6163      	str	r3, [r4, #20]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003a5c:	4283      	cmp	r3, r0
 8003a5e:	d301      	bcc.n	8003a64 <oqWriteTimeout.4260+0x54>
      oqp->q_wrptr = oqp->q_buffer;
 8003a60:	68e2      	ldr	r2, [r4, #12]
 8003a62:	6162      	str	r2, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8003a64:	4643      	mov	r3, r8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <oqWriteTimeout.4260+0x5e>
      nfy(oqp);
 8003a6a:	1c20      	adds	r0, r4, #0
 8003a6c:	47c0      	blx	r8
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003a6e:	b662      	cpsie	i

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8003a70:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 8003a72:	3701      	adds	r7, #1
    if (--n == 0U) {
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	d012      	beq.n	8003a9e <oqWriteTimeout.4260+0x8e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a78:	b672      	cpsid	i
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8003a7a:	68a0      	ldr	r0, [r4, #8]
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1e3      	bne.n	8003a48 <oqWriteTimeout.4260+0x38>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003a80:	4651      	mov	r1, sl
 8003a82:	1ccb      	adds	r3, r1, #3
 8003a84:	d813      	bhi.n	8003aae <oqWriteTimeout.4260+0x9e>
 8003a86:	4658      	mov	r0, fp
 8003a88:	6a42      	ldr	r2, [r0, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8003a8a:	9b01      	ldr	r3, [sp, #4]
 8003a8c:	1a99      	subs	r1, r3, r2

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8003a8e:	4589      	cmp	r9, r1
 8003a90:	d304      	bcc.n	8003a9c <oqWriteTimeout.4260+0x8c>
 8003a92:	1c20      	adds	r0, r4, #0
 8003a94:	f7ff fecc 	bl	8003830 <chThdEnqueueTimeoutS.4266>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d0d2      	beq.n	8003a42 <oqWriteTimeout.4260+0x32>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9c:	b662      	cpsie	i
      return w;
    }

    osalSysLock();
  }
}
 8003a9e:	1c38      	adds	r0, r7, #0
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bc3c      	pop	{r2, r3, r4, r5}
 8003aa4:	4690      	mov	r8, r2
 8003aa6:	4699      	mov	r9, r3
 8003aa8:	46a2      	mov	sl, r4
 8003aaa:	46ab      	mov	fp, r5
 8003aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aae:	1c20      	adds	r0, r4, #0
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f7ff febd 	bl	8003830 <chThdEnqueueTimeoutS.4266>
 8003ab6:	e7ef      	b.n	8003a98 <oqWriteTimeout.4260+0x88>
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46c0      	nop			; (mov r8, r8)

08003ac0 <writet.7071>:
static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8003ac0:	b508      	push	{r3, lr}

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003ac2:	3030      	adds	r0, #48	; 0x30
 8003ac4:	f7ff ffa4 	bl	8003a10 <oqWriteTimeout.4260>
}
 8003ac8:	bd08      	pop	{r3, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46c0      	nop			; (mov r8, r8)

08003ad0 <write.7077>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {
 8003ad0:	b508      	push	{r3, lr}

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	3030      	adds	r0, #48	; 0x30
 8003ad6:	425b      	negs	r3, r3
 8003ad8:	f7ff ff9a 	bl	8003a10 <oqWriteTimeout.4260>
                        n, TIME_INFINITE);
}
 8003adc:	bd08      	pop	{r3, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)

08003ae0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003ae0:	b510      	push	{r4, lr}
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8003ae2:	6884      	ldr	r4, [r0, #8]
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003ae4:	1c03      	adds	r3, r0, #0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8003ae6:	1e62      	subs	r2, r4, #1
 8003ae8:	6082      	str	r2, [r0, #8]
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8003aea:	2000      	movs	r0, #0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	db00      	blt.n	8003af2 <chSemWaitTimeoutS+0x12>

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8003af0:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8003af2:	2900      	cmp	r1, #0
 8003af4:	d00b      	beq.n	8003b0e <chSemWaitTimeoutS+0x2e>
      sp->cnt++;

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <chSemWaitTimeoutS+0x38>)
 8003af8:	6984      	ldr	r4, [r0, #24]
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8003afa:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 8003afc:	6263      	str	r3, [r4, #36]	; 0x24
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8003afe:	685a      	ldr	r2, [r3, #4]
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
 8003b00:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = tqp->prev;
 8003b02:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8003b04:	6014      	str	r4, [r2, #0]
  tqp->prev                  = tp;
 8003b06:	605c      	str	r4, [r3, #4]
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8003b08:	f7ff fe72 	bl	80037f0 <chSchGoSleepTimeoutS>
 8003b0c:	e7f0      	b.n	8003af0 <chSemWaitTimeoutS+0x10>

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;

      return MSG_TIMEOUT;
 8003b0e:	2101      	movs	r1, #1
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->cnt++;
 8003b10:	609c      	str	r4, [r3, #8]

      return MSG_TIMEOUT;
 8003b12:	4248      	negs	r0, r1
 8003b14:	e7ec      	b.n	8003af0 <chSemWaitTimeoutS+0x10>
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	20000ff8 	.word	0x20000ff8
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46c0      	nop			; (mov r8, r8)

08003b20 <chMBPostS>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostS(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	1c04      	adds	r4, r0, #0
 8003b24:	1c0e      	adds	r6, r1, #0
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
 8003b26:	301c      	adds	r0, #28
 8003b28:	1c11      	adds	r1, r2, #0
 8003b2a:	f7ff ffd9 	bl	8003ae0 <chSemWaitTimeoutS>
 8003b2e:	1e05      	subs	r5, r0, #0
  if (rdymsg == MSG_OK) {
 8003b30:	d10b      	bne.n	8003b4a <chMBPostS+0x2a>
    *mbp->wrptr++ = msg;
 8003b32:	68a3      	ldr	r3, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
 8003b34:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->wrptr++ = msg;
 8003b36:	c340      	stmia	r3!, {r6}
 8003b38:	60a3      	str	r3, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d207      	bcs.n	8003b4e <chMBPostS+0x2e>
      mbp->wrptr = mbp->buffer;
    }
    chSemSignalI(&mbp->fullsem);
 8003b3e:	1c20      	adds	r0, r4, #0
 8003b40:	3010      	adds	r0, #16
 8003b42:	f7fd fc65 	bl	8001410 <chSemSignalI>
    chSchRescheduleS();
 8003b46:	f7fd f86b 	bl	8000c20 <chSchRescheduleS>
  }

  return rdymsg;
}
 8003b4a:	1c28      	adds	r0, r5, #0
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->wrptr++ = msg;
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
 8003b4e:	6820      	ldr	r0, [r4, #0]
 8003b50:	60a0      	str	r0, [r4, #8]
 8003b52:	e7f4      	b.n	8003b3e <chMBPostS+0x1e>
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46c0      	nop			; (mov r8, r8)

08003b60 <chMBPostAhead.constprop.23>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	1c06      	adds	r6, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b64:	b672      	cpsid	i
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
 8003b66:	4d0d      	ldr	r5, [pc, #52]	; (8003b9c <chMBPostAhead.constprop.23+0x3c>)
 8003b68:	1c28      	adds	r0, r5, #0
 8003b6a:	f7ff ffb9 	bl	8003ae0 <chSemWaitTimeoutS>
 8003b6e:	1e04      	subs	r4, r0, #0
  if (rdymsg == MSG_OK) {
 8003b70:	d10d      	bne.n	8003b8e <chMBPostAhead.constprop.23+0x2e>
    if (--mbp->rdptr < mbp->buffer) {
 8003b72:	1c2a      	adds	r2, r5, #0
 8003b74:	3a1c      	subs	r2, #28
 8003b76:	68d3      	ldr	r3, [r2, #12]
 8003b78:	6811      	ldr	r1, [r2, #0]
 8003b7a:	3b04      	subs	r3, #4
 8003b7c:	60d3      	str	r3, [r2, #12]
 8003b7e:	428b      	cmp	r3, r1
 8003b80:	d308      	bcc.n	8003b94 <chMBPostAhead.constprop.23+0x34>
      mbp->rdptr = mbp->top - 1;
    }
    *mbp->rdptr = msg;
 8003b82:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->fullsem);
 8003b84:	4806      	ldr	r0, [pc, #24]	; (8003ba0 <chMBPostAhead.constprop.23+0x40>)
 8003b86:	f7fd fc43 	bl	8001410 <chSemSignalI>
    chSchRescheduleS();
 8003b8a:	f7fd f849 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003b8e:	b662      	cpsie	i
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8003b90:	1c20      	adds	r0, r4, #0
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->rdptr < mbp->buffer) {
      mbp->rdptr = mbp->top - 1;
 8003b94:	6853      	ldr	r3, [r2, #4]
 8003b96:	3b04      	subs	r3, #4
 8003b98:	60d3      	str	r3, [r2, #12]
 8003b9a:	e7f2      	b.n	8003b82 <chMBPostAhead.constprop.23+0x22>
 8003b9c:	20000454 	.word	0x20000454
 8003ba0:	20000448 	.word	0x20000448
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46c0      	nop			; (mov r8, r8)

08003bb0 <chMBFetch.constprop.21>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	1c06      	adds	r6, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb4:	b672      	cpsid	i
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
 8003bb6:	4d0d      	ldr	r5, [pc, #52]	; (8003bec <chMBFetch.constprop.21+0x3c>)
 8003bb8:	1c28      	adds	r0, r5, #0
 8003bba:	f7ff ff91 	bl	8003ae0 <chSemWaitTimeoutS>
 8003bbe:	1e04      	subs	r4, r0, #0
  if (rdymsg == MSG_OK) {
 8003bc0:	d10d      	bne.n	8003bde <chMBFetch.constprop.21+0x2e>
    *msgp = *mbp->rdptr++;
 8003bc2:	1c2b      	adds	r3, r5, #0
 8003bc4:	3b10      	subs	r3, #16
 8003bc6:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 8003bc8:	6858      	ldr	r0, [r3, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->rdptr++;
 8003bca:	ca02      	ldmia	r2!, {r1}
 8003bcc:	6031      	str	r1, [r6, #0]
 8003bce:	60da      	str	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 8003bd0:	4282      	cmp	r2, r0
 8003bd2:	d207      	bcs.n	8003be4 <chMBFetch.constprop.21+0x34>
      mbp->rdptr = mbp->buffer;
    }
    chSemSignalI(&mbp->emptysem);
 8003bd4:	4806      	ldr	r0, [pc, #24]	; (8003bf0 <chMBFetch.constprop.21+0x40>)
 8003bd6:	f7fd fc1b 	bl	8001410 <chSemSignalI>
    chSchRescheduleS();
 8003bda:	f7fd f821 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003bde:	b662      	cpsie	i
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8003be0:	1c20      	adds	r0, r4, #0
 8003be2:	bd70      	pop	{r4, r5, r6, pc}

  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->rdptr++;
    if (mbp->rdptr >= mbp->top) {
      mbp->rdptr = mbp->buffer;
 8003be4:	681e      	ldr	r6, [r3, #0]
 8003be6:	60de      	str	r6, [r3, #12]
 8003be8:	e7f4      	b.n	8003bd4 <chMBFetch.constprop.21+0x24>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	20000448 	.word	0x20000448
 8003bf0:	20000454 	.word	0x20000454
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46c0      	nop			; (mov r8, r8)

08003c00 <chGuardedPoolAllocTimeout.constprop.16>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8003c00:	b510      	push	{r4, lr}
 8003c02:	1c01      	adds	r1, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c04:	b672      	cpsid	i
 */
void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
                                 systime_t timeout) {
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8003c06:	4c0b      	ldr	r4, [pc, #44]	; (8003c34 <chGuardedPoolAllocTimeout.constprop.16+0x34>)
 8003c08:	1c20      	adds	r0, r4, #0
 8003c0a:	f7ff ff69 	bl	8003ae0 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d10d      	bne.n	8003c2e <chGuardedPoolAllocTimeout.constprop.16+0x2e>
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->next;
 8003c12:	68e0      	ldr	r0, [r4, #12]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d003      	beq.n	8003c20 <chGuardedPoolAllocTimeout.constprop.16+0x20>
    mp->next = mp->next->next;
 8003c18:	6801      	ldr	r1, [r0, #0]
 8003c1a:	60e1      	str	r1, [r4, #12]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003c1c:	b662      	cpsie	i
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8003c1e:	bd10      	pop	{r4, pc}
  objp = mp->next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->next = mp->next->next;
  }
  else if (mp->provider != NULL) {
 8003c20:	6963      	ldr	r3, [r4, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0fa      	beq.n	8003c1c <chGuardedPoolAllocTimeout.constprop.16+0x1c>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 8003c26:	6920      	ldr	r0, [r4, #16]
 8003c28:	2104      	movs	r1, #4
 8003c2a:	4798      	blx	r3
 8003c2c:	e7f6      	b.n	8003c1c <chGuardedPoolAllocTimeout.constprop.16+0x1c>
                                 systime_t timeout) {
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
  if (msg != MSG_OK) {
    return NULL;
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e7f4      	b.n	8003c1c <chGuardedPoolAllocTimeout.constprop.16+0x1c>
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	20000400 	.word	0x20000400
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46c0      	nop			; (mov r8, r8)

08003c40 <test_009_003_execute.9225>:

static void test_009_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void test_009_003_execute(void) {
 8003c40:	b508      	push	{r3, lr}

  /* [9.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <test_009_003_execute.9225+0x1c>)
 8003c44:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 8003c46:	20fa      	movs	r0, #250	; 0xfa

static void test_009_003_execute(void) {

  /* [9.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8003c48:	601a      	str	r2, [r3, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 8003c4a:	0080      	lsls	r0, r0, #2
 8003c4c:	f7ff ffd8 	bl	8003c00 <chGuardedPoolAllocTimeout.constprop.16>
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <test_009_003_execute.9225+0x20>)
 8003c52:	4243      	negs	r3, r0
 8003c54:	4158      	adcs	r0, r3
 8003c56:	f7fc fed3 	bl	8000a00 <_test_assert>
  }
}
 8003c5a:	bd08      	pop	{r3, pc}
 8003c5c:	2000106c 	.word	0x2000106c
 8003c60:	080063c0 	.word	0x080063c0
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46c0      	nop			; (mov r8, r8)

08003c70 <test_008_001_execute.9108>:

static void test_008_001_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_001_execute(void) {
 8003c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c72:	464d      	mov	r5, r9
 8003c74:	465f      	mov	r7, fp
 8003c76:	4656      	mov	r6, sl
 8003c78:	4644      	mov	r4, r8
 8003c7a:	b4f0      	push	{r4, r5, r6, r7}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.1.1] Testing the mailbox size.*/
  test_set_step(1);
 8003c7c:	4d8f      	ldr	r5, [pc, #572]	; (8003ebc <test_008_001_execute.9108+0x24c>)
 8003c7e:	2301      	movs	r3, #1

static void test_008_001_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_001_execute(void) {
 8003c80:	b083      	sub	sp, #12
  msg_t msg1, msg2;
  unsigned i;

  /* [8.1.1] Testing the mailbox size.*/
  test_set_step(1);
 8003c82:	602b      	str	r3, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c84:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 8003c86:	4c8e      	ldr	r4, [pc, #568]	; (8003ec0 <test_008_001_execute.9108+0x250>)
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003c88:	498e      	ldr	r1, [pc, #568]	; (8003ec4 <test_008_001_execute.9108+0x254>)
 8003c8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c8c:	3804      	subs	r0, #4
 8003c8e:	4243      	negs	r3, r0
 8003c90:	4158      	adcs	r0, r3
 8003c92:	f7fc feb5 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003c96:	b662      	cpsie	i
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d006      	beq.n	8003caa <test_008_001_execute.9108+0x3a>
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 8003c9c:	b003      	add	sp, #12
 8003c9e:	bc3c      	pop	{r2, r3, r4, r5}
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	46a2      	mov	sl, r4
 8003ca6:	46ab      	mov	fp, r5
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  }

  /* [8.1.2] Resetting the mailbox, conditions are checked, no errors
     expected.*/
  test_set_step(2);
 8003caa:	2002      	movs	r0, #2
 8003cac:	6028      	str	r0, [r5, #0]
  {
    chMBReset(&mb1);
 8003cae:	f7fd fc17 	bl	80014e0 <chMBReset.constprop.26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb2:	b672      	cpsid	i
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003cb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cb6:	4e84      	ldr	r6, [pc, #528]	; (8003ec8 <test_008_001_execute.9108+0x258>)
 8003cb8:	3804      	subs	r0, #4
 8003cba:	4243      	negs	r3, r0
 8003cbc:	4158      	adcs	r0, r3
 8003cbe:	1c31      	adds	r1, r6, #0
 8003cc0:	f7fc fe9e 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc4:	b662      	cpsie	i
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d1e8      	bne.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cca:	b672      	cpsid	i
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003ccc:	4f7f      	ldr	r7, [pc, #508]	; (8003ecc <test_008_001_execute.9108+0x25c>)
 8003cce:	69a2      	ldr	r2, [r4, #24]
 8003cd0:	1c39      	adds	r1, r7, #0
 8003cd2:	4250      	negs	r0, r2
 8003cd4:	4150      	adcs	r0, r2
 8003cd6:	f7fc fe93 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003cda:	b662      	cpsie	i
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d1dd      	bne.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce0:	b672      	cpsid	i
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003ce2:	6821      	ldr	r1, [r4, #0]
 8003ce4:	68a3      	ldr	r3, [r4, #8]
 8003ce6:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <test_008_001_execute.9108+0x260>)
 8003ce8:	1ac8      	subs	r0, r1, r3
 8003cea:	4243      	negs	r3, r0
 8003cec:	4158      	adcs	r0, r3
 8003cee:	1c11      	adds	r1, r2, #0
 8003cf0:	4690      	mov	r8, r2
 8003cf2:	f7fc fe85 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf6:	b662      	cpsie	i
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1cf      	bne.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfc:	b672      	cpsid	i
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003cfe:	68e1      	ldr	r1, [r4, #12]
 8003d00:	6820      	ldr	r0, [r4, #0]
 8003d02:	1a40      	subs	r0, r0, r1
 8003d04:	4243      	negs	r3, r0
 8003d06:	4158      	adcs	r0, r3
 8003d08:	4b72      	ldr	r3, [pc, #456]	; (8003ed4 <test_008_001_execute.9108+0x264>)
 8003d0a:	1c19      	adds	r1, r3, #0
 8003d0c:	469a      	mov	sl, r3
 8003d0e:	f7fc fe77 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003d12:	b662      	cpsie	i
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d1c1      	bne.n	8003c9c <test_008_001_execute.9108+0x2c>
  }

  /* [8.1.3] Filling the mailbox using chMBPost() and chMBPostAhead()
     once, no errors expected.*/
  test_set_step(3);
 8003d18:	2203      	movs	r2, #3
 8003d1a:	602a      	str	r2, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1c:	b672      	cpsid	i
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
  msg_t rdymsg;

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
 8003d1e:	2301      	movs	r3, #1
 8003d20:	1c20      	adds	r0, r4, #0
 8003d22:	2142      	movs	r1, #66	; 0x42
 8003d24:	425a      	negs	r2, r3
 8003d26:	f7ff fefb 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003d2a:	b662      	cpsie	i
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003d2c:	496a      	ldr	r1, [pc, #424]	; (8003ed8 <test_008_001_execute.9108+0x268>)
 8003d2e:	4243      	negs	r3, r0
 8003d30:	4158      	adcs	r0, r3
 8003d32:	4689      	mov	r9, r1
 8003d34:	f7fc fe64 	bl	8000a00 <_test_assert>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d1af      	bne.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3c:	b672      	cpsid	i
 8003d3e:	2201      	movs	r2, #1
 8003d40:	1c20      	adds	r0, r4, #0
 8003d42:	2143      	movs	r1, #67	; 0x43
 8003d44:	4252      	negs	r2, r2
 8003d46:	f7ff feeb 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003d4a:	b662      	cpsie	i
 8003d4c:	4243      	negs	r3, r0
 8003d4e:	4158      	adcs	r0, r3
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc fe55 	bl	8000a00 <_test_assert>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d1a0      	bne.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d5a:	b672      	cpsid	i
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	1c20      	adds	r0, r4, #0
 8003d60:	2144      	movs	r1, #68	; 0x44
 8003d62:	425a      	negs	r2, r3
 8003d64:	f7ff fedc 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003d68:	b662      	cpsie	i
 8003d6a:	4243      	negs	r3, r0
 8003d6c:	4158      	adcs	r0, r3
 8003d6e:	4649      	mov	r1, r9
 8003d70:	f7fc fe46 	bl	8000a00 <_test_assert>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d000      	beq.n	8003d7a <test_008_001_execute.9108+0x10a>
 8003d78:	e790      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
    }
    msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4249      	negs	r1, r1
 8003d7e:	2041      	movs	r0, #65	; 0x41
 8003d80:	f7ff feee 	bl	8003b60 <chMBPostAhead.constprop.23>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003d84:	4649      	mov	r1, r9
 8003d86:	4243      	negs	r3, r0
 8003d88:	4158      	adcs	r0, r3
 8003d8a:	f7fc fe39 	bl	8000a00 <_test_assert>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d000      	beq.n	8003d94 <test_008_001_execute.9108+0x124>
 8003d92:	e783      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  }

  /* [8.1.4] Testing intermediate conditions. Data pointers must be
     aligned, semaphore counters are checked.*/
  test_set_step(4);
 8003d94:	2004      	movs	r0, #4
 8003d96:	6028      	str	r0, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d98:	b672      	cpsid	i
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003d9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d9c:	494f      	ldr	r1, [pc, #316]	; (8003edc <test_008_001_execute.9108+0x26c>)
 8003d9e:	4250      	negs	r0, r2
 8003da0:	4150      	adcs	r0, r2
 8003da2:	f7fc fe2d 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003da6:	b662      	cpsie	i
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d000      	beq.n	8003dae <test_008_001_execute.9108+0x13e>
 8003dac:	e776      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dae:	b672      	cpsid	i
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8003db0:	69a0      	ldr	r0, [r4, #24]
 8003db2:	494b      	ldr	r1, [pc, #300]	; (8003ee0 <test_008_001_execute.9108+0x270>)
 8003db4:	3804      	subs	r0, #4
 8003db6:	4243      	negs	r3, r0
 8003db8:	4158      	adcs	r0, r3
 8003dba:	f7fc fe21 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003dbe:	b662      	cpsie	i
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d000      	beq.n	8003dc6 <test_008_001_execute.9108+0x156>
 8003dc4:	e76a      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc6:	b672      	cpsid	i
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	68a1      	ldr	r1, [r4, #8]
 8003dcc:	1a58      	subs	r0, r3, r1
 8003dce:	4243      	negs	r3, r0
 8003dd0:	4158      	adcs	r0, r3
 8003dd2:	4944      	ldr	r1, [pc, #272]	; (8003ee4 <test_008_001_execute.9108+0x274>)
 8003dd4:	f7fc fe14 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd8:	b662      	cpsie	i
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d000      	beq.n	8003de0 <test_008_001_execute.9108+0x170>
 8003dde:	e75d      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  }

  /* [8.1.5] Emptying the mailbox using chMBFetch(), no errors
     expected.*/
  test_set_step(5);
 8003de0:	2005      	movs	r0, #5
 8003de2:	2204      	movs	r2, #4
 8003de4:	6028      	str	r0, [r5, #0]
 8003de6:	4693      	mov	fp, r2
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003de8:	2301      	movs	r3, #1
 8003dea:	4259      	negs	r1, r3
 8003dec:	a801      	add	r0, sp, #4
 8003dee:	f7ff fedf 	bl	8003bb0 <chMBFetch.constprop.21>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003df2:	4649      	mov	r1, r9
 8003df4:	4243      	negs	r3, r0
 8003df6:	4158      	adcs	r0, r3
 8003df8:	f7fc fe02 	bl	8000a00 <_test_assert>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d000      	beq.n	8003e02 <test_008_001_execute.9108+0x192>
 8003e00:	e74c      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
      test_emit_token(msg2);
 8003e02:	4669      	mov	r1, sp
 8003e04:	7908      	ldrb	r0, [r1, #4]
 8003e06:	f7fc fc6b 	bl	80006e0 <test_emit_token>
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	4242      	negs	r2, r0
 8003e0e:	4493      	add	fp, r2

  /* [8.1.5] Emptying the mailbox using chMBFetch(), no errors
     expected.*/
  test_set_step(5);
  {
    for (i = 0; i < MB_SIZE; i++) {
 8003e10:	465b      	mov	r3, fp
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e8      	bne.n	8003de8 <test_008_001_execute.9108+0x178>
      msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
      test_emit_token(msg2);
    }
    test_assert_sequence("ABCD", "wrong get sequence");
 8003e16:	4834      	ldr	r0, [pc, #208]	; (8003ee8 <test_008_001_execute.9108+0x278>)
 8003e18:	4934      	ldr	r1, [pc, #208]	; (8003eec <test_008_001_execute.9108+0x27c>)
 8003e1a:	f7fc fda1 	bl	8000960 <_test_assert_sequence>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d000      	beq.n	8003e24 <test_008_001_execute.9108+0x1b4>
 8003e22:	e73b      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  }

  /* [8.1.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 8003e24:	2106      	movs	r1, #6
 8003e26:	6029      	str	r1, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	1c20      	adds	r0, r4, #0
 8003e2e:	2146      	movs	r1, #70	; 0x46
 8003e30:	4252      	negs	r2, r2
 8003e32:	f7ff fe75 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003e36:	b662      	cpsie	i
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003e38:	4243      	negs	r3, r0
 8003e3a:	4158      	adcs	r0, r3
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	f7fc fddf 	bl	8000a00 <_test_assert>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d000      	beq.n	8003e48 <test_008_001_execute.9108+0x1d8>
 8003e46:	e729      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4259      	negs	r1, r3
 8003e4c:	a801      	add	r0, sp, #4
 8003e4e:	f7ff feaf 	bl	8003bb0 <chMBFetch.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003e52:	4649      	mov	r1, r9
 8003e54:	4243      	negs	r3, r0
 8003e56:	4158      	adcs	r0, r3
 8003e58:	f7fc fdd2 	bl	8000a00 <_test_assert>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d000      	beq.n	8003e62 <test_008_001_execute.9108+0x1f2>
 8003e60:	e71c      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  }

  /* [8.1.7] Testing final conditions. Data pointers must be aligned to
     buffer start, semaphore counters are checked.*/
  test_set_step(7);
 8003e62:	2007      	movs	r0, #7
 8003e64:	6028      	str	r0, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e66:	b672      	cpsid	i
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003e68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e6a:	1c31      	adds	r1, r6, #0
 8003e6c:	3804      	subs	r0, #4
 8003e6e:	4243      	negs	r3, r0
 8003e70:	4158      	adcs	r0, r3
 8003e72:	f7fc fdc5 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003e76:	b662      	cpsie	i
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d000      	beq.n	8003e7e <test_008_001_execute.9108+0x20e>
 8003e7c:	e70e      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e7e:	b672      	cpsid	i
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003e80:	69a5      	ldr	r5, [r4, #24]
 8003e82:	1c39      	adds	r1, r7, #0
 8003e84:	4268      	negs	r0, r5
 8003e86:	4168      	adcs	r0, r5
 8003e88:	f7fc fdba 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003e8c:	b662      	cpsie	i
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d000      	beq.n	8003e94 <test_008_001_execute.9108+0x224>
 8003e92:	e703      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003e94:	6826      	ldr	r6, [r4, #0]
 8003e96:	68a7      	ldr	r7, [r4, #8]
 8003e98:	4641      	mov	r1, r8
 8003e9a:	1bf0      	subs	r0, r6, r7
 8003e9c:	4243      	negs	r3, r0
 8003e9e:	4158      	adcs	r0, r3
 8003ea0:	f7fc fdae 	bl	8000a00 <_test_assert>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d000      	beq.n	8003eaa <test_008_001_execute.9108+0x23a>
 8003ea8:	e6f8      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003eaa:	6821      	ldr	r1, [r4, #0]
 8003eac:	68e4      	ldr	r4, [r4, #12]
 8003eae:	1b08      	subs	r0, r1, r4
 8003eb0:	4243      	negs	r3, r0
 8003eb2:	4158      	adcs	r0, r3
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	f7fc fda3 	bl	8000a00 <_test_assert>
 8003eba:	e6ef      	b.n	8003c9c <test_008_001_execute.9108+0x2c>
 8003ebc:	2000106c 	.word	0x2000106c
 8003ec0:	20000438 	.word	0x20000438
 8003ec4:	080064dc 	.word	0x080064dc
 8003ec8:	080064e8 	.word	0x080064e8
 8003ecc:	080064f4 	.word	0x080064f4
 8003ed0:	08006500 	.word	0x08006500
 8003ed4:	08006524 	.word	0x08006524
 8003ed8:	08006360 	.word	0x08006360
 8003edc:	08006548 	.word	0x08006548
 8003ee0:	08006554 	.word	0x08006554
 8003ee4:	08006560 	.word	0x08006560
 8003ee8:	080064d4 	.word	0x080064d4
 8003eec:	08006578 	.word	0x08006578

08003ef0 <test_010_001_execute.9361>:

static void test_010_001_setup(void) {
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}

static void test_010_001_execute(void) {
 8003ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef2:	4656      	mov	r6, sl
 8003ef4:	464d      	mov	r5, r9
 8003ef6:	4644      	mov	r4, r8
 8003ef8:	465f      	mov	r7, fp
 8003efa:	b4f0      	push	{r4, r5, r6, r7}
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [10.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 8003efc:	4db6      	ldr	r5, [pc, #728]	; (80041d8 <test_010_001_execute.9361+0x2e8>)
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8003efe:	4cb7      	ldr	r4, [pc, #732]	; (80041dc <test_010_001_execute.9361+0x2ec>)

static void test_010_001_setup(void) {
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}

static void test_010_001_execute(void) {
 8003f00:	b085      	sub	sp, #20
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [10.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 8003f02:	2301      	movs	r3, #1
 8003f04:	602b      	str	r3, [r5, #0]
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8003f06:	a901      	add	r1, sp, #4
 8003f08:	1c20      	adds	r0, r4, #0
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f7fd f980 	bl	8001210 <chHeapStatus>
 8003f10:	4eb3      	ldr	r6, [pc, #716]	; (80041e0 <test_010_001_execute.9361+0x2f0>)
 8003f12:	3801      	subs	r0, #1
 8003f14:	4243      	negs	r3, r0
 8003f16:	4158      	adcs	r0, r3
 8003f18:	1c31      	adds	r1, r6, #0
 8003f1a:	f7fc fd71 	bl	8000a00 <_test_assert>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d006      	beq.n	8003f30 <test_010_001_execute.9361+0x40>
  test_set_step(10);
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
    test_assert(n == sz, "size changed");
  }
}
 8003f22:	b005      	add	sp, #20
 8003f24:	bc3c      	pop	{r2, r3, r4, r5}
 8003f26:	4690      	mov	r8, r2
 8003f28:	4699      	mov	r9, r3
 8003f2a:	46a2      	mov	sl, r4
 8003f2c:	46ab      	mov	fp, r5
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
  }

  /* [10.1.2] Trying to allocate an block bigger than available space,
     an error is expected.*/
  test_set_step(2);
 8003f30:	2002      	movs	r0, #2
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8003f32:	21cd      	movs	r1, #205	; 0xcd
 8003f34:	6028      	str	r0, [r5, #0]
 8003f36:	0109      	lsls	r1, r1, #4
 8003f38:	1c20      	adds	r0, r4, #0
 8003f3a:	f7fe f8c1 	bl	80020c0 <chHeapAllocAligned.constprop.30>
  {
    p1 = chHeapAlloc(&test_heap, sizeof test_buffer * 2);
    test_assert(p1 == NULL, "allocation not failed");
 8003f3e:	49a9      	ldr	r1, [pc, #676]	; (80041e4 <test_010_001_execute.9361+0x2f4>)
 8003f40:	4243      	negs	r3, r0
 8003f42:	4158      	adcs	r0, r3
 8003f44:	f7fc fd5c 	bl	8000a00 <_test_assert>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d1ea      	bne.n	8003f22 <test_010_001_execute.9361+0x32>
  }

  /* [10.1.3] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(3);
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	2110      	movs	r1, #16
 8003f50:	602a      	str	r2, [r5, #0]
 8003f52:	1c20      	adds	r0, r4, #0
 8003f54:	f7fe f8b4 	bl	80020c0 <chHeapAllocAligned.constprop.30>
 8003f58:	1c07      	adds	r7, r0, #0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 8003f5a:	1e43      	subs	r3, r0, #1
 8003f5c:	4198      	sbcs	r0, r3
 8003f5e:	4ba2      	ldr	r3, [pc, #648]	; (80041e8 <test_010_001_execute.9361+0x2f8>)
 8003f60:	1c19      	adds	r1, r3, #0
 8003f62:	4698      	mov	r8, r3
 8003f64:	f7fc fd4c 	bl	8000a00 <_test_assert>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d1da      	bne.n	8003f22 <test_010_001_execute.9361+0x32>
    chHeapFree(p1);
 8003f6c:	1c38      	adds	r0, r7, #0
 8003f6e:	f7fd f987 	bl	8001280 <chHeapFree>
  }

  /* [10.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size.*/
  test_set_step(4);
 8003f72:	2004      	movs	r0, #4
 8003f74:	6028      	str	r0, [r5, #0]
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8003f76:	a902      	add	r1, sp, #8
 8003f78:	1c20      	adds	r0, r4, #0
 8003f7a:	aa03      	add	r2, sp, #12
 8003f7c:	f7fd f948 	bl	8001210 <chHeapStatus>
 8003f80:	9000      	str	r0, [sp, #0]
    test_assert(n == 1, "missing free block");
 8003f82:	3801      	subs	r0, #1
 8003f84:	4243      	negs	r3, r0
 8003f86:	4158      	adcs	r0, r3
 8003f88:	4998      	ldr	r1, [pc, #608]	; (80041ec <test_010_001_execute.9361+0x2fc>)
 8003f8a:	f7fc fd39 	bl	8000a00 <_test_assert>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d1c7      	bne.n	8003f22 <test_010_001_execute.9361+0x32>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8003f92:	9a02      	ldr	r2, [sp, #8]
 8003f94:	210f      	movs	r1, #15
 8003f96:	4291      	cmp	r1, r2
 8003f98:	41bf      	sbcs	r7, r7
 8003f9a:	4278      	negs	r0, r7
 8003f9c:	4f94      	ldr	r7, [pc, #592]	; (80041f0 <test_010_001_execute.9361+0x300>)
 8003f9e:	1c39      	adds	r1, r7, #0
 8003fa0:	f7fc fd2e 	bl	8000a00 <_test_assert>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d1bc      	bne.n	8003f22 <test_010_001_execute.9361+0x32>
    test_assert(total_size == largest_size, "unexpected heap state");
 8003fa8:	9b03      	ldr	r3, [sp, #12]
 8003faa:	9802      	ldr	r0, [sp, #8]
 8003fac:	1c39      	adds	r1, r7, #0
 8003fae:	1ac0      	subs	r0, r0, r3
 8003fb0:	4243      	negs	r3, r0
 8003fb2:	4158      	adcs	r0, r3
 8003fb4:	f7fc fd24 	bl	8000a00 <_test_assert>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d1b2      	bne.n	8003f22 <test_010_001_execute.9361+0x32>
  }

  /* [10.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
 8003fbc:	2105      	movs	r1, #5
 8003fbe:	6029      	str	r1, [r5, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fc0:	1c20      	adds	r0, r4, #0
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	f7fe f90c 	bl	80021e0 <chHeapAlloc.9355>
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fc8:	2110      	movs	r1, #16
  }

  /* [10.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fca:	4682      	mov	sl, r0
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fcc:	1c20      	adds	r0, r4, #0
 8003fce:	f7fe f907 	bl	80021e0 <chHeapAlloc.9355>
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fd2:	2110      	movs	r1, #16

  /* [10.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fd4:	4681      	mov	r9, r0
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8003fd6:	1c20      	adds	r0, r4, #0
 8003fd8:	f7fe f902 	bl	80021e0 <chHeapAlloc.9355>
 8003fdc:	1c07      	adds	r7, r0, #0
    chHeapFree(p1);                                 /* Does not merge.*/
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f7fd f94e 	bl	8001280 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 8003fe4:	4648      	mov	r0, r9
 8003fe6:	f7fd f94b 	bl	8001280 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8003fea:	1c38      	adds	r0, r7, #0
 8003fec:	f7fd f948 	bl	8001280 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8003ff0:	4669      	mov	r1, sp
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	1c20      	adds	r0, r4, #0
 8003ff6:	f7fd f90b 	bl	8001210 <chHeapStatus>
 8003ffa:	3801      	subs	r0, #1
 8003ffc:	4243      	negs	r3, r0
 8003ffe:	4158      	adcs	r0, r3
 8004000:	1c31      	adds	r1, r6, #0
 8004002:	f7fc fcfd 	bl	8000a00 <_test_assert>
 8004006:	1e07      	subs	r7, r0, #0
 8004008:	d000      	beq.n	800400c <test_010_001_execute.9361+0x11c>
 800400a:	e78a      	b.n	8003f22 <test_010_001_execute.9361+0x32>
  }

  /* [10.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
 800400c:	2206      	movs	r2, #6
 800400e:	602a      	str	r2, [r5, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004010:	2110      	movs	r1, #16
 8004012:	1c20      	adds	r0, r4, #0
 8004014:	f7fe f8e4 	bl	80021e0 <chHeapAlloc.9355>
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004018:	2110      	movs	r1, #16
  }

  /* [10.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800401a:	4683      	mov	fp, r0
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800401c:	1c20      	adds	r0, r4, #0
 800401e:	f7fe f8df 	bl	80021e0 <chHeapAlloc.9355>
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004022:	2110      	movs	r1, #16

  /* [10.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004024:	4682      	mov	sl, r0
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004026:	1c20      	adds	r0, r4, #0
 8004028:	f7fe f8da 	bl	80021e0 <chHeapAlloc.9355>
    chHeapFree(p3);                                 /* Merges forward.*/
 800402c:	f7fd f928 	bl	8001280 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8004030:	4650      	mov	r0, sl
 8004032:	f7fd f925 	bl	8001280 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8004036:	4658      	mov	r0, fp
 8004038:	f7fd f922 	bl	8001280 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800403c:	1c3a      	adds	r2, r7, #0
 800403e:	4669      	mov	r1, sp
 8004040:	1c20      	adds	r0, r4, #0
 8004042:	f7fd f8e5 	bl	8001210 <chHeapStatus>
 8004046:	3801      	subs	r0, #1
 8004048:	4243      	negs	r3, r0
 800404a:	4158      	adcs	r0, r3
 800404c:	1c31      	adds	r1, r6, #0
 800404e:	f7fc fcd7 	bl	8000a00 <_test_assert>
 8004052:	1e07      	subs	r7, r0, #0
 8004054:	d000      	beq.n	8004058 <test_010_001_execute.9361+0x168>
 8004056:	e764      	b.n	8003f22 <test_010_001_execute.9361+0x32>
  }

  /* [10.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit.*/
  test_set_step(7);
 8004058:	2007      	movs	r0, #7
 800405a:	6028      	str	r0, [r5, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
 800405c:	2111      	movs	r1, #17
 800405e:	1c20      	adds	r0, r4, #0
 8004060:	f7fe f8be 	bl	80021e0 <chHeapAlloc.9355>
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004064:	2110      	movs	r1, #16

  /* [10.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit.*/
  test_set_step(7);
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
 8004066:	4681      	mov	r9, r0
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004068:	1c20      	adds	r0, r4, #0
 800406a:	f7fe f8b9 	bl	80021e0 <chHeapAlloc.9355>
 800406e:	4683      	mov	fp, r0
    chHeapFree(p1);
 8004070:	4648      	mov	r0, r9
 8004072:	f7fd f905 	bl	8001280 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8004076:	1c3a      	adds	r2, r7, #0
 8004078:	4669      	mov	r1, sp
 800407a:	1c20      	adds	r0, r4, #0
 800407c:	f7fd f8c8 	bl	8001210 <chHeapStatus>
 8004080:	4f5c      	ldr	r7, [pc, #368]	; (80041f4 <test_010_001_execute.9361+0x304>)
 8004082:	3802      	subs	r0, #2
 8004084:	4243      	negs	r3, r0
 8004086:	4158      	adcs	r0, r3
 8004088:	1c39      	adds	r1, r7, #0
 800408a:	f7fc fcb9 	bl	8000a00 <_test_assert>
 800408e:	4681      	mov	r9, r0
 8004090:	2800      	cmp	r0, #0
 8004092:	d000      	beq.n	8004096 <test_010_001_execute.9361+0x1a6>
 8004094:	e745      	b.n	8003f22 <test_010_001_execute.9361+0x32>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004096:	2110      	movs	r1, #16
 8004098:	1c20      	adds	r0, r4, #0
 800409a:	f7fe f8a1 	bl	80021e0 <chHeapAlloc.9355>
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800409e:	4669      	mov	r1, sp
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 80040a0:	4682      	mov	sl, r0
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80040a2:	464a      	mov	r2, r9
 80040a4:	1c20      	adds	r0, r4, #0
 80040a6:	f7fd f8b3 	bl	8001210 <chHeapStatus>
 80040aa:	2101      	movs	r1, #1
 80040ac:	4288      	cmp	r0, r1
 80040ae:	d007      	beq.n	80040c0 <test_010_001_execute.9361+0x1d0>
 80040b0:	4669      	mov	r1, sp
 80040b2:	2200      	movs	r2, #0
 80040b4:	1c20      	adds	r0, r4, #0
 80040b6:	f7fd f8ab 	bl	8001210 <chHeapStatus>
 80040ba:	1e81      	subs	r1, r0, #2
 80040bc:	424a      	negs	r2, r1
 80040be:	4151      	adcs	r1, r2
 80040c0:	1c08      	adds	r0, r1, #0
 80040c2:	1c31      	adds	r1, r6, #0
 80040c4:	f7fc fc9c 	bl	8000a00 <_test_assert>
 80040c8:	4681      	mov	r9, r0
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d000      	beq.n	80040d0 <test_010_001_execute.9361+0x1e0>
 80040ce:	e728      	b.n	8003f22 <test_010_001_execute.9361+0x32>
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 80040d0:	4658      	mov	r0, fp
 80040d2:	f7fd f8d5 	bl	8001280 <chHeapFree>
    chHeapFree(p1);
 80040d6:	4650      	mov	r0, sl
 80040d8:	f7fd f8d2 	bl	8001280 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80040dc:	464a      	mov	r2, r9
 80040de:	4669      	mov	r1, sp
 80040e0:	1c20      	adds	r0, r4, #0
 80040e2:	f7fd f895 	bl	8001210 <chHeapStatus>
 80040e6:	3801      	subs	r0, #1
 80040e8:	4243      	negs	r3, r0
 80040ea:	4158      	adcs	r0, r3
 80040ec:	1c31      	adds	r1, r6, #0
 80040ee:	f7fc fc87 	bl	8000a00 <_test_assert>
 80040f2:	4681      	mov	r9, r0
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d000      	beq.n	80040fa <test_010_001_execute.9361+0x20a>
 80040f8:	e713      	b.n	8003f22 <test_010_001_execute.9361+0x32>
  }

  /* [10.1.8] Skipping a fragment, the first fragment in the list is
     too small so the allocator must pick the second one.*/
  test_set_step(8);
 80040fa:	2308      	movs	r3, #8
 80040fc:	602b      	str	r3, [r5, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 80040fe:	2110      	movs	r1, #16
 8004100:	1c20      	adds	r0, r4, #0
 8004102:	f7fe f86d 	bl	80021e0 <chHeapAlloc.9355>
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004106:	2110      	movs	r1, #16

  /* [10.1.8] Skipping a fragment, the first fragment in the list is
     too small so the allocator must pick the second one.*/
  test_set_step(8);
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 8004108:	4683      	mov	fp, r0
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800410a:	1c20      	adds	r0, r4, #0
 800410c:	f7fe f868 	bl	80021e0 <chHeapAlloc.9355>
 8004110:	4682      	mov	sl, r0
    chHeapFree(p1);
 8004112:	4658      	mov	r0, fp
 8004114:	f7fd f8b4 	bl	8001280 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8004118:	4669      	mov	r1, sp
 800411a:	464a      	mov	r2, r9
 800411c:	1c20      	adds	r0, r4, #0
 800411e:	f7fd f877 	bl	8001210 <chHeapStatus>
 8004122:	3802      	subs	r0, #2
 8004124:	1c39      	adds	r1, r7, #0
 8004126:	4243      	negs	r3, r0
 8004128:	4158      	adcs	r0, r3
 800412a:	f7fc fc69 	bl	8000a00 <_test_assert>
 800412e:	1e07      	subs	r7, r0, #0
 8004130:	d000      	beq.n	8004134 <test_010_001_execute.9361+0x244>
 8004132:	e6f6      	b.n	8003f22 <test_010_001_execute.9361+0x32>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
 8004134:	2120      	movs	r1, #32
 8004136:	1c20      	adds	r0, r4, #0
 8004138:	f7fe f852 	bl	80021e0 <chHeapAlloc.9355>
    chHeapFree(p1);
 800413c:	f7fd f8a0 	bl	8001280 <chHeapFree>
    chHeapFree(p2);
 8004140:	4650      	mov	r0, sl
 8004142:	f7fd f89d 	bl	8001280 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004146:	1c3a      	adds	r2, r7, #0
 8004148:	4669      	mov	r1, sp
 800414a:	1c20      	adds	r0, r4, #0
 800414c:	f7fd f860 	bl	8001210 <chHeapStatus>
 8004150:	3801      	subs	r0, #1
 8004152:	4243      	negs	r3, r0
 8004154:	4158      	adcs	r0, r3
 8004156:	1c31      	adds	r1, r6, #0
 8004158:	f7fc fc52 	bl	8000a00 <_test_assert>
 800415c:	1e02      	subs	r2, r0, #0
 800415e:	d000      	beq.n	8004162 <test_010_001_execute.9361+0x272>
 8004160:	e6df      	b.n	8003f22 <test_010_001_execute.9361+0x32>
  }

  /* [10.1.9] Allocating the whole available space.*/
  test_set_step(9);
 8004162:	2109      	movs	r1, #9
 8004164:	6029      	str	r1, [r5, #0]
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 8004166:	1c20      	adds	r0, r4, #0
 8004168:	4669      	mov	r1, sp
 800416a:	f7fd f851 	bl	8001210 <chHeapStatus>
    p1 = chHeapAlloc(&test_heap, n);
 800416e:	9900      	ldr	r1, [sp, #0]
 8004170:	1c20      	adds	r0, r4, #0
 8004172:	f7fe f835 	bl	80021e0 <chHeapAlloc.9355>
    test_assert(p1 != NULL, "allocation failed");
 8004176:	4641      	mov	r1, r8

  /* [10.1.9] Allocating the whole available space.*/
  test_set_step(9);
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
    p1 = chHeapAlloc(&test_heap, n);
 8004178:	4681      	mov	r9, r0
    test_assert(p1 != NULL, "allocation failed");
 800417a:	1e43      	subs	r3, r0, #1
 800417c:	4198      	sbcs	r0, r3
 800417e:	f7fc fc3f 	bl	8000a00 <_test_assert>
 8004182:	1e02      	subs	r2, r0, #0
 8004184:	d000      	beq.n	8004188 <test_010_001_execute.9361+0x298>
 8004186:	e6cc      	b.n	8003f22 <test_010_001_execute.9361+0x32>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8004188:	1c11      	adds	r1, r2, #0
 800418a:	1c20      	adds	r0, r4, #0
 800418c:	f7fd f840 	bl	8001210 <chHeapStatus>
 8004190:	4919      	ldr	r1, [pc, #100]	; (80041f8 <test_010_001_execute.9361+0x308>)
 8004192:	4243      	negs	r3, r0
 8004194:	4158      	adcs	r0, r3
 8004196:	f7fc fc33 	bl	8000a00 <_test_assert>
 800419a:	1e07      	subs	r7, r0, #0
 800419c:	d000      	beq.n	80041a0 <test_010_001_execute.9361+0x2b0>
 800419e:	e6c0      	b.n	8003f22 <test_010_001_execute.9361+0x32>
    chHeapFree(p1);
 80041a0:	4648      	mov	r0, r9
 80041a2:	f7fd f86d 	bl	8001280 <chHeapFree>
  }

  /* [10.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
 80041a6:	220a      	movs	r2, #10
 80041a8:	602a      	str	r2, [r5, #0]
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80041aa:	4669      	mov	r1, sp
 80041ac:	1c20      	adds	r0, r4, #0
 80041ae:	1c3a      	adds	r2, r7, #0
 80041b0:	f7fd f82e 	bl	8001210 <chHeapStatus>
 80041b4:	3801      	subs	r0, #1
 80041b6:	4243      	negs	r3, r0
 80041b8:	4158      	adcs	r0, r3
 80041ba:	1c31      	adds	r1, r6, #0
 80041bc:	f7fc fc20 	bl	8000a00 <_test_assert>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d000      	beq.n	80041c6 <test_010_001_execute.9361+0x2d6>
 80041c4:	e6ad      	b.n	8003f22 <test_010_001_execute.9361+0x32>
    test_assert(n == sz, "size changed");
 80041c6:	9d00      	ldr	r5, [sp, #0]
 80041c8:	9c01      	ldr	r4, [sp, #4]
 80041ca:	490c      	ldr	r1, [pc, #48]	; (80041fc <test_010_001_execute.9361+0x30c>)
 80041cc:	1b28      	subs	r0, r5, r4
 80041ce:	4243      	negs	r3, r0
 80041d0:	4158      	adcs	r0, r3
 80041d2:	f7fc fc15 	bl	8000a00 <_test_assert>
 80041d6:	e6a4      	b.n	8003f22 <test_010_001_execute.9361+0x32>
 80041d8:	2000106c 	.word	0x2000106c
 80041dc:	20000538 	.word	0x20000538
 80041e0:	080062a0 	.word	0x080062a0
 80041e4:	0800658c 	.word	0x0800658c
 80041e8:	080065a4 	.word	0x080065a4
 80041ec:	080065b8 	.word	0x080065b8
 80041f0:	080065cc 	.word	0x080065cc
 80041f4:	080065e4 	.word	0x080065e4
 80041f8:	080064e8 	.word	0x080064e8
 80041fc:	080065f4 	.word	0x080065f4

08004200 <test_010_002_execute.9359>:
 *   block is freed using chHeapFree(), must not fail.
 * - [10.2.2] Testing allocation failure.
 * .
 */

static void test_010_002_execute(void) {
 8004200:	b530      	push	{r4, r5, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [10.2.1] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8004202:	4c13      	ldr	r4, [pc, #76]	; (8004250 <test_010_002_execute.9359+0x50>)
 *   block is freed using chHeapFree(), must not fail.
 * - [10.2.2] Testing allocation failure.
 * .
 */

static void test_010_002_execute(void) {
 8004204:	b083      	sub	sp, #12
  void *p1;
  size_t total_size, largest_size;

  /* [10.2.1] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8004206:	2301      	movs	r3, #1
 8004208:	6023      	str	r3, [r4, #0]
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 800420a:	4669      	mov	r1, sp
 800420c:	aa01      	add	r2, sp, #4
 800420e:	2000      	movs	r0, #0
 8004210:	f7fc fffe 	bl	8001210 <chHeapStatus>
 8004214:	2110      	movs	r1, #16
 8004216:	480f      	ldr	r0, [pc, #60]	; (8004254 <test_010_002_execute.9359+0x54>)
 8004218:	f7fd ff52 	bl	80020c0 <chHeapAllocAligned.constprop.30>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800421c:	490e      	ldr	r1, [pc, #56]	; (8004258 <test_010_002_execute.9359+0x58>)
 800421e:	1c05      	adds	r5, r0, #0
 8004220:	1e43      	subs	r3, r0, #1
 8004222:	4198      	sbcs	r0, r3
 8004224:	f7fc fbec 	bl	8000a00 <_test_assert>
 8004228:	2800      	cmp	r0, #0
 800422a:	d001      	beq.n	8004230 <test_010_002_execute.9359+0x30>
  test_set_step(2);
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
}
 800422c:	b003      	add	sp, #12
 800422e:	bd30      	pop	{r4, r5, pc}
  test_set_step(1);
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 8004230:	1c28      	adds	r0, r5, #0
 8004232:	f7fd f825 	bl	8001280 <chHeapFree>
  }

  /* [10.2.2] Testing allocation failure.*/
  test_set_step(2);
 8004236:	2002      	movs	r0, #2
 8004238:	6020      	str	r0, [r4, #0]
 800423a:	4908      	ldr	r1, [pc, #32]	; (800425c <test_010_002_execute.9359+0x5c>)
 800423c:	2000      	movs	r0, #0
 800423e:	f7fd ff3f 	bl	80020c0 <chHeapAllocAligned.constprop.30>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8004242:	4907      	ldr	r1, [pc, #28]	; (8004260 <test_010_002_execute.9359+0x60>)
 8004244:	4243      	negs	r3, r0
 8004246:	4158      	adcs	r0, r3
 8004248:	f7fc fbda 	bl	8000a00 <_test_assert>
 800424c:	e7ee      	b.n	800422c <test_010_002_execute.9359+0x2c>
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	2000106c 	.word	0x2000106c
 8004254:	20000538 	.word	0x20000538
 8004258:	080065a4 	.word	0x080065a4
 800425c:	ffffff00 	.word	0xffffff00
 8004260:	0800658c 	.word	0x0800658c
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46c0      	nop			; (mov r8, r8)

08004270 <thread4.8333>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static THD_FUNCTION(thread4, p) {
 8004270:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004272:	b672      	cpsid	i
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004274:	6883      	ldr	r3, [r0, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	dd03      	ble.n	8004282 <thread4.8333+0x12>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800427a:	f7fc fcd1 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800427e:	b662      	cpsie	i

  chBSemSignal((binary_semaphore_t *)p);
}
 8004280:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
    chSemSignalI(&bsp->sem);
 8004282:	f7fd f8c5 	bl	8001410 <chSemSignalI>
 8004286:	e7f8      	b.n	800427a <thread4.8333+0xa>
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46c0      	nop			; (mov r8, r8)

08004290 <VectorAC.4215>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8004292:	4c59      	ldr	r4, [pc, #356]	; (80043f8 <VectorAC.4215+0x168>)
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004294:	4646      	mov	r6, r8
 8004296:	464f      	mov	r7, r9
 8004298:	b4c0      	push	{r6, r7}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800429a:	6f66      	ldr	r6, [r4, #116]	; 0x74
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 800429c:	46f0      	mov	r8, lr
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint32_t cr1 = u->CR1;
 800429e:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 80042a0:	69f5      	ldr	r5, [r6, #28]
  u->ICR = isr;
 80042a2:	6235      	str	r5, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 80042a4:	072a      	lsls	r2, r5, #28
 80042a6:	d148      	bne.n	800433a <VectorAC.4215+0xaa>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 80042a8:	05ea      	lsls	r2, r5, #23
 80042aa:	d43e      	bmi.n	800432a <VectorAC.4215+0x9a>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 80042ac:	06ab      	lsls	r3, r5, #26
 80042ae:	d417      	bmi.n	80042e0 <VectorAC.4215+0x50>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 80042b0:	2080      	movs	r0, #128	; 0x80
 80042b2:	4238      	tst	r0, r7
 80042b4:	d001      	beq.n	80042ba <VectorAC.4215+0x2a>
 80042b6:	4228      	tst	r0, r5
 80042b8:	d155      	bne.n	8004366 <VectorAC.4215+0xd6>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 80042ba:	066b      	lsls	r3, r5, #25
 80042bc:	d509      	bpl.n	80042d2 <VectorAC.4215+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042be:	b672      	cpsid	i
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80042c0:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80042c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042c4:	4285      	cmp	r5, r0
 80042c6:	d100      	bne.n	80042ca <VectorAC.4215+0x3a>
 80042c8:	e071      	b.n	80043ae <VectorAC.4215+0x11e>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80042ca:	2440      	movs	r4, #64	; 0x40
 80042cc:	43a7      	bics	r7, r4
 80042ce:	6037      	str	r7, [r6, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80042d0:	b662      	cpsie	i

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80042d2:	4640      	mov	r0, r8
 80042d4:	f7fc fc14 	bl	8000b00 <_port_irq_epilogue>
}
 80042d8:	bc0c      	pop	{r2, r3}
 80042da:	4690      	mov	r8, r2
 80042dc:	4699      	mov	r9, r3
 80042de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042e0:	b672      	cpsid	i
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 80042e2:	227c      	movs	r2, #124	; 0x7c
 80042e4:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
 80042e6:	5ca3      	ldrb	r3, [r4, r2]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80042e8:	6961      	ldr	r1, [r4, #20]
 80042ea:	4003      	ands	r3, r0
 80042ec:	4699      	mov	r9, r3
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d066      	beq.n	80043c0 <VectorAC.4215+0x130>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 80042f2:	6a20      	ldr	r0, [r4, #32]
 80042f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042f6:	4290      	cmp	r0, r2
 80042f8:	d067      	beq.n	80043ca <VectorAC.4215+0x13a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 80042fa:	6961      	ldr	r1, [r4, #20]
  *iqp->q_wrptr++ = b;
 80042fc:	464a      	mov	r2, r9

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 80042fe:	3101      	adds	r1, #1
 8004300:	6161      	str	r1, [r4, #20]
  *iqp->q_wrptr++ = b;
 8004302:	7002      	strb	r2, [r0, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8004304:	69e3      	ldr	r3, [r4, #28]
  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
 8004306:	3001      	adds	r0, #1
 8004308:	6220      	str	r0, [r4, #32]
  if (iqp->q_wrptr >= iqp->q_top) {
 800430a:	4298      	cmp	r0, r3
 800430c:	d24c      	bcs.n	80043a8 <VectorAC.4215+0x118>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800430e:	1c21      	adds	r1, r4, #0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8004310:	68e0      	ldr	r0, [r4, #12]
 8004312:	310c      	adds	r1, #12
 8004314:	4288      	cmp	r0, r1
 8004316:	d006      	beq.n	8004326 <VectorAC.4215+0x96>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8004318:	6802      	ldr	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800431a:	2300      	movs	r3, #0
 800431c:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800431e:	6051      	str	r1, [r2, #4]
 8004320:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8004322:	f7fc fe05 	bl	8000f30 <chSchReadyI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004326:	b662      	cpsie	i
 8004328:	e7c2      	b.n	80042b0 <VectorAC.4215+0x20>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800432a:	b672      	cpsid	i
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	4833      	ldr	r0, [pc, #204]	; (80043fc <VectorAC.4215+0x16c>)
 8004330:	0089      	lsls	r1, r1, #2
 8004332:	f7fc fe6d 	bl	8001010 <chEvtBroadcastFlagsI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004336:	b662      	cpsie	i
 8004338:	e7b8      	b.n	80042ac <VectorAC.4215+0x1c>
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
 800433a:	0729      	lsls	r1, r5, #28
    sts |= SD_OVERRUN_ERROR;
 800433c:	0fc8      	lsrs	r0, r1, #31
 800433e:	01c1      	lsls	r1, r0, #7
  if (isr & USART_ISR_PE)
 8004340:	07eb      	lsls	r3, r5, #31
 8004342:	d501      	bpl.n	8004348 <VectorAC.4215+0xb8>
    sts |= SD_PARITY_ERROR;
 8004344:	2320      	movs	r3, #32
 8004346:	4319      	orrs	r1, r3
  if (isr & USART_ISR_FE)
 8004348:	07aa      	lsls	r2, r5, #30
 800434a:	d501      	bpl.n	8004350 <VectorAC.4215+0xc0>
    sts |= SD_FRAMING_ERROR;
 800434c:	2240      	movs	r2, #64	; 0x40
 800434e:	4311      	orrs	r1, r2
  if (isr & USART_ISR_NE)
 8004350:	076b      	lsls	r3, r5, #29
 8004352:	d502      	bpl.n	800435a <VectorAC.4215+0xca>
    sts |= SD_NOISE_ERROR;
 8004354:	2080      	movs	r0, #128	; 0x80
 8004356:	0043      	lsls	r3, r0, #1
 8004358:	4319      	orrs	r1, r3
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800435a:	b672      	cpsid	i
 800435c:	4827      	ldr	r0, [pc, #156]	; (80043fc <VectorAC.4215+0x16c>)
 800435e:	f7fc fe57 	bl	8001010 <chEvtBroadcastFlagsI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004362:	b662      	cpsie	i
 8004364:	e7a0      	b.n	80042a8 <VectorAC.4215+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004366:	b672      	cpsid	i
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8004368:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800436a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800436c:	428a      	cmp	r2, r1
 800436e:	d034      	beq.n	80043da <VectorAC.4215+0x14a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8004370:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8004372:	6c23      	ldr	r3, [r4, #64]	; 0x40

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8004374:	3001      	adds	r0, #1
 8004376:	63a0      	str	r0, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8004378:	780a      	ldrb	r2, [r1, #0]
 800437a:	3101      	adds	r1, #1
 800437c:	4691      	mov	r9, r2
 800437e:	64a1      	str	r1, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8004380:	4299      	cmp	r1, r3
 8004382:	d301      	bcc.n	8004388 <VectorAC.4215+0xf8>
    oqp->q_rdptr = oqp->q_buffer;
 8004384:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004386:	64a1      	str	r1, [r4, #72]	; 0x48
 8004388:	1c23      	adds	r3, r4, #0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 800438a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800438c:	3330      	adds	r3, #48	; 0x30
 800438e:	4298      	cmp	r0, r3
 8004390:	d006      	beq.n	80043a0 <VectorAC.4215+0x110>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8004392:	6802      	ldr	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8004394:	2100      	movs	r1, #0
 8004396:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8004398:	6053      	str	r3, [r2, #4]
 800439a:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800439c:	f7fc fdc8 	bl	8000f30 <chSchReadyI>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 80043a0:	4648      	mov	r0, r9
 80043a2:	8530      	strh	r0, [r6, #40]	; 0x28
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80043a4:	b662      	cpsie	i
 80043a6:	e788      	b.n	80042ba <VectorAC.4215+0x2a>
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 80043a8:	69a0      	ldr	r0, [r4, #24]
 80043aa:	6220      	str	r0, [r4, #32]
 80043ac:	e7af      	b.n	800430e <VectorAC.4215+0x7e>
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80043ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d100      	bne.n	80043b6 <VectorAC.4215+0x126>
 80043b4:	e789      	b.n	80042ca <VectorAC.4215+0x3a>
 80043b6:	1d20      	adds	r0, r4, #4
 80043b8:	2110      	movs	r1, #16
 80043ba:	f7fc fe29 	bl	8001010 <chEvtBroadcastFlagsI>
 80043be:	e784      	b.n	80042ca <VectorAC.4215+0x3a>
 80043c0:	1d20      	adds	r0, r4, #4
 80043c2:	2104      	movs	r1, #4
 80043c4:	f7fc fe24 	bl	8001010 <chEvtBroadcastFlagsI>
 80043c8:	e793      	b.n	80042f2 <VectorAC.4215+0x62>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 80043ca:	6963      	ldr	r3, [r4, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d094      	beq.n	80042fa <VectorAC.4215+0x6a>
 80043d0:	1d20      	adds	r0, r4, #4
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	f7fc fe1c 	bl	8001010 <chEvtBroadcastFlagsI>
 80043d8:	e7a5      	b.n	8004326 <VectorAC.4215+0x96>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 80043da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0c7      	beq.n	8004370 <VectorAC.4215+0xe0>
 80043e0:	2108      	movs	r1, #8
 80043e2:	1d20      	adds	r0, r4, #4
 80043e4:	f7fc fe14 	bl	8001010 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80043e8:	23c0      	movs	r3, #192	; 0xc0
 80043ea:	1c3a      	adds	r2, r7, #0
 80043ec:	439a      	bics	r2, r3
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	4311      	orrs	r1, r2
 80043f2:	6031      	str	r1, [r6, #0]
 80043f4:	e7d6      	b.n	80043a4 <VectorAC.4215+0x114>
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	20000e30 	.word	0x20000e30
 80043fc:	20000e34 	.word	0x20000e34

08004400 <evt_thread7.8877>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(evt_thread7, p) {
 8004400:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004402:	b672      	cpsid	i
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8004404:	4809      	ldr	r0, [pc, #36]	; (800442c <evt_thread7.8877+0x2c>)
 8004406:	2100      	movs	r1, #0
 8004408:	f7fc fe02 	bl	8001010 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800440c:	f7fc fc08 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004410:	b662      	cpsie	i

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8004412:	20fa      	movs	r0, #250	; 0xfa
 8004414:	0040      	lsls	r0, r0, #1
 8004416:	f001 f813 	bl	8005440 <chThdSleep>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800441a:	b672      	cpsid	i
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 800441c:	4804      	ldr	r0, [pc, #16]	; (8004430 <evt_thread7.8877+0x30>)
 800441e:	2100      	movs	r1, #0
 8004420:	f7fc fdf6 	bl	8001010 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8004424:	f7fc fbfc 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004428:	b662      	cpsie	i
  chEvtBroadcast(&es2);
}
 800442a:	bd08      	pop	{r3, pc}
 800442c:	20000434 	.word	0x20000434
 8004430:	20000430 	.word	0x20000430
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46c0      	nop			; (mov r8, r8)

08004440 <test_005_005_execute.8584>:

static void test_005_005_setup(void) {
  chMtxObjectInit(&m1);
}

static void test_005_005_execute(void) {
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	4656      	mov	r6, sl
 8004444:	464d      	mov	r5, r9
 8004446:	4644      	mov	r4, r8
 8004448:	465f      	mov	r7, fp
 800444a:	b4f0      	push	{r4, r5, r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 800444c:	4e54      	ldr	r6, [pc, #336]	; (80045a0 <test_005_005_execute.8584+0x160>)
    prio = chThdGetPriorityX();
  }

  /* [5.5.2] Locking the mutex first time, it must be possible because
     it is not owned.*/
  test_set_step(2);
 800444e:	4d55      	ldr	r5, [pc, #340]	; (80045a4 <test_005_005_execute.8584+0x164>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8004450:	69b3      	ldr	r3, [r6, #24]
 8004452:	2002      	movs	r0, #2
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	6028      	str	r0, [r5, #0]
 8004458:	4690      	mov	r8, r2
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800445a:	b672      	cpsid	i
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 800445c:	4c52      	ldr	r4, [pc, #328]	; (80045a8 <test_005_005_execute.8584+0x168>)
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800445e:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8004460:	68a1      	ldr	r1, [r4, #8]
 8004462:	2900      	cmp	r1, #0
 8004464:	d100      	bne.n	8004468 <test_005_005_execute.8584+0x28>
 8004466:	e070      	b.n	800454a <test_005_005_execute.8584+0x10a>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004468:	b662      	cpsie	i
  {
    b = chMtxTryLock(&m1);
    test_assert(b, "already locked");
 800446a:	4f50      	ldr	r7, [pc, #320]	; (80045ac <test_005_005_execute.8584+0x16c>)
 800446c:	1c39      	adds	r1, r7, #0
 800446e:	f7fc fac7 	bl	8000a00 <_test_assert>
 8004472:	2800      	cmp	r0, #0
 8004474:	d005      	beq.n	8004482 <test_005_005_execute.8584+0x42>
  /* [5.5.7] Testing that priority has not changed after operations.*/
  test_set_step(7);
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  }
}
 8004476:	bc3c      	pop	{r2, r3, r4, r5}
 8004478:	4690      	mov	r8, r2
 800447a:	4699      	mov	r9, r3
 800447c:	46a2      	mov	sl, r4
 800447e:	46ab      	mov	fp, r5
 8004480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(b, "already locked");
  }

  /* [5.5.3] Locking the mutex second time, it must fail because it is
     already owned.*/
  test_set_step(3);
 8004482:	2203      	movs	r2, #3
 8004484:	602a      	str	r2, [r5, #0]
  {
    b = chMtxTryLock(&m1);
 8004486:	f7fe fee3 	bl	8003250 <chMtxTryLock.constprop.49>
    test_assert(!b, "not locked");
 800448a:	2101      	movs	r1, #1
 800448c:	468a      	mov	sl, r1
 800448e:	4a48      	ldr	r2, [pc, #288]	; (80045b0 <test_005_005_execute.8584+0x170>)
 8004490:	4653      	mov	r3, sl
 8004492:	4058      	eors	r0, r3
 8004494:	b2c0      	uxtb	r0, r0
 8004496:	1c11      	adds	r1, r2, #0
 8004498:	4691      	mov	r9, r2
 800449a:	f7fc fab1 	bl	8000a00 <_test_assert>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d1e9      	bne.n	8004476 <test_005_005_execute.8584+0x36>
  }

  /* [5.5.4] Unlocking the mutex then it must not be owned anymore and
     the queue must be empty.*/
  test_set_step(4);
 80044a2:	2004      	movs	r0, #4
 80044a4:	6028      	str	r0, [r5, #0]
  {
    chMtxUnlock(&m1);
 80044a6:	1c20      	adds	r0, r4, #0
 80044a8:	f7fc fdf2 	bl	8001090 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	4248      	negs	r0, r1
 80044b0:	4148      	adcs	r0, r1
 80044b2:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <test_005_005_execute.8584+0x174>)
 80044b4:	1c19      	adds	r1, r3, #0
 80044b6:	469b      	mov	fp, r3
 80044b8:	f7fc faa2 	bl	8000a00 <_test_assert>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d1da      	bne.n	8004476 <test_005_005_execute.8584+0x36>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next == (const thread_t *)tqp);
 80044c0:	6822      	ldr	r2, [r4, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80044c2:	493d      	ldr	r1, [pc, #244]	; (80045b8 <test_005_005_execute.8584+0x178>)
 80044c4:	1b10      	subs	r0, r2, r4
 80044c6:	4243      	negs	r3, r0
 80044c8:	4158      	adcs	r0, r3
 80044ca:	f7fc fa99 	bl	8000a00 <_test_assert>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d1d1      	bne.n	8004476 <test_005_005_execute.8584+0x36>
 80044d2:	69b1      	ldr	r1, [r6, #24]
  }

  /* [5.5.5] Testing that priority has not changed after operations.*/
  test_set_step(5);
 80044d4:	2005      	movs	r0, #5
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80044d6:	688a      	ldr	r2, [r1, #8]
 80044d8:	4643      	mov	r3, r8
    test_assert(m1.owner == NULL, "still owned");
    test_assert(queue_isempty(&m1.queue), "queue not empty");
  }

  /* [5.5.5] Testing that priority has not changed after operations.*/
  test_set_step(5);
 80044da:	6028      	str	r0, [r5, #0]
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80044dc:	1a98      	subs	r0, r3, r2
 80044de:	4243      	negs	r3, r0
 80044e0:	4158      	adcs	r0, r3
 80044e2:	4936      	ldr	r1, [pc, #216]	; (80045bc <test_005_005_execute.8584+0x17c>)
 80044e4:	f7fc fa8c 	bl	8000a00 <_test_assert>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d1c4      	bne.n	8004476 <test_005_005_execute.8584+0x36>
  }

  /* [5.5.6] Testing chMtxUnlockAll() behavior.*/
  test_set_step(6);
 80044ec:	2006      	movs	r0, #6
 80044ee:	6028      	str	r0, [r5, #0]
  {
    b = chMtxTryLock(&m1);
 80044f0:	f7fe feae 	bl	8003250 <chMtxTryLock.constprop.49>
    test_assert(b, "already locked");
 80044f4:	1c39      	adds	r1, r7, #0
 80044f6:	f7fc fa83 	bl	8000a00 <_test_assert>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d1bb      	bne.n	8004476 <test_005_005_execute.8584+0x36>
    b = chMtxTryLock(&m1);
 80044fe:	f7fe fea7 	bl	8003250 <chMtxTryLock.constprop.49>
    test_assert(!b, "not locked");
 8004502:	4657      	mov	r7, sl
 8004504:	4078      	eors	r0, r7
 8004506:	b2c0      	uxtb	r0, r0
 8004508:	4649      	mov	r1, r9
 800450a:	f7fc fa79 	bl	8000a00 <_test_assert>
 800450e:	2800      	cmp	r0, #0
 8004510:	d1b1      	bne.n	8004476 <test_005_005_execute.8584+0x36>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8004512:	69b7      	ldr	r7, [r6, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004514:	b672      	cpsid	i

  chSysLock();
  if (ctp->mtxlist != NULL) {
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d021      	beq.n	8004560 <test_005_005_execute.8584+0x120>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800451c:	2100      	movs	r1, #0
 800451e:	468a      	mov	sl, r1
 8004520:	e00b      	b.n	800453a <test_005_005_execute.8584+0xfa>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8004522:	6801      	ldr	r1, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
        mp->next = tp->mtxlist;
 8004524:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next->queue.prev = (thread_t *)tqp;
 8004526:	604b      	str	r3, [r1, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8004528:	6019      	str	r1, [r3, #0]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
 800452a:	6098      	str	r0, [r3, #8]
        mp->next = tp->mtxlist;
 800452c:	60da      	str	r2, [r3, #12]
        tp->mtxlist = mp;
 800452e:	6383      	str	r3, [r0, #56]	; 0x38
        (void) chSchReadyI(tp);
 8004530:	f7fc fcfe 	bl	8000f30 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (ctp->mtxlist != NULL);
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00e      	beq.n	8004558 <test_005_005_execute.8584+0x118>

  chSysLock();
  if (ctp->mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->mtxlist;
      ctp->mtxlist = mp->next;
 800453a:	68da      	ldr	r2, [r3, #12]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	63ba      	str	r2, [r7, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8004540:	4283      	cmp	r3, r0
 8004542:	d1ee      	bne.n	8004522 <test_005_005_execute.8584+0xe2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8004544:	4650      	mov	r0, sl
 8004546:	6098      	str	r0, [r3, #8]
 8004548:	e7f4      	b.n	8004534 <test_005_005_execute.8584+0xf4>

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 800454a:	69b7      	ldr	r7, [r6, #24]
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
 800454c:	2001      	movs	r0, #1
  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
  mp->next = currp->mtxlist;
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8004550:	60a7      	str	r7, [r4, #8]
  mp->next = currp->mtxlist;
 8004552:	60e3      	str	r3, [r4, #12]
  currp->mtxlist = mp;
 8004554:	63bc      	str	r4, [r7, #56]	; 0x38
 8004556:	e787      	b.n	8004468 <test_005_005_execute.8584+0x28>
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (ctp->mtxlist != NULL);
    ctp->prio = ctp->realprio;
 8004558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800455a:	60b8      	str	r0, [r7, #8]
    chSchRescheduleS();
 800455c:	f7fc fb60 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004560:	b662      	cpsie	i

    chMtxUnlockAll();
    test_assert(m1.owner == NULL, "still owned");
 8004562:	68a7      	ldr	r7, [r4, #8]
 8004564:	4659      	mov	r1, fp
 8004566:	4278      	negs	r0, r7
 8004568:	4178      	adcs	r0, r7
 800456a:	f7fc fa49 	bl	8000a00 <_test_assert>
 800456e:	2800      	cmp	r0, #0
 8004570:	d000      	beq.n	8004574 <test_005_005_execute.8584+0x134>
 8004572:	e780      	b.n	8004476 <test_005_005_execute.8584+0x36>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next == (const thread_t *)tqp);
 8004574:	6821      	ldr	r1, [r4, #0]
 8004576:	1b08      	subs	r0, r1, r4
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8004578:	4244      	negs	r4, r0
 800457a:	4160      	adcs	r0, r4
 800457c:	490e      	ldr	r1, [pc, #56]	; (80045b8 <test_005_005_execute.8584+0x178>)
 800457e:	f7fc fa3f 	bl	8000a00 <_test_assert>
 8004582:	2800      	cmp	r0, #0
 8004584:	d000      	beq.n	8004588 <test_005_005_execute.8584+0x148>
 8004586:	e776      	b.n	8004476 <test_005_005_execute.8584+0x36>
 8004588:	69b6      	ldr	r6, [r6, #24]
  }

  /* [5.5.7] Testing that priority has not changed after operations.*/
  test_set_step(7);
 800458a:	2407      	movs	r4, #7
 800458c:	602c      	str	r4, [r5, #0]
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800458e:	68b5      	ldr	r5, [r6, #8]
 8004590:	4642      	mov	r2, r8
 8004592:	1b50      	subs	r0, r2, r5
 8004594:	4243      	negs	r3, r0
 8004596:	4158      	adcs	r0, r3
 8004598:	4908      	ldr	r1, [pc, #32]	; (80045bc <test_005_005_execute.8584+0x17c>)
 800459a:	f7fc fa31 	bl	8000a00 <_test_assert>
 800459e:	e76a      	b.n	8004476 <test_005_005_execute.8584+0x36>
 80045a0:	20000ff8 	.word	0x20000ff8
 80045a4:	2000106c 	.word	0x2000106c
 80045a8:	20000420 	.word	0x20000420
 80045ac:	08006604 	.word	0x08006604
 80045b0:	08006614 	.word	0x08006614
 80045b4:	08006620 	.word	0x08006620
 80045b8:	0800627c 	.word	0x0800627c
 80045bc:	0800624c 	.word	0x0800624c

080045c0 <test_003_001_execute.8180>:

static void test_003_001_setup(void) {
  tr1 = NULL;
}

static void test_003_001_execute(void) {
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80045c2:	4d2e      	ldr	r5, [pc, #184]	; (800467c <test_003_001_execute.8180+0xbc>)
 80045c4:	4646      	mov	r6, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80045c6:	69a8      	ldr	r0, [r5, #24]
 80045c8:	464f      	mov	r7, r9
 80045ca:	b4c0      	push	{r6, r7}
  /* [3.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80045cc:	6881      	ldr	r1, [r0, #8]
  msg_t msg;

  /* [3.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 80045ce:	4e2c      	ldr	r6, [pc, #176]	; (8004680 <test_003_001_execute.8180+0xc0>)
 80045d0:	2301      	movs	r3, #1
 80045d2:	6033      	str	r3, [r6, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80045d4:	3901      	subs	r1, #1
 80045d6:	4a2b      	ldr	r2, [pc, #172]	; (8004684 <test_003_001_execute.8180+0xc4>)
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <test_003_001_execute.8180+0xc8>)
 80045da:	482c      	ldr	r0, [pc, #176]	; (800468c <test_003_001_execute.8180+0xcc>)
 80045dc:	f7fd f8e0 	bl	80017a0 <chThdCreateStatic.constprop.56>
 80045e0:	492b      	ldr	r1, [pc, #172]	; (8004690 <test_003_001_execute.8180+0xd0>)
 80045e2:	6008      	str	r0, [r1, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045e4:	b672      	cpsid	i

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80045e6:	4c2b      	ldr	r4, [pc, #172]	; (8004694 <test_003_001_execute.8180+0xd4>)
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80045e8:	69aa      	ldr	r2, [r5, #24]
 80045ea:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 80045ec:	6254      	str	r4, [r2, #36]	; 0x24

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80045ee:	6022      	str	r2, [r4, #0]
 80045f0:	f7fc fbfe 	bl	8000df0 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 80045f4:	69af      	ldr	r7, [r5, #24]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	4698      	mov	r8, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80045fa:	b662      	cpsie	i
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 80045fc:	4f26      	ldr	r7, [pc, #152]	; (8004698 <test_003_001_execute.8180+0xd8>)
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	4248      	negs	r0, r1
 8004602:	4148      	adcs	r0, r1
 8004604:	1c39      	adds	r1, r7, #0
 8004606:	f7fc f9fb 	bl	8000a00 <_test_assert>
 800460a:	2800      	cmp	r0, #0
 800460c:	d003      	beq.n	8004616 <test_003_001_execute.8180+0x56>
                            time + MS2ST(1000) + CH_CFG_ST_TIMEDELTA,
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 800460e:	bc0c      	pop	{r2, r3}
 8004610:	4690      	mov	r8, r2
 8004612:	4699      	mov	r9, r3
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_OK == msg,"wrong returned message");
 8004616:	4642      	mov	r2, r8
 8004618:	4250      	negs	r0, r2
 800461a:	4150      	adcs	r0, r2
 800461c:	4b1f      	ldr	r3, [pc, #124]	; (800469c <test_003_001_execute.8180+0xdc>)
 800461e:	1c19      	adds	r1, r3, #0
 8004620:	4699      	mov	r9, r3
 8004622:	f7fc f9ed 	bl	8000a00 <_test_assert>
 8004626:	2800      	cmp	r0, #0
 8004628:	d1f1      	bne.n	800460e <test_003_001_execute.8180+0x4e>
    test_wait_threads();
 800462a:	f7fc feb1 	bl	8001390 <test_wait_threads>
  }

  /* [3.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 800462e:	2002      	movs	r0, #2
 8004630:	6030      	str	r0, [r6, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004632:	b672      	cpsid	i
 8004634:	2680      	movs	r6, #128	; 0x80
 8004636:	69ad      	ldr	r5, [r5, #24]
 8004638:	05f1      	lsls	r1, r6, #23
 800463a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800463c:	2003      	movs	r0, #3
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->u.wttrp = trp;
 800463e:	626c      	str	r4, [r5, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8004640:	4917      	ldr	r1, [pc, #92]	; (80046a0 <test_003_001_execute.8180+0xe0>)

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8004642:	6025      	str	r5, [r4, #0]
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8004644:	f7ff f8d4 	bl	80037f0 <chSchGoSleepTimeoutS>
 8004648:	1c05      	adds	r5, r0, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800464a:	b662      	cpsie	i
  {
    chSysLock();
    time = chVTGetSystemTimeX();
    msg = chThdSuspendTimeoutS(&tr1, MS2ST(1000));
    chSysUnlock();
    test_assert_time_window(time + MS2ST(1000),
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <test_003_001_execute.8180+0xe0>)
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <test_003_001_execute.8180+0xe4>)
 8004650:	18b0      	adds	r0, r6, r2
 8004652:	18f1      	adds	r1, r6, r3
 8004654:	f7fb ffec 	bl	8000630 <_test_assert_time_window.constprop.5>
 8004658:	2800      	cmp	r0, #0
 800465a:	d1d8      	bne.n	800460e <test_003_001_execute.8180+0x4e>
                            time + MS2ST(1000) + CH_CFG_ST_TIMEDELTA,
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	1c39      	adds	r1, r7, #0
 8004660:	4243      	negs	r3, r0
 8004662:	4158      	adcs	r0, r3
 8004664:	f7fc f9cc 	bl	8000a00 <_test_assert>
 8004668:	2800      	cmp	r0, #0
 800466a:	d1d0      	bne.n	800460e <test_003_001_execute.8180+0x4e>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800466c:	1c68      	adds	r0, r5, #1
 800466e:	4245      	negs	r5, r0
 8004670:	4168      	adcs	r0, r5
 8004672:	4649      	mov	r1, r9
 8004674:	f7fc f9c4 	bl	8000a00 <_test_assert>
 8004678:	e7c9      	b.n	800460e <test_003_001_execute.8180+0x4e>
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	20000ff8 	.word	0x20000ff8
 8004680:	2000106c 	.word	0x2000106c
 8004684:	08001681 	.word	0x08001681
 8004688:	08006248 	.word	0x08006248
 800468c:	20000558 	.word	0x20000558
 8004690:	20000bd0 	.word	0x20000bd0
 8004694:	20000530 	.word	0x20000530
 8004698:	0800662c 	.word	0x0800662c
 800469c:	08006204 	.word	0x08006204
 80046a0:	00002710 	.word	0x00002710
 80046a4:	00002712 	.word	0x00002712
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46c0      	nop			; (mov r8, r8)
 80046ae:	46c0      	nop			; (mov r8, r8)

080046b0 <test_008_002_execute.9106>:

static void test_008_002_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_002_execute(void) {
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	464d      	mov	r5, r9
 80046b4:	465f      	mov	r7, fp
 80046b6:	4656      	mov	r6, sl
 80046b8:	4644      	mov	r4, r8
 80046ba:	b4f0      	push	{r4, r5, r6, r7}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.2.1] Testing the mailbox size.*/
  test_set_step(1);
 80046bc:	4db8      	ldr	r5, [pc, #736]	; (80049a0 <test_008_002_execute.9106+0x2f0>)
 80046be:	2301      	movs	r3, #1

static void test_008_002_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_002_execute(void) {
 80046c0:	b083      	sub	sp, #12
  msg_t msg1, msg2;
  unsigned i;

  /* [8.2.1] Testing the mailbox size.*/
  test_set_step(1);
 80046c2:	602b      	str	r3, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
 80046c6:	4cb7      	ldr	r4, [pc, #732]	; (80049a4 <test_008_002_execute.9106+0x2f4>)
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80046c8:	49b7      	ldr	r1, [pc, #732]	; (80049a8 <test_008_002_execute.9106+0x2f8>)
 80046ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046cc:	3804      	subs	r0, #4
 80046ce:	4243      	negs	r3, r0
 80046d0:	4158      	adcs	r0, r3
 80046d2:	f7fc f995 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80046d6:	b662      	cpsie	i
 80046d8:	2800      	cmp	r0, #0
 80046da:	d006      	beq.n	80046ea <test_008_002_execute.9106+0x3a>
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 80046dc:	b003      	add	sp, #12
 80046de:	bc3c      	pop	{r2, r3, r4, r5}
 80046e0:	4690      	mov	r8, r2
 80046e2:	4699      	mov	r9, r3
 80046e4:	46a2      	mov	sl, r4
 80046e6:	46ab      	mov	fp, r5
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
  }

  /* [8.2.2] Resetting the mailbox, conditions are checked, no errors
     expected.*/
  test_set_step(2);
 80046ea:	2002      	movs	r0, #2
 80046ec:	6028      	str	r0, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046ee:	b672      	cpsid	i
  {
    chSysLock();
    chMBResetI(&mb1);
 80046f0:	1c20      	adds	r0, r4, #0
 80046f2:	f7fc fedd 	bl	80014b0 <chMBResetI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80046f6:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046f8:	b672      	cpsid	i
    chSysUnlock();
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80046fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046fc:	4eab      	ldr	r6, [pc, #684]	; (80049ac <test_008_002_execute.9106+0x2fc>)
 80046fe:	3804      	subs	r0, #4
 8004700:	4243      	negs	r3, r0
 8004702:	4158      	adcs	r0, r3
 8004704:	1c31      	adds	r1, r6, #0
 8004706:	f7fc f97b 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800470a:	b662      	cpsie	i
 800470c:	2800      	cmp	r0, #0
 800470e:	d1e5      	bne.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004710:	b672      	cpsid	i
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004712:	4fa7      	ldr	r7, [pc, #668]	; (80049b0 <test_008_002_execute.9106+0x300>)
 8004714:	69a2      	ldr	r2, [r4, #24]
 8004716:	1c39      	adds	r1, r7, #0
 8004718:	4250      	negs	r0, r2
 800471a:	4150      	adcs	r0, r2
 800471c:	f7fc f970 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004720:	b662      	cpsie	i
 8004722:	2800      	cmp	r0, #0
 8004724:	d1da      	bne.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004726:	b672      	cpsid	i
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004728:	6821      	ldr	r1, [r4, #0]
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	4aa1      	ldr	r2, [pc, #644]	; (80049b4 <test_008_002_execute.9106+0x304>)
 800472e:	1ac8      	subs	r0, r1, r3
 8004730:	4243      	negs	r3, r0
 8004732:	4158      	adcs	r0, r3
 8004734:	1c11      	adds	r1, r2, #0
 8004736:	4690      	mov	r8, r2
 8004738:	f7fc f962 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800473c:	b662      	cpsie	i
 800473e:	2800      	cmp	r0, #0
 8004740:	d1cc      	bne.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004742:	b672      	cpsid	i
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004744:	68e1      	ldr	r1, [r4, #12]
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	1a40      	subs	r0, r0, r1
 800474a:	4243      	negs	r3, r0
 800474c:	4158      	adcs	r0, r3
 800474e:	4b9a      	ldr	r3, [pc, #616]	; (80049b8 <test_008_002_execute.9106+0x308>)
 8004750:	1c19      	adds	r1, r3, #0
 8004752:	469a      	mov	sl, r3
 8004754:	f7fc f954 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004758:	b662      	cpsie	i
 800475a:	2800      	cmp	r0, #0
 800475c:	d1be      	bne.n	80046dc <test_008_002_execute.9106+0x2c>
  }

  /* [8.2.3] Filling the mailbox using chMBPostI() and chMBPostAheadI()
     once, no errors expected.*/
  test_set_step(3);
 800475e:	2203      	movs	r2, #3
 8004760:	602a      	str	r2, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004762:	b672      	cpsid	i
 8004764:	6a60      	ldr	r0, [r4, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8004766:	2800      	cmp	r0, #0
 8004768:	dc00      	bgt.n	800476c <test_008_002_execute.9106+0xbc>
 800476a:	e0c0      	b.n	80048ee <test_008_002_execute.9106+0x23e>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 800476c:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 800476e:	3801      	subs	r0, #1
 8004770:	2342      	movs	r3, #66	; 0x42
  if (mbp->wrptr >= mbp->top) {
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	6260      	str	r0, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8004776:	c108      	stmia	r1!, {r3}
 8004778:	60a1      	str	r1, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 800477a:	4291      	cmp	r1, r2
 800477c:	d301      	bcc.n	8004782 <test_008_002_execute.9106+0xd2>
     mbp->wrptr = mbp->buffer;
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	60a0      	str	r0, [r4, #8]
  }
  chSemSignalI(&mbp->fullsem);
 8004782:	1c20      	adds	r0, r4, #0
 8004784:	3010      	adds	r0, #16
 8004786:	f7fc fe43 	bl	8001410 <chSemSignalI>
 800478a:	2001      	movs	r0, #1
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800478c:	b662      	cpsie	i
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
      chSysLock();
      msg1 = chMBPostI(&mb1, 'B' + i);
      chSysUnlock();
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800478e:	498b      	ldr	r1, [pc, #556]	; (80049bc <test_008_002_execute.9106+0x30c>)
 8004790:	4689      	mov	r9, r1
 8004792:	f7fc f935 	bl	8000a00 <_test_assert>
 8004796:	2800      	cmp	r0, #0
 8004798:	d1a0      	bne.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800479a:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 800479c:	6a63      	ldr	r3, [r4, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dc00      	bgt.n	80047a4 <test_008_002_execute.9106+0xf4>
 80047a2:	e0a2      	b.n	80048ea <test_008_002_execute.9106+0x23a>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80047a4:	68a0      	ldr	r0, [r4, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 80047a6:	3b01      	subs	r3, #1
 80047a8:	2243      	movs	r2, #67	; 0x43
  if (mbp->wrptr >= mbp->top) {
 80047aa:	6861      	ldr	r1, [r4, #4]
 80047ac:	6263      	str	r3, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80047ae:	c004      	stmia	r0!, {r2}
 80047b0:	60a0      	str	r0, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 80047b2:	4288      	cmp	r0, r1
 80047b4:	d301      	bcc.n	80047ba <test_008_002_execute.9106+0x10a>
     mbp->wrptr = mbp->buffer;
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	60a3      	str	r3, [r4, #8]
  }
  chSemSignalI(&mbp->fullsem);
 80047ba:	1c20      	adds	r0, r4, #0
 80047bc:	3010      	adds	r0, #16
 80047be:	f7fc fe27 	bl	8001410 <chSemSignalI>
 80047c2:	2001      	movs	r0, #1
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80047c4:	b662      	cpsie	i
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fc f91a 	bl	8000a00 <_test_assert>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d000      	beq.n	80047d2 <test_008_002_execute.9106+0x122>
 80047d0:	e784      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047d2:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 80047d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 80047d6:	2800      	cmp	r0, #0
 80047d8:	dc00      	bgt.n	80047dc <test_008_002_execute.9106+0x12c>
 80047da:	e0df      	b.n	800499c <test_008_002_execute.9106+0x2ec>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80047dc:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 80047de:	3801      	subs	r0, #1
 80047e0:	2244      	movs	r2, #68	; 0x44
  if (mbp->wrptr >= mbp->top) {
 80047e2:	6863      	ldr	r3, [r4, #4]
 80047e4:	6260      	str	r0, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 80047e6:	c104      	stmia	r1!, {r2}
 80047e8:	60a1      	str	r1, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 80047ea:	4299      	cmp	r1, r3
 80047ec:	d301      	bcc.n	80047f2 <test_008_002_execute.9106+0x142>
     mbp->wrptr = mbp->buffer;
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	60a0      	str	r0, [r4, #8]
  }
  chSemSignalI(&mbp->fullsem);
 80047f2:	1c20      	adds	r0, r4, #0
 80047f4:	3010      	adds	r0, #16
 80047f6:	f7fc fe0b 	bl	8001410 <chSemSignalI>
 80047fa:	2001      	movs	r0, #1
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80047fc:	b662      	cpsie	i
 80047fe:	4649      	mov	r1, r9
 8004800:	f7fc f8fe 	bl	8000a00 <_test_assert>
 8004804:	2800      	cmp	r0, #0
 8004806:	d000      	beq.n	800480a <test_008_002_execute.9106+0x15a>
 8004808:	e768      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800480a:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 800480c:	6a61      	ldr	r1, [r4, #36]	; 0x24
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 800480e:	2900      	cmp	r1, #0
 8004810:	dc00      	bgt.n	8004814 <test_008_002_execute.9106+0x164>
 8004812:	e0c1      	b.n	8004998 <test_008_002_execute.9106+0x2e8>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->emptysem);
  if (--mbp->rdptr < mbp->buffer) {
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	6822      	ldr	r2, [r4, #0]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 8004818:	3901      	subs	r1, #1
 800481a:	3b04      	subs	r3, #4
 800481c:	6261      	str	r1, [r4, #36]	; 0x24
 800481e:	60e3      	str	r3, [r4, #12]
 8004820:	4293      	cmp	r3, r2
 8004822:	d202      	bcs.n	800482a <test_008_002_execute.9106+0x17a>
    mbp->rdptr = mbp->top - 1;
 8004824:	6863      	ldr	r3, [r4, #4]
 8004826:	3b04      	subs	r3, #4
 8004828:	60e3      	str	r3, [r4, #12]
  }
  *mbp->rdptr = msg;
 800482a:	2041      	movs	r0, #65	; 0x41
 800482c:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->fullsem);
 800482e:	1c20      	adds	r0, r4, #0
 8004830:	3010      	adds	r0, #16
 8004832:	f7fc fded 	bl	8001410 <chSemSignalI>
 8004836:	2001      	movs	r0, #1
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004838:	b662      	cpsie	i
    }
    chSysLock();
    msg1 = chMBPostAheadI(&mb1, 'A');
    chSysUnlock();
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800483a:	4649      	mov	r1, r9
 800483c:	f7fc f8e0 	bl	8000a00 <_test_assert>
 8004840:	2800      	cmp	r0, #0
 8004842:	d000      	beq.n	8004846 <test_008_002_execute.9106+0x196>
 8004844:	e74a      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  }

  /* [8.2.4] Testing intermediate conditions. Data pointers must be
     aligned, semaphore counters are checked.*/
  test_set_step(4);
 8004846:	2104      	movs	r1, #4
 8004848:	468b      	mov	fp, r1
 800484a:	6029      	str	r1, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800484c:	b672      	cpsid	i
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800484e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004850:	495b      	ldr	r1, [pc, #364]	; (80049c0 <test_008_002_execute.9106+0x310>)
 8004852:	4258      	negs	r0, r3
 8004854:	4158      	adcs	r0, r3
 8004856:	f7fc f8d3 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800485a:	b662      	cpsie	i
 800485c:	2800      	cmp	r0, #0
 800485e:	d000      	beq.n	8004862 <test_008_002_execute.9106+0x1b2>
 8004860:	e73c      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004862:	b672      	cpsid	i
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004864:	69a0      	ldr	r0, [r4, #24]
 8004866:	4957      	ldr	r1, [pc, #348]	; (80049c4 <test_008_002_execute.9106+0x314>)
 8004868:	3804      	subs	r0, #4
 800486a:	4243      	negs	r3, r0
 800486c:	4158      	adcs	r0, r3
 800486e:	f7fc f8c7 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004872:	b662      	cpsie	i
 8004874:	2800      	cmp	r0, #0
 8004876:	d000      	beq.n	800487a <test_008_002_execute.9106+0x1ca>
 8004878:	e730      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800487a:	b672      	cpsid	i
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800487c:	68a1      	ldr	r1, [r4, #8]
 800487e:	68e0      	ldr	r0, [r4, #12]
 8004880:	1a40      	subs	r0, r0, r1
 8004882:	4243      	negs	r3, r0
 8004884:	4158      	adcs	r0, r3
 8004886:	4950      	ldr	r1, [pc, #320]	; (80049c8 <test_008_002_execute.9106+0x318>)
 8004888:	f7fc f8ba 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800488c:	b662      	cpsie	i
 800488e:	2800      	cmp	r0, #0
 8004890:	d000      	beq.n	8004894 <test_008_002_execute.9106+0x1e4>
 8004892:	e723      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  }

  /* [8.2.5] Emptying the mailbox using chMBFetchI(), no errors
     expected.*/
  test_set_step(5);
 8004894:	2205      	movs	r2, #5
 8004896:	602a      	str	r2, [r5, #0]
 8004898:	e020      	b.n	80048dc <test_008_002_execute.9106+0x22c>

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 800489a:	68e0      	ldr	r0, [r4, #12]
 800489c:	3b01      	subs	r3, #1
 800489e:	61a3      	str	r3, [r4, #24]
 80048a0:	c802      	ldmia	r0!, {r1}
  if (mbp->rdptr >= mbp->top) {
 80048a2:	6862      	ldr	r2, [r4, #4]

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 80048a4:	9101      	str	r1, [sp, #4]
 80048a6:	60e0      	str	r0, [r4, #12]
  if (mbp->rdptr >= mbp->top) {
 80048a8:	4290      	cmp	r0, r2
 80048aa:	d301      	bcc.n	80048b0 <test_008_002_execute.9106+0x200>
    mbp->rdptr = mbp->buffer;
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	60e3      	str	r3, [r4, #12]
  }
  chSemSignalI(&mbp->emptysem);
 80048b0:	4846      	ldr	r0, [pc, #280]	; (80049cc <test_008_002_execute.9106+0x31c>)
 80048b2:	f7fc fdad 	bl	8001410 <chSemSignalI>

  return MSG_OK;
 80048b6:	2000      	movs	r0, #0
 80048b8:	b662      	cpsie	i
  {
    for (i = 0; i < MB_SIZE; i++) {
      chSysLock();
      msg1 = chMBFetchI(&mb1, &msg2);
      chSysUnlock();
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048ba:	3001      	adds	r0, #1
 80048bc:	4649      	mov	r1, r9
 80048be:	f7fc f89f 	bl	8000a00 <_test_assert>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d000      	beq.n	80048c8 <test_008_002_execute.9106+0x218>
 80048c6:	e709      	b.n	80046dc <test_008_002_execute.9106+0x2c>
      test_emit_token(msg2);
 80048c8:	4669      	mov	r1, sp
 80048ca:	7908      	ldrb	r0, [r1, #4]
 80048cc:	f7fb ff08 	bl	80006e0 <test_emit_token>
 80048d0:	2201      	movs	r2, #1
 80048d2:	4253      	negs	r3, r2
 80048d4:	449b      	add	fp, r3

  /* [8.2.5] Emptying the mailbox using chMBFetchI(), no errors
     expected.*/
  test_set_step(5);
  {
    for (i = 0; i < MB_SIZE; i++) {
 80048d6:	4658      	mov	r0, fp
 80048d8:	2800      	cmp	r0, #0
 80048da:	d00a      	beq.n	80048f2 <test_008_002_execute.9106+0x242>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048dc:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 80048de:	69a3      	ldr	r3, [r4, #24]
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dcda      	bgt.n	800489a <test_008_002_execute.9106+0x1ea>
    return MSG_TIMEOUT;
 80048e4:	2001      	movs	r0, #1
 80048e6:	4240      	negs	r0, r0
 80048e8:	e7e6      	b.n	80048b8 <test_008_002_execute.9106+0x208>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 80048ea:	2000      	movs	r0, #0
 80048ec:	e76a      	b.n	80047c4 <test_008_002_execute.9106+0x114>
 80048ee:	2000      	movs	r0, #0
 80048f0:	e74c      	b.n	800478c <test_008_002_execute.9106+0xdc>
      msg1 = chMBFetchI(&mb1, &msg2);
      chSysUnlock();
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
      test_emit_token(msg2);
    }
    test_assert_sequence("ABCD", "wrong get sequence");
 80048f2:	4837      	ldr	r0, [pc, #220]	; (80049d0 <test_008_002_execute.9106+0x320>)
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <test_008_002_execute.9106+0x324>)
 80048f6:	f7fc f833 	bl	8000960 <_test_assert_sequence>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d000      	beq.n	8004900 <test_008_002_execute.9106+0x250>
 80048fe:	e6ed      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  }

  /* [8.2.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 8004900:	2106      	movs	r1, #6
 8004902:	6029      	str	r1, [r5, #0]
 8004904:	b672      	cpsid	i
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
  msg_t rdymsg;

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
 8004906:	2201      	movs	r2, #1
 8004908:	1c20      	adds	r0, r4, #0
 800490a:	2146      	movs	r1, #70	; 0x46
 800490c:	4252      	negs	r2, r2
 800490e:	f7ff f907 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004912:	b662      	cpsie	i
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004914:	4243      	negs	r3, r0
 8004916:	4158      	adcs	r0, r3
 8004918:	4649      	mov	r1, r9
 800491a:	f7fc f871 	bl	8000a00 <_test_assert>
 800491e:	2800      	cmp	r0, #0
 8004920:	d000      	beq.n	8004924 <test_008_002_execute.9106+0x274>
 8004922:	e6db      	b.n	80046dc <test_008_002_execute.9106+0x2c>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004924:	2301      	movs	r3, #1
 8004926:	4259      	negs	r1, r3
 8004928:	a801      	add	r0, sp, #4
 800492a:	f7ff f941 	bl	8003bb0 <chMBFetch.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800492e:	4649      	mov	r1, r9
 8004930:	4243      	negs	r3, r0
 8004932:	4158      	adcs	r0, r3
 8004934:	f7fc f864 	bl	8000a00 <_test_assert>
 8004938:	2800      	cmp	r0, #0
 800493a:	d000      	beq.n	800493e <test_008_002_execute.9106+0x28e>
 800493c:	e6ce      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  }

  /* [8.2.7] Testing final conditions. Data pointers must be aligned to
     buffer start, semaphore counters are checked.*/
  test_set_step(7);
 800493e:	2007      	movs	r0, #7
 8004940:	6028      	str	r0, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004942:	b672      	cpsid	i
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004944:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004946:	1c31      	adds	r1, r6, #0
 8004948:	3804      	subs	r0, #4
 800494a:	4243      	negs	r3, r0
 800494c:	4158      	adcs	r0, r3
 800494e:	f7fc f857 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004952:	b662      	cpsie	i
 8004954:	2800      	cmp	r0, #0
 8004956:	d000      	beq.n	800495a <test_008_002_execute.9106+0x2aa>
 8004958:	e6c0      	b.n	80046dc <test_008_002_execute.9106+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800495a:	b672      	cpsid	i
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800495c:	69a5      	ldr	r5, [r4, #24]
 800495e:	1c39      	adds	r1, r7, #0
 8004960:	4268      	negs	r0, r5
 8004962:	4168      	adcs	r0, r5
 8004964:	f7fc f84c 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004968:	b662      	cpsie	i
 800496a:	2800      	cmp	r0, #0
 800496c:	d000      	beq.n	8004970 <test_008_002_execute.9106+0x2c0>
 800496e:	e6b5      	b.n	80046dc <test_008_002_execute.9106+0x2c>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004970:	6826      	ldr	r6, [r4, #0]
 8004972:	68a7      	ldr	r7, [r4, #8]
 8004974:	4641      	mov	r1, r8
 8004976:	1bf0      	subs	r0, r6, r7
 8004978:	4243      	negs	r3, r0
 800497a:	4158      	adcs	r0, r3
 800497c:	f7fc f840 	bl	8000a00 <_test_assert>
 8004980:	2800      	cmp	r0, #0
 8004982:	d000      	beq.n	8004986 <test_008_002_execute.9106+0x2d6>
 8004984:	e6aa      	b.n	80046dc <test_008_002_execute.9106+0x2c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004986:	6821      	ldr	r1, [r4, #0]
 8004988:	68e4      	ldr	r4, [r4, #12]
 800498a:	1b08      	subs	r0, r1, r4
 800498c:	4243      	negs	r3, r0
 800498e:	4158      	adcs	r0, r3
 8004990:	4651      	mov	r1, sl
 8004992:	f7fc f835 	bl	8000a00 <_test_assert>
 8004996:	e6a1      	b.n	80046dc <test_008_002_execute.9106+0x2c>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8004998:	2000      	movs	r0, #0
 800499a:	e74d      	b.n	8004838 <test_008_002_execute.9106+0x188>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 800499c:	2000      	movs	r0, #0
 800499e:	e72d      	b.n	80047fc <test_008_002_execute.9106+0x14c>
 80049a0:	2000106c 	.word	0x2000106c
 80049a4:	20000438 	.word	0x20000438
 80049a8:	080064dc 	.word	0x080064dc
 80049ac:	080064e8 	.word	0x080064e8
 80049b0:	080064f4 	.word	0x080064f4
 80049b4:	08006500 	.word	0x08006500
 80049b8:	08006524 	.word	0x08006524
 80049bc:	08006360 	.word	0x08006360
 80049c0:	08006548 	.word	0x08006548
 80049c4:	08006554 	.word	0x08006554
 80049c8:	08006560 	.word	0x08006560
 80049cc:	20000454 	.word	0x20000454
 80049d0:	080064d4 	.word	0x080064d4
 80049d4:	08006578 	.word	0x08006578
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46c0      	nop			; (mov r8, r8)

080049e0 <test_008_003_execute.9098>:

static void test_008_003_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_003_execute(void) {
 80049e0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
 80049e2:	4e64      	ldr	r6, [pc, #400]	; (8004b74 <test_008_003_execute.9098+0x194>)
 80049e4:	2301      	movs	r3, #1

static void test_008_003_teardown(void) {
  chMBReset(&mb1);
}

static void test_008_003_execute(void) {
 80049e6:	b082      	sub	sp, #8
  msg_t msg1, msg2;
  unsigned i;

  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
 80049e8:	6033      	str	r3, [r6, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049ea:	b672      	cpsid	i

  /* [8.1.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
  {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80049ec:	4c62      	ldr	r4, [pc, #392]	; (8004b78 <test_008_003_execute.9098+0x198>)
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
  msg_t rdymsg;

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
 80049ee:	2201      	movs	r2, #1
 80049f0:	1c20      	adds	r0, r4, #0
 80049f2:	2142      	movs	r1, #66	; 0x42
 80049f4:	4252      	negs	r2, r2
 80049f6:	f7ff f893 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80049fa:	b662      	cpsie	i
  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80049fc:	4d5f      	ldr	r5, [pc, #380]	; (8004b7c <test_008_003_execute.9098+0x19c>)
 80049fe:	4243      	negs	r3, r0
 8004a00:	4158      	adcs	r0, r3
 8004a02:	1c29      	adds	r1, r5, #0
 8004a04:	f7fb fffc 	bl	8000a00 <_test_assert>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d13d      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a0c:	b672      	cpsid	i
 8004a0e:	2301      	movs	r3, #1
 8004a10:	1c20      	adds	r0, r4, #0
 8004a12:	2143      	movs	r1, #67	; 0x43
 8004a14:	425a      	negs	r2, r3
 8004a16:	f7ff f883 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004a1a:	b662      	cpsie	i
 8004a1c:	4243      	negs	r3, r0
 8004a1e:	4158      	adcs	r0, r3
 8004a20:	1c29      	adds	r1, r5, #0
 8004a22:	f7fb ffed 	bl	8000a00 <_test_assert>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d12e      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a2a:	b672      	cpsid	i
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	1c20      	adds	r0, r4, #0
 8004a30:	2144      	movs	r1, #68	; 0x44
 8004a32:	4252      	negs	r2, r2
 8004a34:	f7ff f874 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004a38:	b662      	cpsie	i
 8004a3a:	4243      	negs	r3, r0
 8004a3c:	4158      	adcs	r0, r3
 8004a3e:	1c29      	adds	r1, r5, #0
 8004a40:	f7fb ffde 	bl	8000a00 <_test_assert>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d11f      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a48:	b672      	cpsid	i
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	1c20      	adds	r0, r4, #0
 8004a4e:	2145      	movs	r1, #69	; 0x45
 8004a50:	425a      	negs	r2, r3
 8004a52:	f7ff f865 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004a56:	b662      	cpsie	i
 8004a58:	4243      	negs	r3, r0
 8004a5a:	4158      	adcs	r0, r3
 8004a5c:	1c29      	adds	r1, r5, #0
 8004a5e:	f7fb ffcf 	bl	8000a00 <_test_assert>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d110      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
    }
  }

  /* [8.3.2] Testing chMBPost(), chMBPostI(), chMBPostAhead() and
     chMBPostAheadI() timeout.*/
  test_set_step(2);
 8004a66:	2002      	movs	r0, #2
 8004a68:	6030      	str	r0, [r6, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a6a:	b672      	cpsid	i
 8004a6c:	2158      	movs	r1, #88	; 0x58
 8004a6e:	1c20      	adds	r0, r4, #0
 8004a70:	2201      	movs	r2, #1
 8004a72:	f7ff f855 	bl	8003b20 <chMBPostS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004a76:	b662      	cpsie	i
  {
    msg1 = chMBPost(&mb1, 'X', 1);
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004a78:	3001      	adds	r0, #1
 8004a7a:	4243      	negs	r3, r0
 8004a7c:	4158      	adcs	r0, r3
 8004a7e:	1c29      	adds	r1, r5, #0
 8004a80:	f7fb ffbe 	bl	8000a00 <_test_assert>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d001      	beq.n	8004a8c <test_008_003_execute.9098+0xac>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a8c:	b672      	cpsid	i
 8004a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8004a90:	2900      	cmp	r1, #0
 8004a92:	dd69      	ble.n	8004b68 <test_008_003_execute.9098+0x188>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8004a94:	68a3      	ldr	r3, [r4, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 8004a96:	3901      	subs	r1, #1
 8004a98:	2258      	movs	r2, #88	; 0x58
  if (mbp->wrptr >= mbp->top) {
 8004a9a:	6860      	ldr	r0, [r4, #4]
 8004a9c:	6261      	str	r1, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 8004a9e:	c304      	stmia	r3!, {r2}
 8004aa0:	60a3      	str	r3, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 8004aa2:	4283      	cmp	r3, r0
 8004aa4:	d25d      	bcs.n	8004b62 <test_008_003_execute.9098+0x182>
     mbp->wrptr = mbp->buffer;
  }
  chSemSignalI(&mbp->fullsem);
 8004aa6:	1c20      	adds	r0, r4, #0
 8004aa8:	3010      	adds	r0, #16
 8004aaa:	f7fc fcb1 	bl	8001410 <chSemSignalI>
 8004aae:	2000      	movs	r0, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004ab0:	b662      	cpsie	i
    msg1 = chMBPost(&mb1, 'X', 1);
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
    chSysLock();
    msg1 = chMBPostI(&mb1, 'X');
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004ab2:	1c29      	adds	r1, r5, #0
 8004ab4:	f7fb ffa4 	bl	8000a00 <_test_assert>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1e5      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
    msg1 = chMBPostAhead(&mb1, 'X', 1);
 8004abc:	2101      	movs	r1, #1
 8004abe:	2058      	movs	r0, #88	; 0x58
 8004ac0:	f7ff f84e 	bl	8003b60 <chMBPostAhead.constprop.23>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	4243      	negs	r3, r0
 8004ac8:	4158      	adcs	r0, r3
 8004aca:	1c29      	adds	r1, r5, #0
 8004acc:	f7fb ff98 	bl	8000a00 <_test_assert>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d1d9      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ad4:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 8004ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	dd47      	ble.n	8004b6c <test_008_003_execute.9098+0x18c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->emptysem);
  if (--mbp->rdptr < mbp->buffer) {
 8004adc:	68e0      	ldr	r0, [r4, #12]
 8004ade:	6822      	ldr	r2, [r4, #0]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	3804      	subs	r0, #4
 8004ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ae6:	60e0      	str	r0, [r4, #12]
 8004ae8:	4290      	cmp	r0, r2
 8004aea:	d202      	bcs.n	8004af2 <test_008_003_execute.9098+0x112>
    mbp->rdptr = mbp->top - 1;
 8004aec:	6860      	ldr	r0, [r4, #4]
 8004aee:	3804      	subs	r0, #4
 8004af0:	60e0      	str	r0, [r4, #12]
  }
  *mbp->rdptr = msg;
 8004af2:	2158      	movs	r1, #88	; 0x58
 8004af4:	6001      	str	r1, [r0, #0]
  chSemSignalI(&mbp->fullsem);
 8004af6:	1c20      	adds	r0, r4, #0
 8004af8:	3010      	adds	r0, #16
 8004afa:	f7fc fc89 	bl	8001410 <chSemSignalI>
 8004afe:	2000      	movs	r0, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004b00:	b662      	cpsie	i
    chSysLock();
    msg1 = chMBPostAheadI(&mb1, 'X');
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004b02:	1c29      	adds	r1, r5, #0
 8004b04:	f7fb ff7c 	bl	8000a00 <_test_assert>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1bd      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
  }

  /* [8.3.3] Resetting the mailbox.*/
  test_set_step(3);
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	6033      	str	r3, [r6, #0]
  {
    chMBReset(&mb1);
 8004b10:	f7fc fce6 	bl	80014e0 <chMBReset.constprop.26>
  }

  /* [8.3.4] Testing chMBFetch() and chMBFetchI() timeout.*/
  test_set_step(4);
 8004b14:	2204      	movs	r2, #4
  {
    msg1 = chMBFetch(&mb1, &msg2, 1);
 8004b16:	2101      	movs	r1, #1
  {
    chMBReset(&mb1);
  }

  /* [8.3.4] Testing chMBFetch() and chMBFetchI() timeout.*/
  test_set_step(4);
 8004b18:	6032      	str	r2, [r6, #0]
  {
    msg1 = chMBFetch(&mb1, &msg2, 1);
 8004b1a:	a801      	add	r0, sp, #4
 8004b1c:	f7ff f848 	bl	8003bb0 <chMBFetch.constprop.21>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004b20:	3001      	adds	r0, #1
 8004b22:	4243      	negs	r3, r0
 8004b24:	4158      	adcs	r0, r3
 8004b26:	1c29      	adds	r1, r5, #0
 8004b28:	f7fb ff6a 	bl	8000a00 <_test_assert>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d1ab      	bne.n	8004a88 <test_008_003_execute.9098+0xa8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b30:	b672      	cpsid	i
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 8004b32:	69a6      	ldr	r6, [r4, #24]
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	dd1b      	ble.n	8004b70 <test_008_003_execute.9098+0x190>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 8004b38:	68e0      	ldr	r0, [r4, #12]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 8004b3a:	3e01      	subs	r6, #1
 8004b3c:	61a6      	str	r6, [r4, #24]
 8004b3e:	c802      	ldmia	r0!, {r1}
  if (mbp->rdptr >= mbp->top) {
 8004b40:	6863      	ldr	r3, [r4, #4]

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 8004b42:	9101      	str	r1, [sp, #4]
 8004b44:	60e0      	str	r0, [r4, #12]
  if (mbp->rdptr >= mbp->top) {
 8004b46:	4298      	cmp	r0, r3
 8004b48:	d301      	bcc.n	8004b4e <test_008_003_execute.9098+0x16e>
    mbp->rdptr = mbp->buffer;
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	60e2      	str	r2, [r4, #12]
  }
  chSemSignalI(&mbp->emptysem);
 8004b4e:	1c20      	adds	r0, r4, #0
 8004b50:	301c      	adds	r0, #28
 8004b52:	f7fc fc5d 	bl	8001410 <chSemSignalI>
 8004b56:	2000      	movs	r0, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004b58:	b662      	cpsie	i
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004b5a:	1c29      	adds	r1, r5, #0
 8004b5c:	f7fb ff50 	bl	8000a00 <_test_assert>
 8004b60:	e792      	b.n	8004a88 <test_008_003_execute.9098+0xa8>
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
  if (mbp->wrptr >= mbp->top) {
     mbp->wrptr = mbp->buffer;
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	60a1      	str	r1, [r4, #8]
 8004b66:	e79e      	b.n	8004aa6 <test_008_003_execute.9098+0xc6>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8004b68:	2001      	movs	r0, #1
 8004b6a:	e7a1      	b.n	8004ab0 <test_008_003_execute.9098+0xd0>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	e7c7      	b.n	8004b00 <test_008_003_execute.9098+0x120>
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8004b70:	2001      	movs	r0, #1
 8004b72:	e7f1      	b.n	8004b58 <test_008_003_execute.9098+0x178>
 8004b74:	2000106c 	.word	0x2000106c
 8004b78:	20000438 	.word	0x20000438
 8004b7c:	08006360 	.word	0x08006360

08004b80 <test_004_006_execute.8377>:

static void test_004_006_teardown(void) {
  test_wait_threads();
}

static void test_004_006_execute(void) {
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [4.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8004b82:	4d4a      	ldr	r5, [pc, #296]	; (8004cac <test_004_006_execute.8377+0x12c>)

static void test_004_006_teardown(void) {
  test_wait_threads();
}

static void test_004_006_execute(void) {
 8004b84:	b085      	sub	sp, #20
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8004b86:	ac01      	add	r4, sp, #4
  binary_semaphore_t bsem;
  msg_t msg;

  /* [4.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8004b88:	2301      	movs	r3, #1
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	602b      	str	r3, [r5, #0]
 8004b8e:	9401      	str	r4, [sp, #4]
  tqp->prev = (thread_t *)tqp;
 8004b90:	6064      	str	r4, [r4, #4]
 8004b92:	60a0      	str	r0, [r4, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b94:	b672      	cpsid	i
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8004b96:	68a1      	ldr	r1, [r4, #8]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8004b98:	4e45      	ldr	r6, [pc, #276]	; (8004cb0 <test_004_006_execute.8377+0x130>)
 8004b9a:	1e4a      	subs	r2, r1, #1
 8004b9c:	4311      	orrs	r1, r2
 8004b9e:	0fc8      	lsrs	r0, r1, #31
 8004ba0:	1c31      	adds	r1, r6, #0
 8004ba2:	f7fb ff2d 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004ba6:	b662      	cpsie	i
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d001      	beq.n	8004bb0 <test_004_006_execute.8377+0x30>
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 8004bac:	b005      	add	sp, #20
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }

  /* [4.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 8004bb0:	2702      	movs	r7, #2
 8004bb2:	602f      	str	r7, [r5, #0]
 *
 * @api
 */
static inline void chBSemReset(binary_semaphore_t *bsp, bool taken) {

  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 8004bb4:	1c20      	adds	r0, r4, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	f7fc fca2 	bl	8001500 <chSemReset>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bbc:	b672      	cpsid	i
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8004bbe:	68a3      	ldr	r3, [r4, #8]
  {
    chBSemReset(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8004bc0:	1c31      	adds	r1, r6, #0
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	4303      	orrs	r3, r0
 8004bc6:	0fd8      	lsrs	r0, r3, #31
 8004bc8:	f7fb ff1a 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004bcc:	b662      	cpsie	i
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d1ec      	bne.n	8004bac <test_004_006_execute.8377+0x2c>
 8004bd2:	4a38      	ldr	r2, [pc, #224]	; (8004cb4 <test_004_006_execute.8377+0x134>)
  }

  /* [4.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 8004bd4:	2103      	movs	r1, #3
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8004bd6:	6997      	ldr	r7, [r2, #24]
 8004bd8:	6029      	str	r1, [r5, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <test_004_006_execute.8377+0x138>)
 8004bde:	3901      	subs	r1, #1
 8004be0:	1c23      	adds	r3, r4, #0
 8004be2:	4836      	ldr	r0, [pc, #216]	; (8004cbc <test_004_006_execute.8377+0x13c>)
 8004be4:	f7fc fddc 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8004be8:	4b35      	ldr	r3, [pc, #212]	; (8004cc0 <test_004_006_execute.8377+0x140>)
 8004bea:	6018      	str	r0, [r3, #0]
                                   chThdGetPriorityX()-1, thread4, &bsem);
  }

  /* [4.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 8004bec:	2004      	movs	r0, #4
 8004bee:	6028      	str	r0, [r5, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->sem);
 8004bf0:	1c20      	adds	r0, r4, #0
 8004bf2:	f7fc f945 	bl	8000e80 <chSemWait>
 8004bf6:	1c07      	adds	r7, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf8:	b672      	cpsid	i
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8004bfa:	68a1      	ldr	r1, [r4, #8]
 8004bfc:	1e4a      	subs	r2, r1, #1
 8004bfe:	4311      	orrs	r1, r2
  {
    msg = chBSemWait(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8004c00:	0fc8      	lsrs	r0, r1, #31
 8004c02:	1c31      	adds	r1, r6, #0
 8004c04:	f7fb fefc 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c08:	b662      	cpsie	i
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d1ce      	bne.n	8004bac <test_004_006_execute.8377+0x2c>
    test_assert(msg == MSG_OK, "unexpected message");
 8004c0e:	4278      	negs	r0, r7
 8004c10:	4178      	adcs	r0, r7
 8004c12:	492c      	ldr	r1, [pc, #176]	; (8004cc4 <test_004_006_execute.8377+0x144>)
 8004c14:	f7fb fef4 	bl	8000a00 <_test_assert>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d1c7      	bne.n	8004bac <test_004_006_execute.8377+0x2c>
  }

  /* [4.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8004c1c:	2605      	movs	r6, #5
 8004c1e:	602e      	str	r6, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c20:	b672      	cpsid	i
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004c22:	68a3      	ldr	r3, [r4, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dd38      	ble.n	8004c9a <test_004_006_execute.8377+0x11a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004c28:	f7fb fffa 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c2c:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c2e:	b672      	cpsid	i
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004c30:	68a7      	ldr	r7, [r4, #8]
 8004c32:	17f8      	asrs	r0, r7, #31
 8004c34:	1bc1      	subs	r1, r0, r7
 8004c36:	0fc8      	lsrs	r0, r1, #31
 8004c38:	4923      	ldr	r1, [pc, #140]	; (8004cc8 <test_004_006_execute.8377+0x148>)
 8004c3a:	f7fb fee1 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c3e:	b662      	cpsie	i
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d1b3      	bne.n	8004bac <test_004_006_execute.8377+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c44:	b672      	cpsid	i
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004c46:	68a0      	ldr	r0, [r4, #8]
 8004c48:	4e20      	ldr	r6, [pc, #128]	; (8004ccc <test_004_006_execute.8377+0x14c>)
 8004c4a:	3801      	subs	r0, #1
 8004c4c:	4243      	negs	r3, r0
 8004c4e:	4158      	adcs	r0, r3
 8004c50:	1c31      	adds	r1, r6, #0
 8004c52:	f7fb fed5 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c56:	b662      	cpsie	i
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1a7      	bne.n	8004bac <test_004_006_execute.8377+0x2c>
  }

  /* [4.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8004c5c:	2206      	movs	r2, #6
 8004c5e:	602a      	str	r2, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c60:	b672      	cpsid	i
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004c62:	68a5      	ldr	r5, [r4, #8]
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	dd1c      	ble.n	8004ca2 <test_004_006_execute.8377+0x122>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004c68:	f7fb ffda 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c6c:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c6e:	b672      	cpsid	i
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	4917      	ldr	r1, [pc, #92]	; (8004cd0 <test_004_006_execute.8377+0x150>)
 8004c74:	17df      	asrs	r7, r3, #31
 8004c76:	1af8      	subs	r0, r7, r3
 8004c78:	0fc0      	lsrs	r0, r0, #31
 8004c7a:	f7fb fec1 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c7e:	b662      	cpsie	i
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d000      	beq.n	8004c86 <test_004_006_execute.8377+0x106>
 8004c84:	e792      	b.n	8004bac <test_004_006_execute.8377+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c86:	b672      	cpsid	i
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004c88:	68a0      	ldr	r0, [r4, #8]
 8004c8a:	1c31      	adds	r1, r6, #0
 8004c8c:	3801      	subs	r0, #1
 8004c8e:	4243      	negs	r3, r0
 8004c90:	4158      	adcs	r0, r3
 8004c92:	f7fb feb5 	bl	8000a00 <_test_assert>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c96:	b662      	cpsie	i
 8004c98:	e788      	b.n	8004bac <test_004_006_execute.8377+0x2c>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
    chSemSignalI(&bsp->sem);
 8004c9a:	1c20      	adds	r0, r4, #0
 8004c9c:	f7fc fbb8 	bl	8001410 <chSemSignalI>
 8004ca0:	e7c2      	b.n	8004c28 <test_004_006_execute.8377+0xa8>
 8004ca2:	1c20      	adds	r0, r4, #0
 8004ca4:	f7fc fbb4 	bl	8001410 <chSemSignalI>
 8004ca8:	e7de      	b.n	8004c68 <test_004_006_execute.8377+0xe8>
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	2000106c 	.word	0x2000106c
 8004cb0:	08006638 	.word	0x08006638
 8004cb4:	20000ff8 	.word	0x20000ff8
 8004cb8:	08004271 	.word	0x08004271
 8004cbc:	20000558 	.word	0x20000558
 8004cc0:	20000bd0 	.word	0x20000bd0
 8004cc4:	08006644 	.word	0x08006644
 8004cc8:	08006658 	.word	0x08006658
 8004ccc:	08006664 	.word	0x08006664
 8004cd0:	0800663c 	.word	0x0800663c
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	46c0      	nop			; (mov r8, r8)

08004ce0 <test_007_006_execute.8920>:

static void test_007_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void test_007_006_execute(void) {
 8004ce0:	b570      	push	{r4, r5, r6, lr}
  eventmask_t m;

  /* [7.6.1] The functions are invoked first with TIME_IMMEDIATE
     timeout, the timeout condition is tested.*/
  test_set_step(1);
 8004ce2:	4e4b      	ldr	r6, [pc, #300]	; (8004e10 <test_007_006_execute.8920+0x130>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8004ce4:	4d4b      	ldr	r5, [pc, #300]	; (8004e14 <test_007_006_execute.8920+0x134>)
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	6033      	str	r3, [r6, #0]
 8004cea:	69aa      	ldr	r2, [r5, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cec:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8004cee:	6b51      	ldr	r1, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	d108      	bne.n	8004d06 <test_007_006_execute.8920+0x26>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004cf4:	b662      	cpsie	i
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8004cf6:	4c48      	ldr	r4, [pc, #288]	; (8004e18 <test_007_006_execute.8920+0x138>)
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	1c21      	adds	r1, r4, #0
 8004cfc:	f7fb fe80 	bl	8000a00 <_test_assert>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d00d      	beq.n	8004d20 <test_007_006_execute.8920+0x40>
    m = chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
    m = chEvtWaitAllTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
  }
}
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8004d06:	4248      	negs	r0, r1
 8004d08:	4008      	ands	r0, r1
  ctp->epending &= ~m;
 8004d0a:	4381      	bics	r1, r0
 8004d0c:	6351      	str	r1, [r2, #52]	; 0x34
 8004d0e:	b662      	cpsie	i
  /* [7.6.1] The functions are invoked first with TIME_IMMEDIATE
     timeout, the timeout condition is tested.*/
  test_set_step(1);
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8004d10:	4c41      	ldr	r4, [pc, #260]	; (8004e18 <test_007_006_execute.8920+0x138>)
 8004d12:	4243      	negs	r3, r0
 8004d14:	4158      	adcs	r0, r3
 8004d16:	1c21      	adds	r1, r4, #0
 8004d18:	f7fb fe72 	bl	8000a00 <_test_assert>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1f1      	bne.n	8004d04 <test_007_006_execute.8920+0x24>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8004d20:	69ab      	ldr	r3, [r5, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d22:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8004d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d26:	2a00      	cmp	r2, #0
 8004d28:	d062      	beq.n	8004df0 <test_007_006_execute.8920+0x110>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8004d2a:	6358      	str	r0, [r3, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004d2c:	b662      	cpsie	i
 8004d2e:	2000      	movs	r0, #0
    m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8004d30:	1c21      	adds	r1, r4, #0
 8004d32:	f7fb fe65 	bl	8000a00 <_test_assert>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1e4      	bne.n	8004d04 <test_007_006_execute.8920+0x24>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8004d3a:	69a9      	ldr	r1, [r5, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3c:	b672      	cpsid	i

  chSysLock();
  if ((ctp->epending & events) != events) {
 8004d3e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	d058      	beq.n	8004df6 <test_007_006_execute.8920+0x116>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004d44:	b662      	cpsie	i
 8004d46:	2001      	movs	r0, #1
    m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
    test_assert(m == 0, "spurious event");
 8004d48:	1c21      	adds	r1, r4, #0
 8004d4a:	f7fb fe59 	bl	8000a00 <_test_assert>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d1d8      	bne.n	8004d04 <test_007_006_execute.8920+0x24>
  }

  /* [7.6.2] The functions are invoked first with a 50mS timeout, the
     timeout condition is tested.*/
  test_set_step(2);
 8004d52:	2002      	movs	r0, #2
 8004d54:	6030      	str	r0, [r6, #0]
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8004d56:	69ae      	ldr	r6, [r5, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d58:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8004d5a:	6b72      	ldr	r2, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	d10a      	bne.n	8004d76 <test_007_006_execute.8920+0x96>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8004d60:	2201      	movs	r2, #1
 8004d62:	4251      	negs	r1, r2
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8004d64:	23fa      	movs	r3, #250	; 0xfa
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8004d66:	6271      	str	r1, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8004d68:	200a      	movs	r0, #10
 8004d6a:	0059      	lsls	r1, r3, #1
 8004d6c:	f7fe fd40 	bl	80037f0 <chSchGoSleepTimeoutS>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	db44      	blt.n	8004dfe <test_007_006_execute.8920+0x11e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 8004d74:	6b72      	ldr	r2, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8004d76:	4250      	negs	r0, r2
 8004d78:	4010      	ands	r0, r2
  ctp->epending &= ~m;
 8004d7a:	4382      	bics	r2, r0
 8004d7c:	6372      	str	r2, [r6, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004d7e:	b662      	cpsie	i
 8004d80:	4243      	negs	r3, r0
 8004d82:	4158      	adcs	r0, r3
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8004d84:	1c21      	adds	r1, r4, #0
 8004d86:	f7fb fe3b 	bl	8000a00 <_test_assert>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d1ba      	bne.n	8004d04 <test_007_006_execute.8920+0x24>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8004d8e:	69ae      	ldr	r6, [r5, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d90:	b672      	cpsid	i
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8004d92:	6b70      	ldr	r0, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d10a      	bne.n	8004dae <test_007_006_execute.8920+0xce>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8004d98:	2001      	movs	r0, #1
 8004d9a:	4241      	negs	r1, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8004d9c:	23fa      	movs	r3, #250	; 0xfa
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8004d9e:	6271      	str	r1, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8004da0:	200a      	movs	r0, #10
 8004da2:	0059      	lsls	r1, r3, #1
 8004da4:	f7fe fd24 	bl	80037f0 <chSchGoSleepTimeoutS>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	db2b      	blt.n	8004e04 <test_007_006_execute.8920+0x124>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 8004dac:	6b70      	ldr	r0, [r6, #52]	; 0x34
  }
  ctp->epending &= ~m;
 8004dae:	2200      	movs	r2, #0
 8004db0:	6372      	str	r2, [r6, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004db2:	b662      	cpsie	i
 8004db4:	4243      	negs	r3, r0
 8004db6:	4158      	adcs	r0, r3
    m = chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8004db8:	1c21      	adds	r1, r4, #0
 8004dba:	f7fb fe21 	bl	8000a00 <_test_assert>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d1a0      	bne.n	8004d04 <test_007_006_execute.8920+0x24>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8004dc2:	69ad      	ldr	r5, [r5, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc4:	b672      	cpsid	i

  chSysLock();
  if ((ctp->epending & events) != events) {
 8004dc6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8004dc8:	1c73      	adds	r3, r6, #1
 8004dca:	d009      	beq.n	8004de0 <test_007_006_execute.8920+0x100>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8004dcc:	2001      	movs	r0, #1
 8004dce:	4241      	negs	r1, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8004dd0:	23fa      	movs	r3, #250	; 0xfa
  if ((ctp->epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8004dd2:	6269      	str	r1, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8004dd4:	200b      	movs	r0, #11
 8004dd6:	0059      	lsls	r1, r3, #1
 8004dd8:	f7fe fd0a 	bl	80037f0 <chSchGoSleepTimeoutS>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	db14      	blt.n	8004e0a <test_007_006_execute.8920+0x12a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8004de0:	2200      	movs	r2, #0
 8004de2:	636a      	str	r2, [r5, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004de4:	b662      	cpsie	i
 8004de6:	2000      	movs	r0, #0
    m = chEvtWaitAllTimeout(ALL_EVENTS, MS2ST(50));
    test_assert(m == 0, "spurious event");
 8004de8:	1c21      	adds	r1, r4, #0
 8004dea:	f7fb fe09 	bl	8000a00 <_test_assert>
 8004dee:	e789      	b.n	8004d04 <test_007_006_execute.8920+0x24>
 8004df0:	b662      	cpsie	i
 8004df2:	2001      	movs	r0, #1
 8004df4:	e79c      	b.n	8004d30 <test_007_006_execute.8920+0x50>
 8004df6:	6348      	str	r0, [r1, #52]	; 0x34
 8004df8:	b662      	cpsie	i
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e7a4      	b.n	8004d48 <test_007_006_execute.8920+0x68>
 8004dfe:	b662      	cpsie	i
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7bf      	b.n	8004d84 <test_007_006_execute.8920+0xa4>
 8004e04:	b662      	cpsie	i
 8004e06:	2001      	movs	r0, #1
 8004e08:	e7d6      	b.n	8004db8 <test_007_006_execute.8920+0xd8>
 8004e0a:	b662      	cpsie	i
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	e7eb      	b.n	8004de8 <test_007_006_execute.8920+0x108>
 8004e10:	2000106c 	.word	0x2000106c
 8004e14:	20000ff8 	.word	0x20000ff8
 8004e18:	08006678 	.word	0x08006678
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46c0      	nop			; (mov r8, r8)

08004e20 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004e20:	4827      	ldr	r0, [pc, #156]	; (8004ec0 <__early_init+0xa0>)
 8004e22:	2301      	movs	r3, #1
 8004e24:	6802      	ldr	r2, [r0, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004e26:	2102      	movs	r1, #2
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	6003      	str	r3, [r0, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004e2c:	6803      	ldr	r3, [r0, #0]
 8004e2e:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <__early_init+0xa0>)
 8004e30:	4219      	tst	r1, r3
 8004e32:	d0fb      	beq.n	8004e2c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8004e34:	6850      	ldr	r0, [r2, #4]
 8004e36:	2103      	movs	r1, #3
 8004e38:	4388      	bics	r0, r1
 8004e3a:	6050      	str	r0, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8004e3c:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004e3e:	1c10      	adds	r0, r2, #0

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8004e40:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004e42:	210c      	movs	r1, #12
 8004e44:	6843      	ldr	r3, [r0, #4]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <__early_init+0xa0>)
 8004e48:	400b      	ands	r3, r1
 8004e4a:	d1fb      	bne.n	8004e44 <__early_init+0x24>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004e4c:	6811      	ldr	r1, [r2, #0]
 8004e4e:	20f9      	movs	r0, #249	; 0xf9
 8004e50:	4001      	ands	r1, r0
 8004e52:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004e54:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 8004e56:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004e58:	2301      	movs	r3, #1
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	6353      	str	r3, [r2, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 8004e5e:	2002      	movs	r0, #2
 8004e60:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e62:	4917      	ldr	r1, [pc, #92]	; (8004ec0 <__early_init+0xa0>)
 8004e64:	4218      	tst	r0, r3
 8004e66:	d0fb      	beq.n	8004e60 <__early_init+0x40>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8004e68:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	4310      	orrs	r0, r2
 8004e6e:	6248      	str	r0, [r1, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004e70:	2002      	movs	r0, #2
 8004e72:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004e74:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <__early_init+0xa0>)
 8004e76:	4218      	tst	r0, r3
 8004e78:	d0fb      	beq.n	8004e72 <__early_init+0x52>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8004e7a:	21a0      	movs	r1, #160	; 0xa0
 8004e7c:	0388      	lsls	r0, r1, #14
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 8004e7e:	2300      	movs	r3, #0
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8004e80:	6050      	str	r0, [r2, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 8004e82:	62d3      	str	r3, [r2, #44]	; 0x2c
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8004e86:	6811      	ldr	r1, [r2, #0]
 8004e88:	2080      	movs	r0, #128	; 0x80
 8004e8a:	0443      	lsls	r3, r0, #17
 8004e8c:	430b      	orrs	r3, r1
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004e8e:	2180      	movs	r1, #128	; 0x80
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8004e90:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004e92:	0488      	lsls	r0, r1, #18
 8004e94:	6813      	ldr	r3, [r2, #0]
 8004e96:	490a      	ldr	r1, [pc, #40]	; (8004ec0 <__early_init+0xa0>)
 8004e98:	4203      	tst	r3, r0
 8004e9a:	d0fb      	beq.n	8004e94 <__early_init+0x74>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004e9c:	4809      	ldr	r0, [pc, #36]	; (8004ec4 <__early_init+0xa4>)
 8004e9e:	2211      	movs	r2, #17
 8004ea0:	6002      	str	r2, [r0, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8004ea2:	684a      	ldr	r2, [r1, #4]
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004eaa:	200c      	movs	r0, #12
 8004eac:	684b      	ldr	r3, [r1, #4]
 8004eae:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <__early_init+0xa0>)
 8004eb0:	4003      	ands	r3, r0
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d1fa      	bne.n	8004eac <__early_init+0x8c>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8004eb6:	6991      	ldr	r1, [r2, #24]
 8004eb8:	2001      	movs	r0, #1
 8004eba:	4308      	orrs	r0, r1
 8004ebc:	6190      	str	r0, [r2, #24]
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8004ebe:	4770      	bx	lr
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46c0      	nop			; (mov r8, r8)

08004ed0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8004ed0:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ed2:	b672      	cpsid	i
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <chThdExit+0x44>)
 8004ed6:	699c      	ldr	r4, [r3, #24]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8004ed8:	6260      	str	r0, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8004eda:	1c25      	adds	r5, r4, #0
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8004edc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ede:	3528      	adds	r5, #40	; 0x28
 8004ee0:	42a8      	cmp	r0, r5
 8004ee2:	d006      	beq.n	8004ef2 <chThdExit+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8004ee4:	6802      	ldr	r2, [r0, #0]
 8004ee6:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8004ee8:	f7fc f822 	bl	8000f30 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8004eec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8004eee:	42a8      	cmp	r0, r5
 8004ef0:	d1f8      	bne.n	8004ee4 <chThdExit+0x14>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8004ef2:	2022      	movs	r0, #34	; 0x22
 8004ef4:	5c21      	ldrb	r1, [r4, r0]
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	d108      	bne.n	8004f0c <chThdExit+0x3c>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8004efa:	2321      	movs	r3, #33	; 0x21
 8004efc:	5ce5      	ldrb	r5, [r4, r3]

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8004efe:	07aa      	lsls	r2, r5, #30
 8004f00:	d104      	bne.n	8004f0c <chThdExit+0x3c>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8004f02:	6960      	ldr	r0, [r4, #20]
 8004f04:	6922      	ldr	r2, [r4, #16]
 8004f06:	6102      	str	r2, [r0, #16]
 8004f08:	6924      	ldr	r4, [r4, #16]
 8004f0a:	6160      	str	r0, [r4, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8004f0c:	200f      	movs	r0, #15
 8004f0e:	f7fb ff6f 	bl	8000df0 <chSchGoSleepS>
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000ff8 	.word	0x20000ff8
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46c0      	nop			; (mov r8, r8)

08004f20 <bmk_thread3.9641>:
  (void)chMsgSend(tp, 0);
  return n;
}
#endif

static THD_FUNCTION(bmk_thread3, p) {
 8004f20:	b508      	push	{r3, lr}

  chThdExit((msg_t)p);
 8004f22:	f7ff ffd5 	bl	8004ed0 <chThdExit>
}
 8004f26:	bd08      	pop	{r3, pc}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46c0      	nop			; (mov r8, r8)

08004f30 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8004f30:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <chSchDoReschedule+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8004f32:	b510      	push	{r4, lr}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8004f34:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 8004f36:	6991      	ldr	r1, [r2, #24]

  tqp->next             = tp->queue.next;
 8004f38:	6803      	ldr	r3, [r0, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8004f3a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8004f3c:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8004f3e:	6013      	str	r3, [r2, #0]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8004f40:	6190      	str	r0, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 8004f42:	2220      	movs	r2, #32
 8004f44:	5484      	strb	r4, [r0, r2]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8004f46:	2400      	movs	r4, #0
 8004f48:	548c      	strb	r4, [r1, r2]
 8004f4a:	688a      	ldr	r2, [r1, #8]
 8004f4c:	e000      	b.n	8004f50 <chSchDoReschedule+0x20>
 8004f4e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8004f50:	689c      	ldr	r4, [r3, #8]
 8004f52:	4294      	cmp	r4, r2
 8004f54:	d8fb      	bhi.n	8004f4e <chSchDoReschedule+0x1e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8004f56:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8004f58:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8004f5a:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8004f5c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8004f5e:	6059      	str	r1, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8004f60:	f7fb f936 	bl	80001d0 <_port_switch>
}
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	20000ff8 	.word	0x20000ff8
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46c0      	nop			; (mov r8, r8)

08004f70 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	4647      	mov	r7, r8
 8004f74:	b480      	push	{r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8004f76:	4825      	ldr	r0, [pc, #148]	; (800500c <__init_ram_areas+0x9c>)
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004f78:	2380      	movs	r3, #128	; 0x80
/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8004f7a:	4684      	mov	ip, r0
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004f7c:	4698      	mov	r8, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004f7e:	2400      	movs	r4, #0
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004f80:	44e0      	add	r8, ip
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8004f82:	4662      	mov	r2, ip
    uint32_t *p = rap->init_area;
 8004f84:	6856      	ldr	r6, [r2, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004f86:	6895      	ldr	r5, [r2, #8]
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8004f88:	6811      	ldr	r1, [r2, #0]
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004f8a:	42ae      	cmp	r6, r5
 8004f8c:	d220      	bcs.n	8004fd0 <__init_ram_areas+0x60>
 8004f8e:	43f7      	mvns	r7, r6
 8004f90:	19e8      	adds	r0, r5, r7
      *p = *tp;
 8004f92:	1c0a      	adds	r2, r1, #0
 8004f94:	0743      	lsls	r3, r0, #29
 8004f96:	ca01      	ldmia	r2!, {r0}
 8004f98:	0fdf      	lsrs	r7, r3, #31
 8004f9a:	1c33      	adds	r3, r6, #0
 8004f9c:	c301      	stmia	r3!, {r0}
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004f9e:	42ab      	cmp	r3, r5
 8004fa0:	d210      	bcs.n	8004fc4 <__init_ram_areas+0x54>
 8004fa2:	2f00      	cmp	r7, #0
 8004fa4:	d004      	beq.n	8004fb0 <__init_ram_areas+0x40>
      *p = *tp;
 8004fa6:	6849      	ldr	r1, [r1, #4]
 8004fa8:	3204      	adds	r2, #4
 8004faa:	c302      	stmia	r3!, {r1}
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	d209      	bcs.n	8004fc4 <__init_ram_areas+0x54>
      *p = *tp;
 8004fb0:	1c10      	adds	r0, r2, #0
 8004fb2:	c880      	ldmia	r0!, {r7}
 8004fb4:	1c19      	adds	r1, r3, #0
 8004fb6:	c180      	stmia	r1!, {r7}
 8004fb8:	6852      	ldr	r2, [r2, #4]
 8004fba:	605a      	str	r2, [r3, #4]
      p++;
 8004fbc:	1d0b      	adds	r3, r1, #4
 8004fbe:	1d02      	adds	r2, r0, #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	d3f5      	bcc.n	8004fb0 <__init_ram_areas+0x40>
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004fc4:	43f3      	mvns	r3, r6
 8004fc6:	195d      	adds	r5, r3, r5
 8004fc8:	08a8      	lsrs	r0, r5, #2
 8004fca:	3001      	adds	r0, #1
 8004fcc:	0087      	lsls	r7, r0, #2
 8004fce:	19f6      	adds	r6, r6, r7
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004fd0:	4661      	mov	r1, ip
 8004fd2:	68cd      	ldr	r5, [r1, #12]
 8004fd4:	42ae      	cmp	r6, r5
 8004fd6:	d211      	bcs.n	8004ffc <__init_ram_areas+0x8c>
 8004fd8:	43f2      	mvns	r2, r6
 8004fda:	18ab      	adds	r3, r5, r2
 8004fdc:	0758      	lsls	r0, r3, #29
      *p = 0;
 8004fde:	c610      	stmia	r6!, {r4}
 8004fe0:	0fc7      	lsrs	r7, r0, #31
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004fe2:	42ae      	cmp	r6, r5
 8004fe4:	d20a      	bcs.n	8004ffc <__init_ram_areas+0x8c>
 8004fe6:	2f00      	cmp	r7, #0
 8004fe8:	d002      	beq.n	8004ff0 <__init_ram_areas+0x80>
      *p = 0;
 8004fea:	c610      	stmia	r6!, {r4}
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004fec:	42ae      	cmp	r6, r5
 8004fee:	d205      	bcs.n	8004ffc <__init_ram_areas+0x8c>
      *p = 0;
 8004ff0:	1c31      	adds	r1, r6, #0
 8004ff2:	c110      	stmia	r1!, {r4}
 8004ff4:	6074      	str	r4, [r6, #4]
      p++;
 8004ff6:	1d0e      	adds	r6, r1, #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004ff8:	42ae      	cmp	r6, r5
 8004ffa:	d3f9      	bcc.n	8004ff0 <__init_ram_areas+0x80>
      *p = 0;
      p++;
    }
    rap++;
 8004ffc:	2510      	movs	r5, #16
 8004ffe:	44ac      	add	ip, r5
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8005000:	45c4      	cmp	ip, r8
 8005002:	d3be      	bcc.n	8004f82 <__init_ram_areas+0x12>
#endif
}
 8005004:	bc04      	pop	{r2}
 8005006:	4690      	mov	r8, r2
 8005008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	08006688 	.word	0x08006688

08005010 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8005010:	e7fe      	b.n	8005010 <__default_exit>
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46c0      	nop			; (mov r8, r8)

08005020 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8005020:	4770      	bx	lr
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46c0      	nop			; (mov r8, r8)

08005030 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8005030:	4770      	bx	lr
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46c0      	nop			; (mov r8, r8)

08005040 <test_010_001_setup.9363>:

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <test_010_001_setup.9363+0x20>)
  H_NEXT(&heapp->header) = hp;
 8005042:	4908      	ldr	r1, [pc, #32]	; (8005064 <test_010_001_setup.9363+0x24>)

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8005044:	2200      	movs	r2, #0
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8005046:	20cc      	movs	r0, #204	; 0xcc
  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
  H_NEXT(&heapp->header) = hp;
 8005048:	6099      	str	r1, [r3, #8]
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
 800504a:	600a      	str	r2, [r1, #0]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800504c:	6048      	str	r0, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800504e:	1c19      	adds	r1, r3, #0
 8005050:	3110      	adds	r1, #16

  chDbgCheck((heapp != NULL) && (size > 0U) &&
             MEM_IS_ALIGNED(buf, CH_HEAP_ALIGNMENT) &&
             MEM_IS_ALIGNED(size, CH_HEAP_ALIGNMENT));

  heapp->provider = NULL;
 8005052:	601a      	str	r2, [r3, #0]
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	6119      	str	r1, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8005058:	6159      	str	r1, [r3, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 800505a:	619a      	str	r2, [r3, #24]
 * .
 */

static void test_010_001_setup(void) {
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}
 800505c:	4770      	bx	lr
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	20000538 	.word	0x20000538
 8005064:	20000558 	.word	0x20000558
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	46c0      	nop			; (mov r8, r8)

08005070 <test_008_001_setup.9104>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <test_008_001_setup.9104+0x28>)
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <test_008_001_setup.9104+0x2c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005074:	1c18      	adds	r0, r3, #0
 8005076:	601a      	str	r2, [r3, #0]
  mbp->rdptr = buf;
 8005078:	60da      	str	r2, [r3, #12]
  mbp->wrptr = buf;
 800507a:	609a      	str	r2, [r3, #8]
  mbp->top = &buf[n];
 800507c:	3210      	adds	r2, #16
 800507e:	301c      	adds	r0, #28
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	1c1a      	adds	r2, r3, #0
 8005084:	3210      	adds	r2, #16
 8005086:	61d8      	str	r0, [r3, #28]
  tqp->prev = (thread_t *)tqp;
 8005088:	6218      	str	r0, [r3, #32]
 800508a:	2104      	movs	r1, #4
 800508c:	2000      	movs	r0, #0
 800508e:	6259      	str	r1, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005090:	611a      	str	r2, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8005092:	615a      	str	r2, [r3, #20]
 8005094:	6198      	str	r0, [r3, #24]
 * .
 */

static void test_008_001_setup(void) {
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8005096:	4770      	bx	lr
 8005098:	20000438 	.word	0x20000438
 800509c:	20000bc0 	.word	0x20000bc0

080050a0 <test_008_003_setup.9100>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <test_008_003_setup.9100+0x28>)
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <test_008_003_setup.9100+0x2c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80050a4:	1c18      	adds	r0, r3, #0
 80050a6:	601a      	str	r2, [r3, #0]
  mbp->rdptr = buf;
 80050a8:	60da      	str	r2, [r3, #12]
  mbp->wrptr = buf;
 80050aa:	609a      	str	r2, [r3, #8]
  mbp->top = &buf[n];
 80050ac:	3210      	adds	r2, #16
 80050ae:	301c      	adds	r0, #28
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	1c1a      	adds	r2, r3, #0
 80050b4:	3210      	adds	r2, #16
 80050b6:	61d8      	str	r0, [r3, #28]
  tqp->prev = (thread_t *)tqp;
 80050b8:	6218      	str	r0, [r3, #32]
 80050ba:	2104      	movs	r1, #4
 80050bc:	2000      	movs	r0, #0
 80050be:	6259      	str	r1, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80050c0:	611a      	str	r2, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 80050c2:	615a      	str	r2, [r3, #20]
 80050c4:	6198      	str	r0, [r3, #24]
 * .
 */

static void test_008_003_setup(void) {
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 80050c6:	4770      	bx	lr
 80050c8:	20000438 	.word	0x20000438
 80050cc:	20000bc0 	.word	0x20000bc0

080050d0 <bmk_thread1.9647.4114>:
#endif

static void tmo(void *param) {(void)param;}

#if CH_CFG_USE_MESSAGES
static THD_FUNCTION(bmk_thread1, p) {
 80050d0:	b510      	push	{r4, lr}
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80050d2:	f7fb feb5 	bl	8000e40 <chMsgWait>
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 80050d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80050d8:	b672      	cpsid	i
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80050da:	1c21      	adds	r1, r4, #0
 80050dc:	f7fb fe40 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80050e0:	b662      	cpsie	i
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	d1f5      	bne.n	80050d2 <bmk_thread1.9647.4114+0x2>
}
 80050e6:	bd10      	pop	{r4, pc}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46c0      	nop			; (mov r8, r8)

080050f0 <test_009_001_execute.9239>:

static void test_009_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}

static void test_009_001_execute(void) {
 80050f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f2:	4647      	mov	r7, r8
 80050f4:	b480      	push	{r7}
  unsigned i;

  /* [9.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 80050f6:	4f5d      	ldr	r7, [pc, #372]	; (800526c <test_009_001_execute.9239+0x17c>)
 80050f8:	2301      	movs	r3, #1
 80050fa:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050fc:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80050fe:	4c5c      	ldr	r4, [pc, #368]	; (8005270 <test_009_001_execute.9239+0x180>)
 8005100:	4d5c      	ldr	r5, [pc, #368]	; (8005274 <test_009_001_execute.9239+0x184>)
 8005102:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 8005104:	6025      	str	r5, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005106:	602a      	str	r2, [r5, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005108:	b662      	cpsie	i
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 800510a:	6860      	ldr	r0, [r4, #4]
 800510c:	1941      	adds	r1, r0, r5
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800510e:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005110:	6826      	ldr	r6, [r4, #0]
  mp->next = php;
 8005112:	6021      	str	r1, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005114:	600e      	str	r6, [r1, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005116:	b662      	cpsie	i
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	18c8      	adds	r0, r1, r3
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800511c:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800511e:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 8005120:	6020      	str	r0, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005122:	6002      	str	r2, [r0, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005124:	b662      	cpsie	i
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005126:	6861      	ldr	r1, [r4, #4]
 8005128:	1846      	adds	r6, r0, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800512a:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800512c:	6823      	ldr	r3, [r4, #0]
  mp->next = php;
 800512e:	6026      	str	r6, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 8005130:	6033      	str	r3, [r6, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005132:	b662      	cpsie	i
  {
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }

  /* [9.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 8005134:	2002      	movs	r0, #2
 8005136:	6038      	str	r0, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005138:	1c20      	adds	r0, r4, #0
 800513a:	f7fb fd01 	bl	8000b40 <chPoolAlloc>
 800513e:	4e4e      	ldr	r6, [pc, #312]	; (8005278 <test_009_001_execute.9239+0x188>)
 8005140:	1e43      	subs	r3, r0, #1
 8005142:	4198      	sbcs	r0, r3
 8005144:	1c31      	adds	r1, r6, #0
 8005146:	f7fb fc5b 	bl	8000a00 <_test_assert>
 800514a:	2800      	cmp	r0, #0
 800514c:	d000      	beq.n	8005150 <test_009_001_execute.9239+0x60>
 800514e:	e079      	b.n	8005244 <test_009_001_execute.9239+0x154>
 8005150:	1c20      	adds	r0, r4, #0
 8005152:	f7fb fcf5 	bl	8000b40 <chPoolAlloc>
 8005156:	1c31      	adds	r1, r6, #0
 8005158:	1e43      	subs	r3, r0, #1
 800515a:	4198      	sbcs	r0, r3
 800515c:	f7fb fc50 	bl	8000a00 <_test_assert>
 8005160:	2800      	cmp	r0, #0
 8005162:	d16f      	bne.n	8005244 <test_009_001_execute.9239+0x154>
 8005164:	1c20      	adds	r0, r4, #0
 8005166:	f7fb fceb 	bl	8000b40 <chPoolAlloc>
 800516a:	1c31      	adds	r1, r6, #0
 800516c:	1e43      	subs	r3, r0, #1
 800516e:	4198      	sbcs	r0, r3
 8005170:	f7fb fc46 	bl	8000a00 <_test_assert>
 8005174:	2800      	cmp	r0, #0
 8005176:	d165      	bne.n	8005244 <test_009_001_execute.9239+0x154>
 8005178:	1c20      	adds	r0, r4, #0
 800517a:	f7fb fce1 	bl	8000b40 <chPoolAlloc>
 800517e:	1c31      	adds	r1, r6, #0
 8005180:	1e43      	subs	r3, r0, #1
 8005182:	4198      	sbcs	r0, r3
 8005184:	f7fb fc3c 	bl	8000a00 <_test_assert>
 8005188:	2800      	cmp	r0, #0
 800518a:	d15b      	bne.n	8005244 <test_009_001_execute.9239+0x154>
  }

  /* [9.1.3] Now must be empty.*/
  test_set_step(3);
 800518c:	2203      	movs	r2, #3
 800518e:	603a      	str	r2, [r7, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005190:	1c20      	adds	r0, r4, #0
 8005192:	f7fb fcd5 	bl	8000b40 <chPoolAlloc>
 8005196:	4939      	ldr	r1, [pc, #228]	; (800527c <test_009_001_execute.9239+0x18c>)
 8005198:	4243      	negs	r3, r0
 800519a:	4158      	adcs	r0, r3
 800519c:	4688      	mov	r8, r1
 800519e:	f7fb fc2f 	bl	8000a00 <_test_assert>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d14e      	bne.n	8005244 <test_009_001_execute.9239+0x154>
  }

  /* [9.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 80051a6:	2304      	movs	r3, #4
 80051a8:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051aa:	b672      	cpsid	i
 80051ac:	6820      	ldr	r0, [r4, #0]
  mp->next = php;
 80051ae:	6025      	str	r5, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80051b0:	6028      	str	r0, [r5, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80051b2:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051b4:	b672      	cpsid	i
 80051b6:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 80051b8:	1d29      	adds	r1, r5, #4
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80051ba:	606a      	str	r2, [r5, #4]
  mp->next = php;
 80051bc:	6021      	str	r1, [r4, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80051be:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051c0:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80051c2:	6823      	ldr	r3, [r4, #0]
  mp->next = php;
 80051c4:	1d08      	adds	r0, r1, #4
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80051c6:	60ab      	str	r3, [r5, #8]
  mp->next = php;
 80051c8:	6020      	str	r0, [r4, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80051ca:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051cc:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80051ce:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 80051d0:	3108      	adds	r1, #8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80051d2:	60ea      	str	r2, [r5, #12]
  mp->next = php;
 80051d4:	6021      	str	r1, [r4, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80051d6:	b662      	cpsie	i
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      chPoolFree(&mp1, &objects[i]);
  }

  /* [9.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 80051d8:	2505      	movs	r5, #5
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80051da:	1c20      	adds	r0, r4, #0
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      chPoolFree(&mp1, &objects[i]);
  }

  /* [9.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 80051dc:	603d      	str	r5, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80051de:	f7fb fcaf 	bl	8000b40 <chPoolAlloc>
 80051e2:	1c31      	adds	r1, r6, #0
 80051e4:	1e43      	subs	r3, r0, #1
 80051e6:	4198      	sbcs	r0, r3
 80051e8:	f7fb fc0a 	bl	8000a00 <_test_assert>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d129      	bne.n	8005244 <test_009_001_execute.9239+0x154>
 80051f0:	1c20      	adds	r0, r4, #0
 80051f2:	f7fb fca5 	bl	8000b40 <chPoolAlloc>
 80051f6:	1c31      	adds	r1, r6, #0
 80051f8:	1e43      	subs	r3, r0, #1
 80051fa:	4198      	sbcs	r0, r3
 80051fc:	f7fb fc00 	bl	8000a00 <_test_assert>
 8005200:	2800      	cmp	r0, #0
 8005202:	d11f      	bne.n	8005244 <test_009_001_execute.9239+0x154>
 8005204:	1c20      	adds	r0, r4, #0
 8005206:	f7fb fc9b 	bl	8000b40 <chPoolAlloc>
 800520a:	1c31      	adds	r1, r6, #0
 800520c:	1e43      	subs	r3, r0, #1
 800520e:	4198      	sbcs	r0, r3
 8005210:	f7fb fbf6 	bl	8000a00 <_test_assert>
 8005214:	2800      	cmp	r0, #0
 8005216:	d115      	bne.n	8005244 <test_009_001_execute.9239+0x154>
 8005218:	1c20      	adds	r0, r4, #0
 800521a:	f7fb fc91 	bl	8000b40 <chPoolAlloc>
 800521e:	1c31      	adds	r1, r6, #0
 8005220:	1e43      	subs	r3, r0, #1
 8005222:	4198      	sbcs	r0, r3
 8005224:	f7fb fbec 	bl	8000a00 <_test_assert>
 8005228:	2800      	cmp	r0, #0
 800522a:	d10b      	bne.n	8005244 <test_009_001_execute.9239+0x154>
  }

  /* [9.1.6] Now must be empty again.*/
  test_set_step(6);
 800522c:	2606      	movs	r6, #6
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800522e:	1c20      	adds	r0, r4, #0
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [9.1.6] Now must be empty again.*/
  test_set_step(6);
 8005230:	603e      	str	r6, [r7, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005232:	f7fb fc85 	bl	8000b40 <chPoolAlloc>
 8005236:	4641      	mov	r1, r8
 8005238:	4243      	negs	r3, r0
 800523a:	4158      	adcs	r0, r3
 800523c:	f7fb fbe0 	bl	8000a00 <_test_assert>
 8005240:	2800      	cmp	r0, #0
 8005242:	d002      	beq.n	800524a <test_009_001_execute.9239+0x15a>
  test_set_step(7);
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
}
 8005244:	bc04      	pop	{r2}
 8005246:	4690      	mov	r8, r2
 8005248:	bdf0      	pop	{r4, r5, r6, r7, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->provider = provider;
 800524a:	480d      	ldr	r0, [pc, #52]	; (8005280 <test_009_001_execute.9239+0x190>)
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  }

  /* [9.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 800524c:	2107      	movs	r1, #7
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
 800524e:	2304      	movs	r3, #4
 8005250:	6039      	str	r1, [r7, #0]
  mp->provider = provider;
 8005252:	60a0      	str	r0, [r4, #8]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8005254:	2700      	movs	r7, #0
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8005256:	1c20      	adds	r0, r4, #0
  mp->object_size = size;
 8005258:	6063      	str	r3, [r4, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 800525a:	6027      	str	r7, [r4, #0]
 800525c:	f7fb fc70 	bl	8000b40 <chPoolAlloc>
 8005260:	4908      	ldr	r1, [pc, #32]	; (8005284 <test_009_001_execute.9239+0x194>)
 8005262:	4243      	negs	r3, r0
 8005264:	4158      	adcs	r0, r3
 8005266:	f7fb fbcb 	bl	8000a00 <_test_assert>
 800526a:	e7eb      	b.n	8005244 <test_009_001_execute.9239+0x154>
 800526c:	2000106c 	.word	0x2000106c
 8005270:	20000470 	.word	0x20000470
 8005274:	200004f8 	.word	0x200004f8
 8005278:	080063b4 	.word	0x080063b4
 800527c:	080063c0 	.word	0x080063c0
 8005280:	08000321 	.word	0x08000321
 8005284:	08006708 	.word	0x08006708
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46c0      	nop			; (mov r8, r8)

08005290 <test_011_002_execute.9482>:

static void test_011_002_execute(void) {
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8005292:	4f53      	ldr	r7, [pc, #332]	; (80053e0 <test_011_002_execute.9482+0x150>)
 8005294:	2301      	movs	r3, #1
 8005296:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 800529a:	4d52      	ldr	r5, [pc, #328]	; (80053e4 <test_011_002_execute.9482+0x154>)
 800529c:	4852      	ldr	r0, [pc, #328]	; (80053e8 <test_011_002_execute.9482+0x158>)
 800529e:	6829      	ldr	r1, [r5, #0]
  mp->next = php;
 80052a0:	6028      	str	r0, [r5, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052a2:	6001      	str	r1, [r0, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80052a4:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052a6:	b672      	cpsid	i
  mp->next = php;
 80052a8:	23a4      	movs	r3, #164	; 0xa4
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052aa:	682e      	ldr	r6, [r5, #0]
 80052ac:	22a4      	movs	r2, #164	; 0xa4
  mp->next = php;
 80052ae:	0059      	lsls	r1, r3, #1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052b0:	0054      	lsls	r4, r2, #1
  mp->next = php;
 80052b2:	1842      	adds	r2, r0, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052b4:	5106      	str	r6, [r0, r4]
  mp->next = php;
 80052b6:	602a      	str	r2, [r5, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80052b8:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ba:	b672      	cpsid	i
 80052bc:	21a4      	movs	r1, #164	; 0xa4
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	24a4      	movs	r4, #164	; 0xa4
  mp->next = php;
 80052c2:	008a      	lsls	r2, r1, #2
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052c4:	00a6      	lsls	r6, r4, #2
  mp->next = php;
 80052c6:	1884      	adds	r4, r0, r2
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052c8:	5183      	str	r3, [r0, r6]
  mp->next = php;
 80052ca:	602c      	str	r4, [r5, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80052cc:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ce:	b672      	cpsid	i
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80052d0:	26f6      	movs	r6, #246	; 0xf6
 80052d2:	6829      	ldr	r1, [r5, #0]
 80052d4:	00b3      	lsls	r3, r6, #2
 80052d6:	50c1      	str	r1, [r0, r3]
  mp->next = php;
 80052d8:	18c0      	adds	r0, r0, r3
 80052da:	6028      	str	r0, [r5, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80052dc:	b662      	cpsie	i
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80052de:	4a43      	ldr	r2, [pc, #268]	; (80053ec <test_011_002_execute.9482+0x15c>)
  {
    prio = chThdGetPriorityX();
  }

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
 80052e0:	2303      	movs	r3, #3
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80052e2:	6994      	ldr	r4, [r2, #24]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	68a6      	ldr	r6, [r4, #8]
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80052e8:	4a41      	ldr	r2, [pc, #260]	; (80053f0 <test_011_002_execute.9482+0x160>)
 80052ea:	1e71      	subs	r1, r6, #1
 80052ec:	4841      	ldr	r0, [pc, #260]	; (80053f4 <test_011_002_execute.9482+0x164>)
 80052ee:	f7fd f85f 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.28>
 80052f2:	4c41      	ldr	r4, [pc, #260]	; (80053f8 <test_011_002_execute.9482+0x168>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80052f4:	1eb1      	subs	r1, r6, #2
  }

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80052f6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80052f8:	4a40      	ldr	r2, [pc, #256]	; (80053fc <test_011_002_execute.9482+0x16c>)
 80052fa:	4841      	ldr	r0, [pc, #260]	; (8005400 <test_011_002_execute.9482+0x170>)
 80052fc:	f7fd f858 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.28>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005300:	1ef1      	subs	r1, r6, #3

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005302:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005304:	4a3f      	ldr	r2, [pc, #252]	; (8005404 <test_011_002_execute.9482+0x174>)
 8005306:	4840      	ldr	r0, [pc, #256]	; (8005408 <test_011_002_execute.9482+0x178>)
 8005308:	f7fd f852 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.28>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800530c:	1f31      	subs	r1, r6, #4
  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800530e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8005310:	4a3e      	ldr	r2, [pc, #248]	; (800540c <test_011_002_execute.9482+0x17c>)
 8005312:	483f      	ldr	r0, [pc, #252]	; (8005410 <test_011_002_execute.9482+0x180>)
 8005314:	f7fd f84c 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.28>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8005318:	1f71      	subs	r1, r6, #5
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800531a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800531c:	4a3d      	ldr	r2, [pc, #244]	; (8005414 <test_011_002_execute.9482+0x184>)
 800531e:	483e      	ldr	r0, [pc, #248]	; (8005418 <test_011_002_execute.9482+0x188>)
 8005320:	f7fd f846 	bl	80023b0 <chThdCreateFromMemoryPool.constprop.28>
 8005324:	6120      	str	r0, [r4, #16]
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8005326:	6820      	ldr	r0, [r4, #0]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8005328:	2104      	movs	r1, #4
 800532a:	6039      	str	r1, [r7, #0]
  {
    test_assert((threads[0] != NULL) &&
 800532c:	2800      	cmp	r0, #0
 800532e:	d054      	beq.n	80053da <test_011_002_execute.9482+0x14a>
 8005330:	6862      	ldr	r2, [r4, #4]
 8005332:	2a00      	cmp	r2, #0
 8005334:	d051      	beq.n	80053da <test_011_002_execute.9482+0x14a>
 8005336:	68a6      	ldr	r6, [r4, #8]
 8005338:	2e00      	cmp	r6, #0
 800533a:	d04e      	beq.n	80053da <test_011_002_execute.9482+0x14a>
 800533c:	68e0      	ldr	r0, [r4, #12]
 800533e:	1e43      	subs	r3, r0, #1
 8005340:	4198      	sbcs	r0, r3
 8005342:	4936      	ldr	r1, [pc, #216]	; (800541c <test_011_002_execute.9482+0x18c>)
 8005344:	f7fb fb5c 	bl	8000a00 <_test_assert>
 8005348:	2800      	cmp	r0, #0
 800534a:	d000      	beq.n	800534e <test_011_002_execute.9482+0xbe>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 800534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert((threads[0] != NULL) &&
                (threads[1] != NULL) &&
                (threads[2] != NULL) &&
                (threads[3] != NULL),
                "thread creation failed");
    test_assert(threads[4] == NULL,
 800534e:	6920      	ldr	r0, [r4, #16]
 8005350:	4933      	ldr	r1, [pc, #204]	; (8005420 <test_011_002_execute.9482+0x190>)
 8005352:	4243      	negs	r3, r0
 8005354:	4158      	adcs	r0, r3
 8005356:	f7fb fb53 	bl	8000a00 <_test_assert>
 800535a:	2800      	cmp	r0, #0
 800535c:	d1f6      	bne.n	800534c <test_011_002_execute.9482+0xbc>
                "thread creation not failed");
  }

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 800535e:	2305      	movs	r3, #5
 8005360:	603b      	str	r3, [r7, #0]
  {
    test_wait_threads();
 8005362:	f7fc f815 	bl	8001390 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8005366:	482f      	ldr	r0, [pc, #188]	; (8005424 <test_011_002_execute.9482+0x194>)
 8005368:	492f      	ldr	r1, [pc, #188]	; (8005428 <test_011_002_execute.9482+0x198>)
 800536a:	f7fb faf9 	bl	8000960 <_test_assert_sequence>
 800536e:	2800      	cmp	r0, #0
 8005370:	d1ec      	bne.n	800534c <test_011_002_execute.9482+0xbc>
  }

  /* [11.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 8005372:	2406      	movs	r4, #6
 8005374:	603c      	str	r4, [r7, #0]
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8005376:	1c28      	adds	r0, r5, #0
 8005378:	f7fb fbe2 	bl	8000b40 <chPoolAlloc>
 800537c:	4f2b      	ldr	r7, [pc, #172]	; (800542c <test_011_002_execute.9482+0x19c>)
 800537e:	1e43      	subs	r3, r0, #1
 8005380:	4198      	sbcs	r0, r3
 8005382:	1c39      	adds	r1, r7, #0
 8005384:	f7fb fb3c 	bl	8000a00 <_test_assert>
 8005388:	2800      	cmp	r0, #0
 800538a:	d1df      	bne.n	800534c <test_011_002_execute.9482+0xbc>
 800538c:	1c28      	adds	r0, r5, #0
 800538e:	f7fb fbd7 	bl	8000b40 <chPoolAlloc>
 8005392:	1c39      	adds	r1, r7, #0
 8005394:	1e43      	subs	r3, r0, #1
 8005396:	4198      	sbcs	r0, r3
 8005398:	f7fb fb32 	bl	8000a00 <_test_assert>
 800539c:	2800      	cmp	r0, #0
 800539e:	d1d5      	bne.n	800534c <test_011_002_execute.9482+0xbc>
 80053a0:	1c28      	adds	r0, r5, #0
 80053a2:	f7fb fbcd 	bl	8000b40 <chPoolAlloc>
 80053a6:	1c39      	adds	r1, r7, #0
 80053a8:	1e43      	subs	r3, r0, #1
 80053aa:	4198      	sbcs	r0, r3
 80053ac:	f7fb fb28 	bl	8000a00 <_test_assert>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d1cb      	bne.n	800534c <test_011_002_execute.9482+0xbc>
 80053b4:	1c28      	adds	r0, r5, #0
 80053b6:	f7fb fbc3 	bl	8000b40 <chPoolAlloc>
 80053ba:	1c39      	adds	r1, r7, #0
 80053bc:	1e43      	subs	r3, r0, #1
 80053be:	4198      	sbcs	r0, r3
 80053c0:	f7fb fb1e 	bl	8000a00 <_test_assert>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1c1      	bne.n	800534c <test_011_002_execute.9482+0xbc>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80053c8:	1c28      	adds	r0, r5, #0
 80053ca:	f7fb fbb9 	bl	8000b40 <chPoolAlloc>
 80053ce:	4918      	ldr	r1, [pc, #96]	; (8005430 <test_011_002_execute.9482+0x1a0>)
 80053d0:	4243      	negs	r3, r0
 80053d2:	4158      	adcs	r0, r3
 80053d4:	f7fb fb14 	bl	8000a00 <_test_assert>
 80053d8:	e7b8      	b.n	800534c <test_011_002_execute.9482+0xbc>
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 80053da:	2000      	movs	r0, #0
 80053dc:	e7b1      	b.n	8005342 <test_011_002_execute.9482+0xb2>
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	2000106c 	.word	0x2000106c
 80053e4:	20000be4 	.word	0x20000be4
 80053e8:	20000558 	.word	0x20000558
 80053ec:	20000ff8 	.word	0x20000ff8
 80053f0:	08006248 	.word	0x08006248
 80053f4:	080062b0 	.word	0x080062b0
 80053f8:	20000bd0 	.word	0x20000bd0
 80053fc:	08006244 	.word	0x08006244
 8005400:	080062d0 	.word	0x080062d0
 8005404:	08006240 	.word	0x08006240
 8005408:	080062d8 	.word	0x080062d8
 800540c:	0800623c 	.word	0x0800623c
 8005410:	08006724 	.word	0x08006724
 8005414:	08006268 	.word	0x08006268
 8005418:	0800672c 	.word	0x0800672c
 800541c:	080062b8 	.word	0x080062b8
 8005420:	080062e0 	.word	0x080062e0
 8005424:	080064d4 	.word	0x080064d4
 8005428:	08006220 	.word	0x08006220
 800542c:	08006734 	.word	0x08006734
 8005430:	08006744 	.word	0x08006744
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46c0      	nop			; (mov r8, r8)

08005440 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8005440:	b508      	push	{r3, lr}
 8005442:	1c01      	adds	r1, r0, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005444:	b672      	cpsid	i
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8005446:	2008      	movs	r0, #8
 8005448:	f7fe f9d2 	bl	80037f0 <chSchGoSleepTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800544c:	b662      	cpsie	i

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 800544e:	bd08      	pop	{r3, pc}

08005450 <test_wait_tick>:

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8005450:	b508      	push	{r3, lr}

  chThdSleep(1);
 8005452:	2001      	movs	r0, #1
 8005454:	f7ff fff4 	bl	8005440 <chThdSleep>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005458:	b672      	cpsid	i
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	05d8      	lsls	r0, r3, #23
 800545e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005460:	b662      	cpsie	i
  return chVTGetSystemTime();
}
 8005462:	bd08      	pop	{r3, pc}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46c0      	nop			; (mov r8, r8)

08005470 <test_012_004_execute.9672>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8005470:	4828      	ldr	r0, [pc, #160]	; (8005514 <test_012_004_execute.9672+0xa4>)
 * - [12.4.3] Stopping the target thread.
 * - [12.4.4] Score is printed.
 * .
 */

static void test_012_004_execute(void) {
 8005472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005474:	6981      	ldr	r1, [r0, #24]
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 8005476:	4a28      	ldr	r2, [pc, #160]	; (8005518 <test_012_004_execute.9672+0xa8>)
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005478:	6889      	ldr	r1, [r1, #8]
 * - [12.4.3] Stopping the target thread.
 * - [12.4.4] Score is printed.
 * .
 */

static void test_012_004_execute(void) {
 800547a:	464f      	mov	r7, r9
 800547c:	4646      	mov	r6, r8
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 800547e:	2301      	movs	r3, #1
 * - [12.4.3] Stopping the target thread.
 * - [12.4.4] Score is printed.
 * .
 */

static void test_012_004_execute(void) {
 8005480:	b4c0      	push	{r6, r7}
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 8005482:	4691      	mov	r9, r2
 8005484:	6013      	str	r3, [r2, #0]
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005486:	3101      	adds	r1, #1
 8005488:	4a24      	ldr	r2, [pc, #144]	; (800551c <test_012_004_execute.9672+0xac>)
 800548a:	2300      	movs	r3, #0
 800548c:	4824      	ldr	r0, [pc, #144]	; (8005520 <test_012_004_execute.9672+0xb0>)
 800548e:	f7fc f987 	bl	80017a0 <chThdCreateStatic.constprop.56>
                                        bmk_thread4, NULL);
  }

  /* [12.4.2] Waking up the thread as fast as possible in a one second
     time window.*/
  test_set_step(2);
 8005492:	2602      	movs	r6, #2
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8005494:	4d23      	ldr	r5, [pc, #140]	; (8005524 <test_012_004_execute.9672+0xb4>)
                                        bmk_thread4, NULL);
  }

  /* [12.4.2] Waking up the thread as fast as possible in a one second
     time window.*/
  test_set_step(2);
 8005496:	464f      	mov	r7, r9
 8005498:	603e      	str	r6, [r7, #0]
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800549a:	6028      	str	r0, [r5, #0]
 800549c:	1c04      	adds	r4, r0, #0
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 800549e:	f7ff ffd7 	bl	8005450 <test_wait_tick>
      chSysUnlock();
      n += 4;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80054a2:	4e21      	ldr	r6, [pc, #132]	; (8005528 <test_012_004_execute.9672+0xb8>)
 80054a4:	2280      	movs	r2, #128	; 0x80
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
    start = test_wait_tick();
 80054a6:	4680      	mov	r8, r0
     time window.*/
  test_set_step(2);
  {
    systime_t start, end;

    n = 0;
 80054a8:	2500      	movs	r5, #0
 80054aa:	05d7      	lsls	r7, r2, #23
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054ac:	b672      	cpsid	i
    start = test_wait_tick();
    end = start + MS2ST(1000);
    do {
      chSysLock();
      chSchWakeupS(tp, MSG_OK);
 80054ae:	2100      	movs	r1, #0
 80054b0:	1c20      	adds	r0, r4, #0
 80054b2:	f7fb fc55 	bl	8000d60 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80054b6:	1c20      	adds	r0, r4, #0
 80054b8:	2100      	movs	r1, #0
 80054ba:	f7fb fc51 	bl	8000d60 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80054be:	1c20      	adds	r0, r4, #0
 80054c0:	2100      	movs	r1, #0
 80054c2:	f7fb fc4d 	bl	8000d60 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80054c6:	1c20      	adds	r0, r4, #0
 80054c8:	2100      	movs	r1, #0
 80054ca:	f7fb fc49 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80054ce:	b662      	cpsie	i
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 80054d2:	4640      	mov	r0, r8
      chSysUnlock();
      n += 4;
 80054d4:	3504      	adds	r5, #4
 80054d6:	1a19      	subs	r1, r3, r0
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80054d8:	42b1      	cmp	r1, r6
 80054da:	d9e7      	bls.n	80054ac <test_012_004_execute.9672+0x3c>
  }

  /* [12.4.3] Stopping the target thread.*/
  test_set_step(3);
 80054dc:	2703      	movs	r7, #3
 80054de:	464a      	mov	r2, r9
 80054e0:	6017      	str	r7, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054e2:	b672      	cpsid	i
  {
    chSysLock();
    chSchWakeupS(tp, MSG_TIMEOUT);
 80054e4:	1c20      	adds	r0, r4, #0
 80054e6:	2401      	movs	r4, #1
 80054e8:	4261      	negs	r1, r4
 80054ea:	f7fb fc39 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80054ee:	b662      	cpsie	i
    chSysUnlock();
    test_wait_threads();
 80054f0:	f7fb ff4e 	bl	8001390 <test_wait_threads>
  }

  /* [12.4.4] Score is printed.*/
  test_set_step(4);
 80054f4:	2604      	movs	r6, #4
 80054f6:	464b      	mov	r3, r9
 80054f8:	601e      	str	r6, [r3, #0]
  {
    test_print("--- Score : ");
 80054fa:	480c      	ldr	r0, [pc, #48]	; (800552c <test_012_004_execute.9672+0xbc>)
 80054fc:	f7fb f948 	bl	8000790 <test_print>
    test_printn(n * 2);
 8005500:	0068      	lsls	r0, r5, #1
 8005502:	f7fb f95d 	bl	80007c0 <test_printn>
    test_println(" ctxswc/S");
 8005506:	480a      	ldr	r0, [pc, #40]	; (8005530 <test_012_004_execute.9672+0xc0>)
 8005508:	f7fb f922 	bl	8000750 <test_println>
  }
}
 800550c:	bc0c      	pop	{r2, r3}
 800550e:	4690      	mov	r8, r2
 8005510:	4699      	mov	r9, r3
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005514:	20000ff8 	.word	0x20000ff8
 8005518:	2000106c 	.word	0x2000106c
 800551c:	08000e21 	.word	0x08000e21
 8005520:	20000558 	.word	0x20000558
 8005524:	20000bd0 	.word	0x20000bd0
 8005528:	0000270f 	.word	0x0000270f
 800552c:	08006424 	.word	0x08006424
 8005530:	08006460 	.word	0x08006460
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46c0      	nop			; (mov r8, r8)

08005540 <msg_loop_test.9674.4124>:
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
}

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8005540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005542:	4647      	mov	r7, r8
 8005544:	b480      	push	{r7}
 8005546:	1c05      	adds	r5, r0, #0
  systime_t start, end;

  uint32_t n = 0;
  start = test_wait_tick();
 8005548:	f7ff ff82 	bl	8005450 <test_wait_tick>
 800554c:	2780      	movs	r7, #128	; 0x80
    (void)chMsgSend(tp, 1);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (chVTIsSystemTimeWithinX(start, end));
 800554e:	4e0b      	ldr	r6, [pc, #44]	; (800557c <msg_loop_test.9674.4124+0x3c>)

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
  systime_t start, end;

  uint32_t n = 0;
  start = test_wait_tick();
 8005550:	4680      	mov	r8, r0
}

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
  systime_t start, end;

  uint32_t n = 0;
 8005552:	2400      	movs	r4, #0
 8005554:	05ff      	lsls	r7, r7, #23
  start = test_wait_tick();
  end = start + MS2ST(1000);
  do {
    (void)chMsgSend(tp, 1);
 8005556:	1c28      	adds	r0, r5, #0
 8005558:	2101      	movs	r1, #1
 800555a:	f7fb fd01 	bl	8000f60 <chMsgSend>
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	4642      	mov	r2, r8
    n++;
 8005562:	3401      	adds	r4, #1
 8005564:	1a98      	subs	r0, r3, r2
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (chVTIsSystemTimeWithinX(start, end));
 8005566:	42b0      	cmp	r0, r6
 8005568:	d9f5      	bls.n	8005556 <msg_loop_test.9674.4124+0x16>
  (void)chMsgSend(tp, 0);
 800556a:	1c28      	adds	r0, r5, #0
 800556c:	2100      	movs	r1, #0
 800556e:	f7fb fcf7 	bl	8000f60 <chMsgSend>
  return n;
}
 8005572:	1c20      	adds	r0, r4, #0
 8005574:	bc04      	pop	{r2}
 8005576:	4690      	mov	r8, r2
 8005578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	0000270f 	.word	0x0000270f

08005580 <test_012_001_execute.9681>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8005580:	4813      	ldr	r0, [pc, #76]	; (80055d0 <test_012_001_execute.9681+0x50>)
 *   second time window.
 * - [12.1.3] Score is printed.
 * .
 */

static void test_012_001_execute(void) {
 8005582:	b538      	push	{r3, r4, r5, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005584:	6981      	ldr	r1, [r0, #24]
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 8005586:	4c13      	ldr	r4, [pc, #76]	; (80055d4 <test_012_001_execute.9681+0x54>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005588:	6889      	ldr	r1, [r1, #8]
static void test_012_001_execute(void) {
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 800558a:	2301      	movs	r3, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800558c:	3901      	subs	r1, #1
static void test_012_001_execute(void) {
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 800558e:	6023      	str	r3, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005590:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <test_012_001_execute.9681+0x58>)
 8005592:	2300      	movs	r3, #0
 8005594:	4811      	ldr	r0, [pc, #68]	; (80055dc <test_012_001_execute.9681+0x5c>)
 8005596:	f7fc f903 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800559a:	2502      	movs	r5, #2

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800559c:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <test_012_001_execute.9681+0x60>)
  }

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800559e:	6025      	str	r5, [r4, #0]

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80055a0:	6010      	str	r0, [r2, #0]

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
  {
    n = msg_loop_test(threads[0]);
 80055a2:	f7ff ffcd 	bl	8005540 <msg_loop_test.9674.4124>
 80055a6:	1c05      	adds	r5, r0, #0
    test_wait_threads();
 80055a8:	f7fb fef2 	bl	8001390 <test_wait_threads>
  }

  /* [12.1.3] Score is printed.*/
  test_set_step(3);
 80055ac:	2303      	movs	r3, #3
 80055ae:	6023      	str	r3, [r4, #0]
  {
    test_print("--- Score : ");
 80055b0:	480c      	ldr	r0, [pc, #48]	; (80055e4 <test_012_001_execute.9681+0x64>)
 80055b2:	f7fb f8ed 	bl	8000790 <test_print>
    test_printn(n);
 80055b6:	1c28      	adds	r0, r5, #0
 80055b8:	f7fb f902 	bl	80007c0 <test_printn>
    test_print(" msgs/S, ");
 80055bc:	480a      	ldr	r0, [pc, #40]	; (80055e8 <test_012_001_execute.9681+0x68>)
 80055be:	f7fb f8e7 	bl	8000790 <test_print>
    test_printn(n << 1);
 80055c2:	0068      	lsls	r0, r5, #1
 80055c4:	f7fb f8fc 	bl	80007c0 <test_printn>
    test_println(" ctxswc/S");
 80055c8:	4808      	ldr	r0, [pc, #32]	; (80055ec <test_012_001_execute.9681+0x6c>)
 80055ca:	f7fb f8c1 	bl	8000750 <test_println>
  }
}
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000ff8 	.word	0x20000ff8
 80055d4:	2000106c 	.word	0x2000106c
 80055d8:	080050d1 	.word	0x080050d1
 80055dc:	20000558 	.word	0x20000558
 80055e0:	20000bd0 	.word	0x20000bd0
 80055e4:	08006424 	.word	0x08006424
 80055e8:	08006758 	.word	0x08006758
 80055ec:	08006460 	.word	0x08006460

080055f0 <test_012_002_execute.9679>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80055f0:	4813      	ldr	r0, [pc, #76]	; (8005640 <test_012_002_execute.9679+0x50>)
 *   second time window.
 * - [12.2.3] Score is printed.
 * .
 */

static void test_012_002_execute(void) {
 80055f2:	b538      	push	{r3, r4, r5, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 80055f4:	6981      	ldr	r1, [r0, #24]
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 80055f6:	4c13      	ldr	r4, [pc, #76]	; (8005644 <test_012_002_execute.9679+0x54>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80055f8:	6889      	ldr	r1, [r1, #8]
static void test_012_002_execute(void) {
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 80055fa:	2301      	movs	r3, #1
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80055fc:	3101      	adds	r1, #1
static void test_012_002_execute(void) {
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 80055fe:	6023      	str	r3, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <test_012_002_execute.9679+0x58>)
 8005602:	2300      	movs	r3, #0
 8005604:	4811      	ldr	r0, [pc, #68]	; (800564c <test_012_002_execute.9679+0x5c>)
 8005606:	f7fc f8cb 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800560a:	2502      	movs	r5, #2

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <test_012_002_execute.9679+0x60>)
  }

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800560e:	6025      	str	r5, [r4, #0]

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005610:	6010      	str	r0, [r2, #0]

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
  {
    n = msg_loop_test(threads[0]);
 8005612:	f7ff ff95 	bl	8005540 <msg_loop_test.9674.4124>
 8005616:	1c05      	adds	r5, r0, #0
    test_wait_threads();
 8005618:	f7fb feba 	bl	8001390 <test_wait_threads>
  }

  /* [12.2.3] Score is printed.*/
  test_set_step(3);
 800561c:	2303      	movs	r3, #3
 800561e:	6023      	str	r3, [r4, #0]
  {
    test_print("--- Score : ");
 8005620:	480c      	ldr	r0, [pc, #48]	; (8005654 <test_012_002_execute.9679+0x64>)
 8005622:	f7fb f8b5 	bl	8000790 <test_print>
    test_printn(n);
 8005626:	1c28      	adds	r0, r5, #0
 8005628:	f7fb f8ca 	bl	80007c0 <test_printn>
    test_print(" msgs/S, ");
 800562c:	480a      	ldr	r0, [pc, #40]	; (8005658 <test_012_002_execute.9679+0x68>)
 800562e:	f7fb f8af 	bl	8000790 <test_print>
    test_printn(n << 1);
 8005632:	0068      	lsls	r0, r5, #1
 8005634:	f7fb f8c4 	bl	80007c0 <test_printn>
    test_println(" ctxswc/S");
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <test_012_002_execute.9679+0x6c>)
 800563a:	f7fb f889 	bl	8000750 <test_println>
  }
}
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000ff8 	.word	0x20000ff8
 8005644:	2000106c 	.word	0x2000106c
 8005648:	080050d1 	.word	0x080050d1
 800564c:	20000558 	.word	0x20000558
 8005650:	20000bd0 	.word	0x20000bd0
 8005654:	08006424 	.word	0x08006424
 8005658:	08006758 	.word	0x08006758
 800565c:	08006460 	.word	0x08006460

08005660 <test_012_003_execute.9677>:
 *   second time window.
 * - [12.3.4] Score is printed.
 * .
 */

static void test_012_003_execute(void) {
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8005662:	4d2e      	ldr	r5, [pc, #184]	; (800571c <test_012_003_execute.9677+0xbc>)
 8005664:	4647      	mov	r7, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005666:	69a8      	ldr	r0, [r5, #24]
 8005668:	b480      	push	{r7}

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800566a:	4e2d      	ldr	r6, [pc, #180]	; (8005720 <test_012_003_execute.9677+0xc0>)
static void test_012_003_execute(void) {
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 800566c:	4f2d      	ldr	r7, [pc, #180]	; (8005724 <test_012_003_execute.9677+0xc4>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800566e:	6881      	ldr	r1, [r0, #8]
static void test_012_003_execute(void) {
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 8005670:	2301      	movs	r3, #1
 8005672:	603b      	str	r3, [r7, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005674:	3101      	adds	r1, #1
 8005676:	1c30      	adds	r0, r6, #0
 8005678:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <test_012_003_execute.9677+0xc8>)
 800567a:	2300      	movs	r3, #0
 800567c:	f7fc f890 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
 8005680:	2102      	movs	r1, #2
 8005682:	6039      	str	r1, [r7, #0]
 8005684:	69a9      	ldr	r1, [r5, #24]

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005686:	4c29      	ldr	r4, [pc, #164]	; (800572c <test_012_003_execute.9677+0xcc>)

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005688:	22a4      	movs	r2, #164	; 0xa4
 800568a:	6889      	ldr	r1, [r1, #8]
 800568c:	0053      	lsls	r3, r2, #1
 800568e:	4a28      	ldr	r2, [pc, #160]	; (8005730 <test_012_003_execute.9677+0xd0>)

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005690:	6020      	str	r0, [r4, #0]

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8005692:	3902      	subs	r1, #2
 8005694:	18f0      	adds	r0, r6, r3
 8005696:	2300      	movs	r3, #0
 8005698:	4690      	mov	r8, r2
 800569a:	f7fc f881 	bl	80017a0 <chThdCreateStatic.constprop.56>
 800569e:	69a9      	ldr	r1, [r5, #24]
 80056a0:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 80056a2:	6889      	ldr	r1, [r1, #8]
 80056a4:	20a4      	movs	r0, #164	; 0xa4
 80056a6:	0083      	lsls	r3, r0, #2
 80056a8:	4642      	mov	r2, r8
 80056aa:	18f0      	adds	r0, r6, r3
 80056ac:	3903      	subs	r1, #3
 80056ae:	2300      	movs	r3, #0
 80056b0:	f7fc f876 	bl	80017a0 <chThdCreateStatic.constprop.56>
 80056b4:	69ab      	ldr	r3, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80056b6:	22f6      	movs	r2, #246	; 0xf6
 80056b8:	6899      	ldr	r1, [r3, #8]
  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 80056ba:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80056bc:	0090      	lsls	r0, r2, #2
 80056be:	1830      	adds	r0, r6, r0
 80056c0:	4642      	mov	r2, r8
 80056c2:	3904      	subs	r1, #4
 80056c4:	2300      	movs	r3, #0
 80056c6:	f7fc f86b 	bl	80017a0 <chThdCreateStatic.constprop.56>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80056ca:	21a4      	movs	r1, #164	; 0xa4
 80056cc:	00ca      	lsls	r2, r1, #3
     current thread.*/
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80056ce:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80056d0:	18b0      	adds	r0, r6, r2
 80056d2:	69ae      	ldr	r6, [r5, #24]
 80056d4:	4642      	mov	r2, r8
 80056d6:	68b1      	ldr	r1, [r6, #8]
 80056d8:	2300      	movs	r3, #0
 80056da:	3905      	subs	r1, #5
 80056dc:	f7fc f860 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
 80056e0:	2503      	movs	r5, #3
 80056e2:	603d      	str	r5, [r7, #0]
  test_set_step(2);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80056e4:	6120      	str	r0, [r4, #16]

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
  {
    n = msg_loop_test(threads[0]);
 80056e6:	6820      	ldr	r0, [r4, #0]
 80056e8:	f7ff ff2a 	bl	8005540 <msg_loop_test.9674.4124>
 80056ec:	1c04      	adds	r4, r0, #0
    test_wait_threads();
 80056ee:	f7fb fe4f 	bl	8001390 <test_wait_threads>
  }

  /* [12.3.4] Score is printed.*/
  test_set_step(4);
 80056f2:	2004      	movs	r0, #4
 80056f4:	6038      	str	r0, [r7, #0]
  {
    test_print("--- Score : ");
 80056f6:	480f      	ldr	r0, [pc, #60]	; (8005734 <test_012_003_execute.9677+0xd4>)
 80056f8:	f7fb f84a 	bl	8000790 <test_print>
    test_printn(n);
 80056fc:	1c20      	adds	r0, r4, #0
 80056fe:	f7fb f85f 	bl	80007c0 <test_printn>
    test_print(" msgs/S, ");
 8005702:	480d      	ldr	r0, [pc, #52]	; (8005738 <test_012_003_execute.9677+0xd8>)
 8005704:	f7fb f844 	bl	8000790 <test_print>
    test_printn(n << 1);
 8005708:	0060      	lsls	r0, r4, #1
 800570a:	f7fb f859 	bl	80007c0 <test_printn>
    test_println(" ctxswc/S");
 800570e:	480b      	ldr	r0, [pc, #44]	; (800573c <test_012_003_execute.9677+0xdc>)
 8005710:	f7fb f81e 	bl	8000750 <test_println>
  }
}
 8005714:	bc04      	pop	{r2}
 8005716:	4690      	mov	r8, r2
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	20000ff8 	.word	0x20000ff8
 8005720:	20000558 	.word	0x20000558
 8005724:	2000106c 	.word	0x2000106c
 8005728:	080050d1 	.word	0x080050d1
 800572c:	20000bd0 	.word	0x20000bd0
 8005730:	08004f21 	.word	0x08004f21
 8005734:	08006424 	.word	0x08006424
 8005738:	08006758 	.word	0x08006758
 800573c:	08006460 	.word	0x08006460

08005740 <test_002_001_execute.7953>:
 * - [2.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void test_002_001_execute(void) {
 8005740:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [2.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8005742:	4e29      	ldr	r6, [pc, #164]	; (80057e8 <test_002_001_execute.7953+0xa8>)
 8005744:	2301      	movs	r3, #1
 8005746:	2580      	movs	r5, #128	; 0x80
 8005748:	6033      	str	r3, [r6, #0]
 800574a:	05ed      	lsls	r5, r5, #23
 800574c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 800574e:	2064      	movs	r0, #100	; 0x64
 8005750:	f7ff fe76 	bl	8005440 <chThdSleep>
    test_assert_time_window(time + 100,
 8005754:	1c20      	adds	r0, r4, #0
 8005756:	1c21      	adds	r1, r4, #0
 8005758:	3064      	adds	r0, #100	; 0x64
 800575a:	3167      	adds	r1, #103	; 0x67
 800575c:	f7fa ff68 	bl	8000630 <_test_assert_time_window.constprop.5>
 8005760:	2800      	cmp	r0, #0
 8005762:	d000      	beq.n	8005766 <test_002_001_execute.7953+0x26>
    chThdSleepUntil(time + 100);
    test_assert_time_window(time + 100,
                            time + 100 + CH_CFG_ST_TIMEDELTA + 1,
                            "out of time window");
  }
}
 8005764:	bd70      	pop	{r4, r5, r6, pc}
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
  {
    time = chVTGetSystemTimeX();
    chThdSleepMicroseconds(100000);
 8005766:	21fa      	movs	r1, #250	; 0xfa
  }

  /* [2.1.2] The current system time is read then a sleep is performed
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
 8005768:	2002      	movs	r0, #2
 800576a:	6030      	str	r0, [r6, #0]
  {
    time = chVTGetSystemTimeX();
    chThdSleepMicroseconds(100000);
 800576c:	0088      	lsls	r0, r1, #2
 800576e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005770:	f7ff fe66 	bl	8005440 <chThdSleep>
    test_assert_time_window(time + US2ST(100000),
 8005774:	22fa      	movs	r2, #250	; 0xfa
 8005776:	491d      	ldr	r1, [pc, #116]	; (80057ec <test_002_001_execute.7953+0xac>)
 8005778:	0093      	lsls	r3, r2, #2
 800577a:	18e0      	adds	r0, r4, r3
 800577c:	1861      	adds	r1, r4, r1
 800577e:	f7fa ff57 	bl	8000630 <_test_assert_time_window.constprop.5>
 8005782:	2800      	cmp	r0, #0
 8005784:	d1ee      	bne.n	8005764 <test_002_001_execute.7953+0x24>
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
  {
    time = chVTGetSystemTimeX();
    chThdSleepMilliseconds(100);
 8005786:	22fa      	movs	r2, #250	; 0xfa
  }

  /* [2.1.3] The current system time is read then a sleep is performed
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
 8005788:	2003      	movs	r0, #3
 800578a:	6030      	str	r0, [r6, #0]
  {
    time = chVTGetSystemTimeX();
    chThdSleepMilliseconds(100);
 800578c:	0090      	lsls	r0, r2, #2
 800578e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005790:	f7ff fe56 	bl	8005440 <chThdSleep>
    test_assert_time_window(time + MS2ST(100),
 8005794:	23fa      	movs	r3, #250	; 0xfa
 8005796:	4a15      	ldr	r2, [pc, #84]	; (80057ec <test_002_001_execute.7953+0xac>)
 8005798:	0099      	lsls	r1, r3, #2
 800579a:	1860      	adds	r0, r4, r1
 800579c:	18a1      	adds	r1, r4, r2
 800579e:	f7fa ff47 	bl	8000630 <_test_assert_time_window.constprop.5>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d1de      	bne.n	8005764 <test_002_001_execute.7953+0x24>
                            "out of time window");
  }

  /* [2.1.4] The current system time is read then a sleep is performed
     for 1 second and on exit the system time is verified again.*/
  test_set_step(4);
 80057a6:	2004      	movs	r0, #4
 80057a8:	6030      	str	r0, [r6, #0]
  {
    time = chVTGetSystemTimeX();
    chThdSleepSeconds(1);
 80057aa:	4811      	ldr	r0, [pc, #68]	; (80057f0 <test_002_001_execute.7953+0xb0>)
 80057ac:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80057ae:	f7ff fe47 	bl	8005440 <chThdSleep>
    test_assert_time_window(time + S2ST(1),
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <test_002_001_execute.7953+0xb0>)
 80057b4:	490f      	ldr	r1, [pc, #60]	; (80057f4 <test_002_001_execute.7953+0xb4>)
 80057b6:	18e0      	adds	r0, r4, r3
 80057b8:	1861      	adds	r1, r4, r1
 80057ba:	f7fa ff39 	bl	8000630 <_test_assert_time_window.constprop.5>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d1d0      	bne.n	8005764 <test_002_001_execute.7953+0x24>
                            "out of time window");
  }

  /* [2.1.5] Function chThdSleepUntil() is tested with a timeline of
     "now" + 100 ticks.*/
  test_set_step(5);
 80057c2:	2205      	movs	r2, #5
 80057c4:	6032      	str	r2, [r6, #0]
 80057c6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleepUntil(time + 100);
 80057c8:	1c34      	adds	r4, r6, #0
 80057ca:	3464      	adds	r4, #100	; 0x64
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057cc:	b672      	cpsid	i
 80057ce:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
 80057d0:	1b61      	subs	r1, r4, r5
  if (time > (systime_t)0) {
 80057d2:	d002      	beq.n	80057da <test_002_001_execute.7953+0x9a>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80057d4:	2008      	movs	r0, #8
 80057d6:	f7fe f80b 	bl	80037f0 <chSchGoSleepTimeoutS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80057da:	b662      	cpsie	i
    test_assert_time_window(time + 100,
 80057dc:	1c31      	adds	r1, r6, #0
 80057de:	3167      	adds	r1, #103	; 0x67
 80057e0:	1c20      	adds	r0, r4, #0
 80057e2:	f7fa ff25 	bl	8000630 <_test_assert_time_window.constprop.5>
 80057e6:	e7bd      	b.n	8005764 <test_002_001_execute.7953+0x24>
 80057e8:	2000106c 	.word	0x2000106c
 80057ec:	000003eb 	.word	0x000003eb
 80057f0:	00002710 	.word	0x00002710
 80057f4:	00002713 	.word	0x00002713
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46c0      	nop			; (mov r8, r8)

08005800 <thread2.8342>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8005800:	20fa      	movs	r0, #250	; 0xfa

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static THD_FUNCTION(thread2, p) {
 8005802:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8005804:	0040      	lsls	r0, r0, #1
 8005806:	f7ff fe1b 	bl	8005440 <chThdSleep>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800580a:	b672      	cpsid	i
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 800580c:	4803      	ldr	r0, [pc, #12]	; (800581c <thread2.8342+0x1c>)
 800580e:	f7fb fdff 	bl	8001410 <chSemSignalI>
  chSchRescheduleS();
 8005812:	f7fb fa05 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005816:	b662      	cpsie	i
  chSysUnlock();
}
 8005818:	bd08      	pop	{r3, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	20000508 	.word	0x20000508

08005820 <test_005_004_execute.8586>:

static void test_005_004_teardown(void) {
  test_wait_threads();
}

static void test_005_004_execute(void) {
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	4656      	mov	r6, sl
 8005824:	464d      	mov	r5, r9
 8005826:	4644      	mov	r4, r8
 8005828:	465f      	mov	r7, fp
 800582a:	b4f0      	push	{r4, r5, r6, r7}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 800582c:	4d42      	ldr	r5, [pc, #264]	; (8005938 <test_005_004_execute.8586+0x118>)
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800582e:	4f43      	ldr	r7, [pc, #268]	; (800593c <test_005_004_execute.8586+0x11c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8005830:	69ab      	ldr	r3, [r5, #24]
    pa = p + 1;
    pb = p + 2;
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
 8005832:	4e43      	ldr	r6, [pc, #268]	; (8005940 <test_005_004_execute.8586+0x120>)
 8005834:	689c      	ldr	r4, [r3, #8]
 8005836:	2202      	movs	r2, #2
  /* [5.4.1] Getting current thread priority P(0) and assigning to the
     threads A and B priorities +1 and +2.*/
  test_set_step(1);
  {
    p = chThdGetPriorityX();
    pa = p + 1;
 8005838:	1c60      	adds	r0, r4, #1
 800583a:	4681      	mov	r9, r0
    pb = p + 2;
 800583c:	1ca1      	adds	r1, r4, #2
 800583e:	468a      	mov	sl, r1
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
 8005840:	6032      	str	r2, [r6, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005842:	1c38      	adds	r0, r7, #0
 8005844:	4649      	mov	r1, r9
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <test_005_004_execute.8586+0x124>)
 8005848:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <test_005_004_execute.8586+0x128>)
 800584a:	f7fb ffa9 	bl	80017a0 <chThdCreateStatic.constprop.56>
 800584e:	46b8      	mov	r8, r7
 8005850:	4f3e      	ldr	r7, [pc, #248]	; (800594c <test_005_004_execute.8586+0x12c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005852:	4651      	mov	r1, sl
  }

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005854:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005856:	4640      	mov	r0, r8
 8005858:	3049      	adds	r0, #73	; 0x49
 800585a:	4a3d      	ldr	r2, [pc, #244]	; (8005950 <test_005_004_execute.8586+0x130>)
 800585c:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <test_005_004_execute.8586+0x134>)
 800585e:	30ff      	adds	r0, #255	; 0xff
 8005860:	f7fb ff9e 	bl	80017a0 <chThdCreateStatic.constprop.56>
  }

  /* [5.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
 8005864:	2303      	movs	r3, #3

  /* [5.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005866:	6078      	str	r0, [r7, #4]
  /* [5.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
  {
    chMtxLock(&m1);
 8005868:	483b      	ldr	r0, [pc, #236]	; (8005958 <test_005_004_execute.8586+0x138>)
  }

  /* [5.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
 800586a:	6033      	str	r3, [r6, #0]
  {
    chMtxLock(&m1);
 800586c:	4680      	mov	r8, r0
 800586e:	f7fb fca7 	bl	80011c0 <chMtxLock>
 8005872:	69a9      	ldr	r1, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005874:	4f39      	ldr	r7, [pc, #228]	; (800595c <test_005_004_execute.8586+0x13c>)
 8005876:	688a      	ldr	r2, [r1, #8]
 8005878:	1c39      	adds	r1, r7, #0
 800587a:	1aa0      	subs	r0, r4, r2
 800587c:	4243      	negs	r3, r0
 800587e:	4158      	adcs	r0, r3
 8005880:	f7fb f8be 	bl	8000a00 <_test_assert>
 8005884:	2800      	cmp	r0, #0
 8005886:	d005      	beq.n	8005894 <test_005_004_execute.8586+0x74>
  test_set_step(8);
  {
    chMtxUnlock(&m1);
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
  }
}
 8005888:	bc3c      	pop	{r2, r3, r4, r5}
 800588a:	4690      	mov	r8, r2
 800588c:	4699      	mov	r9, r3
 800588e:	46a2      	mov	sl, r4
 8005890:	46ab      	mov	fp, r5
 8005892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* [5.4.4] Waiting 100mS, this makes thread A reach chMtxLock(M1) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread A.*/
  test_set_step(4);
 8005894:	2304      	movs	r3, #4
  {
    chThdSleepMilliseconds(100);
 8005896:	20fa      	movs	r0, #250	; 0xfa
  }

  /* [5.4.4] Waiting 100mS, this makes thread A reach chMtxLock(M1) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread A.*/
  test_set_step(4);
 8005898:	6033      	str	r3, [r6, #0]
  {
    chThdSleepMilliseconds(100);
 800589a:	0080      	lsls	r0, r0, #2
 800589c:	f7ff fdd0 	bl	8005440 <chThdSleep>
 80058a0:	69a9      	ldr	r1, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80058a2:	464b      	mov	r3, r9
 80058a4:	688a      	ldr	r2, [r1, #8]
 80058a6:	1c39      	adds	r1, r7, #0
 80058a8:	1a98      	subs	r0, r3, r2
 80058aa:	4243      	negs	r3, r0
 80058ac:	4158      	adcs	r0, r3
 80058ae:	f7fb f8a7 	bl	8000a00 <_test_assert>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d1e8      	bne.n	8005888 <test_005_004_execute.8586+0x68>
  /* [5.4.5] Locking the mutex M2 before thread B has a chance to lock
     it. The priority must not change because B has not yet reached
     chMtxLock(M2). the mutex is not locked.*/
  test_set_step(5);
  {
    chMtxLock(&m2);
 80058b6:	492a      	ldr	r1, [pc, #168]	; (8005960 <test_005_004_execute.8586+0x140>)
  }

  /* [5.4.5] Locking the mutex M2 before thread B has a chance to lock
     it. The priority must not change because B has not yet reached
     chMtxLock(M2). the mutex is not locked.*/
  test_set_step(5);
 80058b8:	2005      	movs	r0, #5
 80058ba:	6030      	str	r0, [r6, #0]
  {
    chMtxLock(&m2);
 80058bc:	1c08      	adds	r0, r1, #0
 80058be:	468b      	mov	fp, r1
 80058c0:	f7fb fc7e 	bl	80011c0 <chMtxLock>
 80058c4:	69aa      	ldr	r2, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80058c6:	464b      	mov	r3, r9
 80058c8:	6890      	ldr	r0, [r2, #8]
 80058ca:	1c39      	adds	r1, r7, #0
 80058cc:	1a18      	subs	r0, r3, r0
 80058ce:	4243      	negs	r3, r0
 80058d0:	4158      	adcs	r0, r3
 80058d2:	f7fb f895 	bl	8000a00 <_test_assert>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d1d6      	bne.n	8005888 <test_005_004_execute.8586+0x68>
  }

  /* [5.4.6] Waiting 100mS, this makes thread B reach chMtxLock(M2) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread B.*/
  test_set_step(6);
 80058da:	2106      	movs	r1, #6
  {
    chThdSleepMilliseconds(100);
 80058dc:	22fa      	movs	r2, #250	; 0xfa
  }

  /* [5.4.6] Waiting 100mS, this makes thread B reach chMtxLock(M2) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread B.*/
  test_set_step(6);
 80058de:	6031      	str	r1, [r6, #0]
  {
    chThdSleepMilliseconds(100);
 80058e0:	0090      	lsls	r0, r2, #2
 80058e2:	f7ff fdad 	bl	8005440 <chThdSleep>
 80058e6:	69a8      	ldr	r0, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 80058e8:	4653      	mov	r3, sl
 80058ea:	6881      	ldr	r1, [r0, #8]
 80058ec:	1a58      	subs	r0, r3, r1
 80058ee:	4243      	negs	r3, r0
 80058f0:	4158      	adcs	r0, r3
 80058f2:	1c39      	adds	r1, r7, #0
 80058f4:	f7fb f884 	bl	8000a00 <_test_assert>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d1c5      	bne.n	8005888 <test_005_004_execute.8586+0x68>
  }

  /* [5.4.7] Unlocking M2, the priority should fall back to P(A).*/
  test_set_step(7);
 80058fc:	2207      	movs	r2, #7
  {
    chMtxUnlock(&m2);
 80058fe:	4658      	mov	r0, fp
    chThdSleepMilliseconds(100);
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
  }

  /* [5.4.7] Unlocking M2, the priority should fall back to P(A).*/
  test_set_step(7);
 8005900:	6032      	str	r2, [r6, #0]
  {
    chMtxUnlock(&m2);
 8005902:	f7fb fbc5 	bl	8001090 <chMtxUnlock>
 8005906:	69a8      	ldr	r0, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005908:	464b      	mov	r3, r9
 800590a:	6881      	ldr	r1, [r0, #8]
 800590c:	1a58      	subs	r0, r3, r1
 800590e:	4243      	negs	r3, r0
 8005910:	4158      	adcs	r0, r3
 8005912:	1c39      	adds	r1, r7, #0
 8005914:	f7fb f874 	bl	8000a00 <_test_assert>
 8005918:	2800      	cmp	r0, #0
 800591a:	d1b5      	bne.n	8005888 <test_005_004_execute.8586+0x68>
  }

  /* [5.4.8] Unlocking M1, the priority should fall back to P(0).*/
  test_set_step(8);
 800591c:	2208      	movs	r2, #8
 800591e:	6032      	str	r2, [r6, #0]
  {
    chMtxUnlock(&m1);
 8005920:	4640      	mov	r0, r8
 8005922:	f7fb fbb5 	bl	8001090 <chMtxUnlock>
 8005926:	69ad      	ldr	r5, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005928:	1c39      	adds	r1, r7, #0
 800592a:	68ae      	ldr	r6, [r5, #8]
 800592c:	1ba0      	subs	r0, r4, r6
 800592e:	4244      	negs	r4, r0
 8005930:	4160      	adcs	r0, r4
 8005932:	f7fb f865 	bl	8000a00 <_test_assert>
 8005936:	e7a7      	b.n	8005888 <test_005_004_execute.8586+0x68>
 8005938:	20000ff8 	.word	0x20000ff8
 800593c:	20000558 	.word	0x20000558
 8005940:	2000106c 	.word	0x2000106c
 8005944:	08005971 	.word	0x08005971
 8005948:	08006248 	.word	0x08006248
 800594c:	20000bd0 	.word	0x20000bd0
 8005950:	08005991 	.word	0x08005991
 8005954:	08006244 	.word	0x08006244
 8005958:	20000420 	.word	0x20000420
 800595c:	0800624c 	.word	0x0800624c
 8005960:	20000460 	.word	0x20000460
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46c0      	nop			; (mov r8, r8)

08005970 <thread4A.8559.4149>:
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread4A, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8005970:	20fa      	movs	r0, #250	; 0xfa
  chMtxUnlock(&m2);
  test_emit_token('A');
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread4A, p) {
 8005972:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8005974:	0040      	lsls	r0, r0, #1
 8005976:	f7ff fd63 	bl	8005440 <chThdSleep>
  chMtxLock(&m1);
 800597a:	4c04      	ldr	r4, [pc, #16]	; (800598c <thread4A.8559.4149+0x1c>)
 800597c:	1c20      	adds	r0, r4, #0
 800597e:	f7fb fc1f 	bl	80011c0 <chMtxLock>
  chMtxUnlock(&m1);
 8005982:	1c20      	adds	r0, r4, #0
 8005984:	f7fb fb84 	bl	8001090 <chMtxUnlock>
}
 8005988:	bd10      	pop	{r4, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	20000420 	.word	0x20000420

08005990 <thread4B.8556.4152>:

static THD_FUNCTION(thread4B, p) {
 8005990:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
 8005992:	4807      	ldr	r0, [pc, #28]	; (80059b0 <thread4B.8556.4152+0x20>)
 8005994:	f7ff fd54 	bl	8005440 <chThdSleep>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005998:	b672      	cpsid	i
  chSysLock();
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 800599a:	4c06      	ldr	r4, [pc, #24]	; (80059b4 <thread4B.8556.4152+0x24>)
 800599c:	1c20      	adds	r0, r4, #0
 800599e:	f7fb fba7 	bl	80010f0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 80059a2:	1c20      	adds	r0, r4, #0
 80059a4:	f7fb fb4c 	bl	8001040 <chMtxUnlockS>
  chSchRescheduleS();
 80059a8:	f7fb f93a 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80059ac:	b662      	cpsie	i
  chSysUnlock();
}
 80059ae:	bd10      	pop	{r4, pc}
 80059b0:	000005dc 	.word	0x000005dc
 80059b4:	20000460 	.word	0x20000460
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	46c0      	nop			; (mov r8, r8)

080059c0 <evt_thread3.8880>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static THD_FUNCTION(evt_thread3, p) {
 80059c0:	b510      	push	{r4, lr}
 80059c2:	1c04      	adds	r4, r0, #0

  chThdSleepMilliseconds(50);
 80059c4:	20fa      	movs	r0, #250	; 0xfa
 80059c6:	0040      	lsls	r0, r0, #1
 80059c8:	f7ff fd3a 	bl	8005440 <chThdSleep>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059cc:	b672      	cpsid	i
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 80059ce:	2101      	movs	r1, #1
 80059d0:	1c20      	adds	r0, r4, #0
 80059d2:	f7fb fafd 	bl	8000fd0 <chEvtSignalI>
  chSchRescheduleS();
 80059d6:	f7fb f923 	bl	8000c20 <chSchRescheduleS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80059da:	b662      	cpsie	i
  chEvtSignal((thread_t *)p, 1);
}
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	46c0      	nop			; (mov r8, r8)

080059e0 <Thread2.9950>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 80059e0:	b538      	push	{r3, r4, r5, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <Thread2.9950+0x24>)
 80059e4:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <Thread2.9950+0x28>)
 80059e6:	6998      	ldr	r0, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker2");
  while (true) {
    palClearPad(GPIOC, GPIOC_LED_GREEN);
 80059e8:	2480      	movs	r4, #128	; 0x80
 80059ea:	4d08      	ldr	r5, [pc, #32]	; (8005a0c <Thread2.9950+0x2c>)
 80059ec:	6182      	str	r2, [r0, #24]
 80059ee:	00a4      	lsls	r4, r4, #2
 80059f0:	836c      	strh	r4, [r5, #26]
    chThdSleepMilliseconds(250);
 80059f2:	4807      	ldr	r0, [pc, #28]	; (8005a10 <Thread2.9950+0x30>)
 80059f4:	f7ff fd24 	bl	8005440 <chThdSleep>
    palSetPad(GPIOC, GPIOC_LED_GREEN);
 80059f8:	832c      	strh	r4, [r5, #24]
    chThdSleepMilliseconds(250);
 80059fa:	4805      	ldr	r0, [pc, #20]	; (8005a10 <Thread2.9950+0x30>)
 80059fc:	f7ff fd20 	bl	8005440 <chThdSleep>
 8005a00:	e7f6      	b.n	80059f0 <Thread2.9950+0x10>
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000ff8 	.word	0x20000ff8
 8005a08:	08006764 	.word	0x08006764
 8005a0c:	48000800 	.word	0x48000800
 8005a10:	000009c4 	.word	0x000009c4
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46c0      	nop			; (mov r8, r8)
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	46c0      	nop			; (mov r8, r8)
 8005a1e:	46c0      	nop			; (mov r8, r8)

08005a20 <Thread1.9953>:

/*
 * Blue LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <Thread1.9953+0x20>)
 8005a24:	4a07      	ldr	r2, [pc, #28]	; (8005a44 <Thread1.9953+0x24>)
 8005a26:	6998      	ldr	r0, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker1");
  while (true) {
    palClearPad(GPIOC, GPIOC_LED_BLUE);
 8005a28:	4d07      	ldr	r5, [pc, #28]	; (8005a48 <Thread1.9953+0x28>)
 8005a2a:	6182      	str	r2, [r0, #24]
 8005a2c:	2480      	movs	r4, #128	; 0x80
 8005a2e:	836c      	strh	r4, [r5, #26]
    chThdSleepMilliseconds(500);
 8005a30:	4806      	ldr	r0, [pc, #24]	; (8005a4c <Thread1.9953+0x2c>)
 8005a32:	f7ff fd05 	bl	8005440 <chThdSleep>
    palSetPad(GPIOC, GPIOC_LED_BLUE);
 8005a36:	832c      	strh	r4, [r5, #24]
    chThdSleepMilliseconds(500);
 8005a38:	4804      	ldr	r0, [pc, #16]	; (8005a4c <Thread1.9953+0x2c>)
 8005a3a:	f7ff fd01 	bl	8005440 <chThdSleep>
 8005a3e:	e7f6      	b.n	8005a2e <Thread1.9953+0xe>
 8005a40:	20000ff8 	.word	0x20000ff8
 8005a44:	08006770 	.word	0x08006770
 8005a48:	48000800 	.word	0x48000800
 8005a4c:	00001388 	.word	0x00001388

08005a50 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8005a52:	4bb1      	ldr	r3, [pc, #708]	; (8005d18 <main+0x2c8>)
 8005a54:	465f      	mov	r7, fp
 8005a56:	4656      	mov	r6, sl
 8005a58:	464d      	mov	r5, r9
 8005a5a:	4644      	mov	r4, r8
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a60:	b4f0      	push	{r4, r5, r6, r7}
 8005a62:	2200      	movs	r2, #0
 8005a64:	424c      	negs	r4, r1
 8005a66:	629c      	str	r4, [r3, #40]	; 0x28
 8005a68:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8005a6a:	6918      	ldr	r0, [r3, #16]
 8005a6c:	611c      	str	r4, [r3, #16]
 8005a6e:	611a      	str	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8005a70:	68dd      	ldr	r5, [r3, #12]
 8005a72:	48aa      	ldr	r0, [pc, #680]	; (8005d1c <main+0x2cc>)

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8005a74:	2780      	movs	r7, #128	; 0x80
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8005a76:	4305      	orrs	r5, r0
 8005a78:	60dd      	str	r5, [r3, #12]
 8005a7a:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8005a7c:	69de      	ldr	r6, [r3, #28]
 8005a7e:	0579      	lsls	r1, r7, #21
 8005a80:	4331      	orrs	r1, r6
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005a82:	4da7      	ldr	r5, [pc, #668]	; (8005d20 <main+0x2d0>)
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8005a84:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005a86:	682c      	ldr	r4, [r5, #0]
 8005a88:	2080      	movs	r0, #128	; 0x80
 8005a8a:	0046      	lsls	r6, r0, #1
 8005a8c:	4326      	orrs	r6, r4
 8005a8e:	602e      	str	r6, [r5, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8005a90:	6a1f      	ldr	r7, [r3, #32]
 8005a92:	21c0      	movs	r1, #192	; 0xc0
 8005a94:	008d      	lsls	r5, r1, #2
 8005a96:	2480      	movs	r4, #128	; 0x80
 8005a98:	b083      	sub	sp, #12
 8005a9a:	402f      	ands	r7, r5
 8005a9c:	00a0      	lsls	r0, r4, #2
 8005a9e:	4287      	cmp	r7, r0
 8005aa0:	d003      	beq.n	8005aaa <main+0x5a>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8005aa2:	2680      	movs	r6, #128	; 0x80
 8005aa4:	0277      	lsls	r7, r6, #9
 8005aa6:	621f      	str	r7, [r3, #32]
    RCC->BDCR = 0;
 8005aa8:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8005aaa:	4b9b      	ldr	r3, [pc, #620]	; (8005d18 <main+0x2c8>)
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	6a19      	ldr	r1, [r3, #32]
 8005ab0:	0215      	lsls	r5, r2, #8
 8005ab2:	4229      	tst	r1, r5
 8005ab4:	d107      	bne.n	8005ac6 <main+0x76>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8005ab6:	6a1c      	ldr	r4, [r3, #32]
 8005ab8:	2080      	movs	r0, #128	; 0x80
 8005aba:	0086      	lsls	r6, r0, #2
 8005abc:	4326      	orrs	r6, r4
 8005abe:	621e      	str	r6, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8005ac0:	6a1f      	ldr	r7, [r3, #32]
 8005ac2:	433d      	orrs	r5, r7
 8005ac4:	621d      	str	r5, [r3, #32]
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8005ac6:	4c94      	ldr	r4, [pc, #592]	; (8005d18 <main+0x2c8>)
 8005ac8:	23fc      	movs	r3, #252	; 0xfc
 8005aca:	6961      	ldr	r1, [r4, #20]
 8005acc:	03da      	lsls	r2, r3, #15
 8005ace:	430a      	orrs	r2, r1
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005ad0:	2590      	movs	r5, #144	; 0x90
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8005ad2:	6162      	str	r2, [r4, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005ad4:	05ee      	lsls	r6, r5, #23
  gpiop->OSPEEDR = config->ospeedr;
 8005ad6:	20fc      	movs	r0, #252	; 0xfc
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005ad8:	4d92      	ldr	r5, [pc, #584]	; (8005d24 <main+0x2d4>)

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005ada:	4993      	ldr	r1, [pc, #588]	; (8005d28 <main+0x2d8>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005adc:	22a0      	movs	r2, #160	; 0xa0
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005ade:	2300      	movs	r3, #0
  gpiop->OSPEEDR = config->ospeedr;
 8005ae0:	0607      	lsls	r7, r0, #24
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005ae2:	0590      	lsls	r0, r2, #22
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005ae4:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005ae6:	4a91      	ldr	r2, [pc, #580]	; (8005d2c <main+0x2dc>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005ae8:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8005aea:	60f1      	str	r1, [r6, #12]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005aec:	27fc      	movs	r7, #252	; 0xfc
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005aee:	6175      	str	r5, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8005af0:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8005af2:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005af4:	6030      	str	r0, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005af6:	4e8e      	ldr	r6, [pc, #568]	; (8005d30 <main+0x2e0>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005af8:	20a8      	movs	r0, #168	; 0xa8
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005afa:	00b9      	lsls	r1, r7, #2
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005afc:	0607      	lsls	r7, r0, #24
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005afe:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005b00:	488c      	ldr	r0, [pc, #560]	; (8005d34 <main+0x2e4>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005b02:	60b1      	str	r1, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8005b04:	60f2      	str	r2, [r6, #12]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005b06:	498c      	ldr	r1, [pc, #560]	; (8005d38 <main+0x2e8>)
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8005b08:	6175      	str	r5, [r6, #20]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005b0a:	4a8c      	ldr	r2, [pc, #560]	; (8005d3c <main+0x2ec>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8005b0c:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8005b0e:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005b10:	6037      	str	r7, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005b12:	4e8b      	ldr	r6, [pc, #556]	; (8005d40 <main+0x2f0>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005b14:	4f8b      	ldr	r7, [pc, #556]	; (8005d44 <main+0x2f4>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005b16:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005b18:	60b1      	str	r1, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8005b1a:	60f2      	str	r2, [r6, #12]
 8005b1c:	498a      	ldr	r1, [pc, #552]	; (8005d48 <main+0x2f8>)
  gpiop->ODR     = config->odr;
 8005b1e:	6170      	str	r0, [r6, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005b20:	4a8a      	ldr	r2, [pc, #552]	; (8005d4c <main+0x2fc>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8005b22:	6233      	str	r3, [r6, #32]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005b24:	488a      	ldr	r0, [pc, #552]	; (8005d50 <main+0x300>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8005b26:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005b28:	6037      	str	r7, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005b2a:	4e8a      	ldr	r6, [pc, #552]	; (8005d54 <main+0x304>)
 8005b2c:	4f8a      	ldr	r7, [pc, #552]	; (8005d58 <main+0x308>)
 8005b2e:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005b30:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8005b32:	60f1      	str	r1, [r6, #12]
  gpiop->ODR     = config->odr;
 8005b34:	6175      	str	r5, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8005b36:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8005b38:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005b3a:	6033      	str	r3, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005b3c:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005b3e:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8005b40:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8005b42:	6155      	str	r5, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8005b44:	6213      	str	r3, [r2, #32]
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8005b46:	4e85      	ldr	r6, [pc, #532]	; (8005d5c <main+0x30c>)
  gpiop->AFRH    = config->afrh;
 8005b48:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005b4a:	6013      	str	r3, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005b4c:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005b4e:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8005b50:	60f8      	str	r0, [r7, #12]
  gpiop->ODR     = config->odr;
 8005b52:	617d      	str	r5, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	4d82      	ldr	r5, [pc, #520]	; (8005d60 <main+0x310>)
  gpiop->AFRH    = config->afrh;
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005b5a:	603b      	str	r3, [r7, #0]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8005b5c:	4f7f      	ldr	r7, [pc, #508]	; (8005d5c <main+0x30c>)
 8005b5e:	c620      	stmia	r6!, {r5}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005b60:	1c39      	adds	r1, r7, #0
 8005b62:	607e      	str	r6, [r7, #4]
 8005b64:	310c      	adds	r1, #12
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005b66:	1c3a      	adds	r2, r7, #0
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8005b68:	1c3e      	adds	r6, r7, #0
 8005b6a:	1c3d      	adds	r5, r7, #0
 8005b6c:	3664      	adds	r6, #100	; 0x64
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005b6e:	3254      	adds	r2, #84	; 0x54
 8005b70:	60f9      	str	r1, [r7, #12]
  tqp->prev = (thread_t *)tqp;
 8005b72:	6139      	str	r1, [r7, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005b74:	3530      	adds	r5, #48	; 0x30
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8005b76:	2110      	movs	r1, #16
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8005b78:	617b      	str	r3, [r7, #20]
  iqp->q_buffer  = bp;
 8005b7a:	61ba      	str	r2, [r7, #24]
  iqp->q_rdptr   = bp;
 8005b7c:	627a      	str	r2, [r7, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8005b7e:	623a      	str	r2, [r7, #32]
  iqp->q_top     = bp + size;
 8005b80:	61fe      	str	r6, [r7, #28]
 8005b82:	633d      	str	r5, [r7, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8005b84:	637d      	str	r5, [r7, #52]	; 0x34
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8005b86:	63b9      	str	r1, [r7, #56]	; 0x38
  oqp->q_buffer  = bp;
 8005b88:	63fe      	str	r6, [r7, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8005b8a:	64be      	str	r6, [r7, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8005b8c:	647e      	str	r6, [r7, #68]	; 0x44
  oqp->q_top     = bp + size;
 8005b8e:	1c3a      	adds	r2, r7, #0
  oqp->q_notify  = onfy;
 8005b90:	4e74      	ldr	r6, [pc, #464]	; (8005d64 <main+0x314>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8005b92:	4d75      	ldr	r5, [pc, #468]	; (8005d68 <main+0x318>)
  SD1.clock = STM32_USART1CLK;
 8005b94:	4975      	ldr	r1, [pc, #468]	; (8005d6c <main+0x31c>)
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8005b96:	2001      	movs	r0, #1
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005b98:	3274      	adds	r2, #116	; 0x74
 8005b9a:	7238      	strb	r0, [r7, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005b9e:	643a      	str	r2, [r7, #64]	; 0x40
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8005ba0:	62ff      	str	r7, [r7, #44]	; 0x2c
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8005ba2:	4a73      	ldr	r2, [pc, #460]	; (8005d70 <main+0x320>)
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8005ba4:	64fe      	str	r6, [r7, #76]	; 0x4c
 8005ba6:	67b9      	str	r1, [r7, #120]	; 0x78
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8005ba8:	677d      	str	r5, [r7, #116]	; 0x74
  oqp->q_link    = link;
 8005baa:	653f      	str	r7, [r7, #80]	; 0x50
 8005bac:	27c6      	movs	r7, #198	; 0xc6
 8005bae:	00b9      	lsls	r1, r7, #2
 8005bb0:	5856      	ldr	r6, [r2, r1]
 8005bb2:	0235      	lsls	r5, r6, #8
 8005bb4:	26c0      	movs	r6, #192	; 0xc0
 8005bb6:	0a2f      	lsrs	r7, r5, #8
 8005bb8:	0635      	lsls	r5, r6, #24
 8005bba:	433d      	orrs	r5, r7
 8005bbc:	5055      	str	r5, [r2, r1]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005bbe:	2780      	movs	r7, #128	; 0x80
 8005bc0:	21c0      	movs	r1, #192	; 0xc0
 8005bc2:	004e      	lsls	r6, r1, #1
 8005bc4:	053d      	lsls	r5, r7, #20
 8005bc6:	5195      	str	r5, [r2, r6]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005bc8:	6015      	str	r5, [r2, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005bca:	69e1      	ldr	r1, [r4, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005bcc:	4f69      	ldr	r7, [pc, #420]	; (8005d74 <main+0x324>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005bce:	4301      	orrs	r1, r0
 8005bd0:	61e1      	str	r1, [r4, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005bd2:	68bd      	ldr	r5, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005bd4:	2180      	movs	r1, #128	; 0x80

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005bd6:	4305      	orrs	r5, r0
 8005bd8:	60bd      	str	r5, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005bda:	4d67      	ldr	r5, [pc, #412]	; (8005d78 <main+0x328>)
 8005bdc:	05cf      	lsls	r7, r1, #23
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005bde:	2101      	movs	r1, #1

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005be0:	62bd      	str	r5, [r7, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005be2:	424d      	negs	r5, r1
 8005be4:	62fd      	str	r5, [r7, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8005be6:	61bb      	str	r3, [r7, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8005bea:	60fb      	str	r3, [r7, #12]
  STM32_ST_TIM->CR2    = 0;
 8005bec:	607b      	str	r3, [r7, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005bee:	6178      	str	r0, [r7, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005bf0:	6038      	str	r0, [r7, #0]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8005bf2:	27c3      	movs	r7, #195	; 0xc3
 8005bf4:	00b9      	lsls	r1, r7, #2
 8005bf6:	5857      	ldr	r7, [r2, r1]
 8005bf8:	4689      	mov	r9, r1
 8005bfa:	0239      	lsls	r1, r7, #8
 8005bfc:	0a0f      	lsrs	r7, r1, #8
 8005bfe:	46b8      	mov	r8, r7
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	0609      	lsls	r1, r1, #24
 8005c04:	4647      	mov	r7, r8
 8005c06:	430f      	orrs	r7, r1
 8005c08:	4649      	mov	r1, r9
 8005c0a:	5057      	str	r7, [r2, r1]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005c0c:	2780      	movs	r7, #128	; 0x80
 8005c0e:	0239      	lsls	r1, r7, #8
 8005c10:	5191      	str	r1, [r2, r6]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005c12:	6011      	str	r1, [r2, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005c14:	4a59      	ldr	r2, [pc, #356]	; (8005d7c <main+0x32c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 8005c16:	4f5a      	ldr	r7, [pc, #360]	; (8005d80 <main+0x330>)
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 8005c18:	6255      	str	r5, [r2, #36]	; 0x24
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8005c1a:	1c16      	adds	r6, r2, #0
 8005c1c:	4d59      	ldr	r5, [pc, #356]	; (8005d84 <main+0x334>)
 8005c1e:	361c      	adds	r6, #28
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8005c20:	6093      	str	r3, [r2, #8]
 8005c22:	61d6      	str	r6, [r2, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8005c24:	6216      	str	r6, [r2, #32]
  ch.vtlist.delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8005c26:	6293      	str	r3, [r2, #40]	; 0x28
 8005c28:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8005c2a:	6052      	str	r2, [r2, #4]
 8005c2c:	603d      	str	r5, [r7, #0]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8005c2e:	4f56      	ldr	r7, [pc, #344]	; (8005d88 <main+0x338>)
  endmem  = __heap_end__;
 8005c30:	4e56      	ldr	r6, [pc, #344]	; (8005d8c <main+0x33c>)
 8005c32:	4957      	ldr	r1, [pc, #348]	; (8005d90 <main+0x340>)
 8005c34:	4d57      	ldr	r5, [pc, #348]	; (8005d94 <main+0x344>)
 8005c36:	600e      	str	r6, [r1, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005c38:	1c3e      	adds	r6, r7, #0
 8005c3a:	3610      	adds	r6, #16
  H_NEXT(&default_heap.header) = NULL;
 8005c3c:	60bb      	str	r3, [r7, #8]
  H_PAGES(&default_heap.header) = 0;
 8005c3e:	60fb      	str	r3, [r7, #12]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8005c40:	603d      	str	r5, [r7, #0]
 8005c42:	613e      	str	r6, [r7, #16]
  tqp->prev = (thread_t *)tqp;
 8005c44:	617e      	str	r6, [r7, #20]
 8005c46:	61bb      	str	r3, [r7, #24]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005c48:	2751      	movs	r7, #81	; 0x51
 8005c4a:	55d3      	strb	r3, [r2, r7]
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8005c4c:	6653      	str	r3, [r2, #100]	; 0x64
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8005c4e:	6693      	str	r3, [r2, #104]	; 0x68
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8005c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8005c52:	2180      	movs	r1, #128	; 0x80
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8005c54:	2552      	movs	r5, #82	; 0x52
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8005c56:	2350      	movs	r3, #80	; 0x50
 8005c58:	5550      	strb	r0, [r2, r5]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8005c5a:	6391      	str	r1, [r2, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8005c5c:	66d1      	str	r1, [r2, #108]	; 0x6c
 8005c5e:	54d0      	strb	r0, [r2, r3]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8005c60:	4e4d      	ldr	r6, [pc, #308]	; (8005d98 <main+0x348>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c62:	484e      	ldr	r0, [pc, #312]	; (8005d9c <main+0x34c>)
  REG_INSERT(tp);
 8005c64:	1c11      	adds	r1, r2, #0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8005c66:	1c17      	adds	r7, r2, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005c68:	1c15      	adds	r5, r2, #0
 8005c6a:	3130      	adds	r1, #48	; 0x30
 8005c6c:	355c      	adds	r5, #92	; 0x5c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8005c6e:	3758      	adds	r7, #88	; 0x58
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8005c70:	6496      	str	r6, [r2, #72]	; 0x48
  REG_INSERT(tp);
 8005c72:	6412      	str	r2, [r2, #64]	; 0x40
 8005c74:	6452      	str	r2, [r2, #68]	; 0x44
 8005c76:	6111      	str	r1, [r2, #16]
 8005c78:	6151      	str	r1, [r2, #20]
 8005c7a:	6597      	str	r7, [r2, #88]	; 0x58
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005c7c:	65d5      	str	r5, [r2, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8005c7e:	6615      	str	r5, [r2, #96]	; 0x60
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8005c80:	6191      	str	r1, [r2, #24]
 8005c82:	6a06      	ldr	r6, [r0, #32]
 8005c84:	4a46      	ldr	r2, [pc, #280]	; (8005da0 <main+0x350>)
 8005c86:	4032      	ands	r2, r6
 8005c88:	6202      	str	r2, [r0, #32]
 8005c8a:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c8c:	b672      	cpsid	i
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 8005c8e:	4845      	ldr	r0, [pc, #276]	; (8005da4 <main+0x354>)
 8005c90:	f7fa ff8e 	bl	8000bb0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8005c94:	2100      	movs	r1, #0
 8005c96:	f7fb f863 	bl	8000d60 <chSchWakeupS>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005c9a:	b662      	cpsie	i
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c9c:	b672      	cpsid	i
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8005c9e:	492f      	ldr	r1, [pc, #188]	; (8005d5c <main+0x30c>)
 8005ca0:	7a0f      	ldrb	r7, [r1, #8]
 8005ca2:	2f01      	cmp	r7, #1
 8005ca4:	d104      	bne.n	8005cb0 <main+0x260>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8005ca6:	69a5      	ldr	r5, [r4, #24]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	01d8      	lsls	r0, r3, #7
 8005cac:	4328      	orrs	r0, r5
 8005cae:	61a0      	str	r0, [r4, #24]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8005cb0:	4e2a      	ldr	r6, [pc, #168]	; (8005d5c <main+0x30c>)
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8005cb2:	2196      	movs	r1, #150	; 0x96
 8005cb4:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8005cb6:	0209      	lsls	r1, r1, #8
 8005cb8:	1c10      	adds	r0, r2, #0
 8005cba:	9200      	str	r2, [sp, #0]
 8005cbc:	f7fa faa8 	bl	8000210 <__aeabi_uidiv>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8005cc0:	6f74      	ldr	r4, [r6, #116]	; 0x74
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005cc2:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <main+0x358>)
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8005cc4:	60e0      	str	r0, [r4, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	4241      	negs	r1, r0
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005cca:	2740      	movs	r7, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005ccc:	2501      	movs	r5, #1
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005cce:	6067      	str	r7, [r4, #4]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8005cd0:	2202      	movs	r2, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005cd2:	60a5      	str	r5, [r4, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005cd4:	6023      	str	r3, [r4, #0]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8005cd6:	6221      	str	r1, [r4, #32]
    default:
      sdp->rxmask = 0xFF;
    }
  }
  else {
    sdp->rxmask = 0xFF;
 8005cd8:	247c      	movs	r4, #124	; 0x7c
 8005cda:	5531      	strb	r1, [r6, r4]
 8005cdc:	7232      	strb	r2, [r6, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005cde:	b662      	cpsie	i
  /*
   * Activates the serial driver 1 using the driver default configuration.
   * PA9 and PA10 are routed to USART1.
   */
  sdStart(&SD1, NULL);
  palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(1));       /* USART1 TX.       */
 8005ce0:	2680      	movs	r6, #128	; 0x80
 8005ce2:	00b0      	lsls	r0, r6, #2
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(1));      /* USART1 RX.       */
 8005ce4:	2780      	movs	r7, #128	; 0x80
  /*
   * Activates the serial driver 1 using the driver default configuration.
   * PA9 and PA10 are routed to USART1.
   */
  sdStart(&SD1, NULL);
  palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(1));       /* USART1 TX.       */
 8005ce6:	f7fa fc3b 	bl	8000560 <_pal_lld_setgroupmode.constprop.8>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(1));      /* USART1 RX.       */
 8005cea:	00f8      	lsls	r0, r7, #3
 8005cec:	f7fa fc38 	bl	8000560 <_pal_lld_setgroupmode.constprop.8>

  /*
   * Creates the blinker threads.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	4a2e      	ldr	r2, [pc, #184]	; (8005dac <main+0x35c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	482e      	ldr	r0, [pc, #184]	; (8005db0 <main+0x360>)
 8005cf8:	f7fb fd52 	bl	80017a0 <chThdCreateStatic.constprop.56>
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	482d      	ldr	r0, [pc, #180]	; (8005db4 <main+0x364>)
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	4a2d      	ldr	r2, [pc, #180]	; (8005db8 <main+0x368>)
 8005d04:	f7fb fd4c 	bl	80017a0 <chThdCreateStatic.constprop.56>
 8005d08:	4d2c      	ldr	r5, [pc, #176]	; (8005dbc <main+0x36c>)
 8005d0a:	4b2d      	ldr	r3, [pc, #180]	; (8005dc0 <main+0x370>)
 8005d0c:	4c2d      	ldr	r4, [pc, #180]	; (8005dc4 <main+0x374>)
 8005d0e:	4e2e      	ldr	r6, [pc, #184]	; (8005dc8 <main+0x378>)
 8005d10:	46aa      	mov	sl, r5
 8005d12:	469b      	mov	fp, r3
 8005d14:	e05d      	b.n	8005dd2 <main+0x382>
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	ffbfffff 	.word	0xffbfffff
 8005d20:	40007000 	.word	0x40007000
 8005d24:	0000ffff 	.word	0x0000ffff
 8005d28:	64155554 	.word	0x64155554
 8005d2c:	01555555 	.word	0x01555555
 8005d30:	48000400 	.word	0x48000400
 8005d34:	0000fc3f 	.word	0x0000fc3f
 8005d38:	f00ff003 	.word	0xf00ff003
 8005d3c:	05500554 	.word	0x05500554
 8005d40:	48000800 	.word	0x48000800
 8005d44:	00055001 	.word	0x00055001
 8005d48:	55555555 	.word	0x55555555
 8005d4c:	48001000 	.word	0x48001000
 8005d50:	55555550 	.word	0x55555550
 8005d54:	48000c00 	.word	0x48000c00
 8005d58:	48001400 	.word	0x48001400
 8005d5c:	20000e30 	.word	0x20000e30
 8005d60:	080068ac 	.word	0x080068ac
 8005d64:	08000381 	.word	0x08000381
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	02dc6c00 	.word	0x02dc6c00
 8005d70:	e000e100 	.word	0xe000e100
 8005d74:	40015800 	.word	0x40015800
 8005d78:	000012bf 	.word	0x000012bf
 8005d7c:	20000ff8 	.word	0x20000ff8
 8005d80:	20000bf4 	.word	0x20000bf4
 8005d84:	200010a8 	.word	0x200010a8
 8005d88:	20001088 	.word	0x20001088
 8005d8c:	20004000 	.word	0x20004000
 8005d90:	20000bf0 	.word	0x20000bf0
 8005d94:	080003a1 	.word	0x080003a1
 8005d98:	08006844 	.word	0x08006844
 8005d9c:	e000ed00 	.word	0xe000ed00
 8005da0:	ff00ffff 	.word	0xff00ffff
 8005da4:	080067ec 	.word	0x080067ec
 8005da8:	0000012d 	.word	0x0000012d
 8005dac:	08005a21 	.word	0x08005a21
 8005db0:	20000eb0 	.word	0x20000eb0
 8005db4:	20000c00 	.word	0x20000c00
 8005db8:	080059e1 	.word	0x080059e1
 8005dbc:	20001074 	.word	0x20001074
 8005dc0:	2000106c 	.word	0x2000106c
 8005dc4:	20000e2c 	.word	0x20000e2c
 8005dc8:	20001070 	.word	0x20001070
   * driver 1.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
      test_execute((BaseSequentialStream *)&SD1);
    chThdSleepMilliseconds(500);
 8005dcc:	488c      	ldr	r0, [pc, #560]	; (8006000 <main+0x5b0>)
 8005dce:	f7ff fb37 	bl	8005440 <chThdSleep>
   * sleeping in a loop and check the button state, when the button is
   * pressed the test procedure is launched with output on the serial
   * driver 1.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
 8005dd2:	2090      	movs	r0, #144	; 0x90
 8005dd4:	05c1      	lsls	r1, r0, #23
 8005dd6:	690a      	ldr	r2, [r1, #16]
 8005dd8:	2701      	movs	r7, #1
 8005dda:	4217      	tst	r7, r2
 8005ddc:	d0f6      	beq.n	8005dcc <main+0x37c>
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream) {
  int i, j;

  test_chp = stream;
 8005dde:	4d89      	ldr	r5, [pc, #548]	; (8006004 <main+0x5b4>)
  test_println("");
 8005de0:	4889      	ldr	r0, [pc, #548]	; (8006008 <main+0x5b8>)
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream) {
  int i, j;

  test_chp = stream;
 8005de2:	6025      	str	r5, [r4, #0]
  test_println("");
 8005de4:	f7fa fcb4 	bl	8000750 <test_println>
#if defined(TEST_SUITE_NAME)
  test_println("*** " TEST_SUITE_NAME);
 8005de8:	4888      	ldr	r0, [pc, #544]	; (800600c <main+0x5bc>)
 8005dea:	f7fa fcb1 	bl	8000750 <test_println>
#else
  test_println("*** ChibiOS test suite");
#endif
  test_println("***");
 8005dee:	4888      	ldr	r0, [pc, #544]	; (8006010 <main+0x5c0>)
 8005df0:	f7fa fcae 	bl	8000750 <test_println>
 8005df4:	4f87      	ldr	r7, [pc, #540]	; (8006014 <main+0x5c4>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005df6:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	3701      	adds	r7, #1
 8005dfc:	6803      	ldr	r3, [r0, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	4790      	blx	r2
}

/*
 * Application entry point.
 */
int main(void) {
 8005e02:	1e78      	subs	r0, r7, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e04:	7801      	ldrb	r1, [r0, #0]
 8005e06:	2900      	cmp	r1, #0
 8005e08:	d1f6      	bne.n	8005df8 <main+0x3a8>
#else
  test_println("*** ChibiOS test suite");
#endif
  test_println("***");
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8005e0a:	4883      	ldr	r0, [pc, #524]	; (8006018 <main+0x5c8>)
 8005e0c:	f7fa fca0 	bl	8000750 <test_println>
 8005e10:	4d82      	ldr	r5, [pc, #520]	; (800601c <main+0x5cc>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e12:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	3501      	adds	r5, #1
 8005e18:	6807      	ldr	r7, [r0, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4798      	blx	r3
 8005e1e:	1e69      	subs	r1, r5, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e20:	7809      	ldrb	r1, [r1, #0]
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d1f6      	bne.n	8005e14 <main+0x3c4>
  test_println("***");
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8005e26:	487e      	ldr	r0, [pc, #504]	; (8006020 <main+0x5d0>)
 8005e28:	f7fa fc92 	bl	8000750 <test_println>
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e2c:	222a      	movs	r2, #42	; 0x2a
 8005e2e:	4f7d      	ldr	r7, [pc, #500]	; (8006024 <main+0x5d4>)
 8005e30:	1c11      	adds	r1, r2, #0
    streamPut(test_chp, *msgp++);
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	3701      	adds	r7, #1
 8005e36:	6805      	ldr	r5, [r0, #0]
 8005e38:	68ab      	ldr	r3, [r5, #8]
 8005e3a:	4798      	blx	r3
 8005e3c:	1e78      	subs	r0, r7, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e3e:	7801      	ldrb	r1, [r0, #0]
 8005e40:	2900      	cmp	r1, #0
 8005e42:	d1f6      	bne.n	8005e32 <main+0x3e2>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8005e44:	4878      	ldr	r0, [pc, #480]	; (8006028 <main+0x5d8>)
 8005e46:	1c0d      	adds	r5, r1, #0
 8005e48:	f7fa fc82 	bl	8000750 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8005e4c:	486e      	ldr	r0, [pc, #440]	; (8006008 <main+0x5b8>)
 8005e4e:	f7fa fc7f 	bl	8000750 <test_println>

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
 8005e52:	4f76      	ldr	r7, [pc, #472]	; (800602c <main+0x5dc>)
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");

  test_global_fail = false;
 8005e54:	4976      	ldr	r1, [pc, #472]	; (8006030 <main+0x5e0>)
  i = 0;
  while (test_suite[i]) {
 8005e56:	683b      	ldr	r3, [r7, #0]
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");

  test_global_fail = false;
 8005e58:	700d      	strb	r5, [r1, #0]
  i = 0;
  while (test_suite[i]) {
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d100      	bne.n	8005e60 <main+0x410>
 8005e5e:	e0af      	b.n	8005fc0 <main+0x570>
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");

  test_global_fail = false;
  i = 0;
 8005e60:	2200      	movs	r2, #0
 8005e62:	46b9      	mov	r9, r7
 8005e64:	9201      	str	r2, [sp, #4]
}

static void print_tokens(void) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp)
 8005e66:	2500      	movs	r5, #0
 8005e68:	46a8      	mov	r8, r5
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	9801      	ldr	r0, [sp, #4]
 8005e6e:	008f      	lsls	r7, r1, #2

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
 8005e70:	59db      	ldr	r3, [r3, r7]
 8005e72:	3001      	adds	r0, #1
 8005e74:	9001      	str	r0, [sp, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d100      	bne.n	8005e7c <main+0x42c>
 8005e7a:	e09a      	b.n	8005fb2 <main+0x562>
      print_line();
 8005e7c:	f7fa fe20 	bl	8000ac0 <print_line.7640>
 8005e80:	4d6c      	ldr	r5, [pc, #432]	; (8006034 <main+0x5e4>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e82:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	3501      	adds	r5, #1
 8005e88:	6802      	ldr	r2, [r0, #0]
 8005e8a:	6893      	ldr	r3, [r2, #8]
 8005e8c:	4798      	blx	r3
 8005e8e:	1e69      	subs	r1, r5, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005e90:	7809      	ldrb	r1, [r1, #0]
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d1f6      	bne.n	8005e84 <main+0x434>
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8005e96:	9801      	ldr	r0, [sp, #4]
 8005e98:	f7fa fc92 	bl	80007c0 <test_printn>
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	212e      	movs	r1, #46	; 0x2e
 8005ea0:	6805      	ldr	r5, [r0, #0]
 8005ea2:	68aa      	ldr	r2, [r5, #8]
 8005ea4:	4790      	blx	r2
    while (test_suite[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	4480      	add	r8, r0
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f7fa fc88 	bl	80007c0 <test_printn>
 8005eb0:	4d61      	ldr	r5, [pc, #388]	; (8006038 <main+0x5e8>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005eb2:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	6803      	ldr	r3, [r0, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	4790      	blx	r2
 8005ebe:	1e69      	subs	r1, r5, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005ec0:	7809      	ldrb	r1, [r1, #0]
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	d1f6      	bne.n	8005eb4 <main+0x464>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(test_suite[i][j]->name);
 8005ec6:	4648      	mov	r0, r9
 8005ec8:	6805      	ldr	r5, [r0, #0]
 8005eca:	59eb      	ldr	r3, [r5, r7]
 8005ecc:	681d      	ldr	r5, [r3, #0]
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005ece:	7829      	ldrb	r1, [r5, #0]
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d007      	beq.n	8005ee4 <main+0x494>
    streamPut(test_chp, *msgp++);
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	6802      	ldr	r2, [r0, #0]
 8005eda:	6893      	ldr	r3, [r2, #8]
 8005edc:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005ede:	7829      	ldrb	r1, [r5, #0]
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d1f7      	bne.n	8005ed4 <main+0x484>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(test_suite[i][j]->name);
      test_println(")");
 8005ee4:	4855      	ldr	r0, [pc, #340]	; (800603c <main+0x5ec>)
 8005ee6:	f7fa fc33 	bl	8000750 <test_println>
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {

  chThdSleep(time);
 8005eea:	21fa      	movs	r1, #250	; 0xfa
 8005eec:	00c8      	lsls	r0, r1, #3
 8005eee:	f7ff faa7 	bl	8005440 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
 8005ef2:	4648      	mov	r0, r9
 8005ef4:	6805      	ldr	r5, [r0, #0]

static void execute_test(const testcase_t *tcp) {

  /* Initialization */
  clear_tokens();
  test_local_fail = false;
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <main+0x5f0>)
      test_print(test_suite[i][j]->name);
      test_println(")");
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
 8005ef8:	59ed      	ldr	r5, [r5, r7]

static void execute_test(const testcase_t *tcp) {

  /* Initialization */
  clear_tokens();
  test_local_fail = false;
 8005efa:	2200      	movs	r2, #0

  if (tcp->setup != NULL)
 8005efc:	6869      	ldr	r1, [r5, #4]
/* Module local functions.                                                   */
/*===========================================================================*/

static void clear_tokens(void) {

  test_tokp = test_tokens_buffer;
 8005efe:	4657      	mov	r7, sl
 8005f00:	6037      	str	r7, [r6, #0]

static void execute_test(const testcase_t *tcp) {

  /* Initialization */
  clear_tokens();
  test_local_fail = false;
 8005f02:	701a      	strb	r2, [r3, #0]

  if (tcp->setup != NULL)
 8005f04:	2900      	cmp	r1, #0
 8005f06:	d000      	beq.n	8005f0a <main+0x4ba>
    tcp->setup();
 8005f08:	4788      	blx	r1
  tcp->execute();
 8005f0a:	68e8      	ldr	r0, [r5, #12]
 8005f0c:	4780      	blx	r0
  if (tcp->teardown != NULL)
 8005f0e:	68ad      	ldr	r5, [r5, #8]
 8005f10:	2d00      	cmp	r5, #0
 8005f12:	d000      	beq.n	8005f16 <main+0x4c6>
    tcp->teardown();
 8005f14:	47a8      	blx	r5
      test_println(")");
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
      if (test_local_fail) {
 8005f16:	4f4a      	ldr	r7, [pc, #296]	; (8006040 <main+0x5f0>)
 8005f18:	783a      	ldrb	r2, [r7, #0]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d068      	beq.n	8005ff0 <main+0x5a0>
 8005f1e:	4d49      	ldr	r5, [pc, #292]	; (8006044 <main+0x5f4>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f20:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8005f22:	6820      	ldr	r0, [r4, #0]
 8005f24:	3501      	adds	r5, #1
 8005f26:	6803      	ldr	r3, [r0, #0]
 8005f28:	689f      	ldr	r7, [r3, #8]
 8005f2a:	47b8      	blx	r7
 8005f2c:	1e69      	subs	r1, r5, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f2e:	7809      	ldrb	r1, [r1, #0]
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d1f6      	bne.n	8005f22 <main+0x4d2>
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
      if (test_local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8005f34:	4658      	mov	r0, fp
 8005f36:	6800      	ldr	r0, [r0, #0]
 8005f38:	f7fa fc42 	bl	80007c0 <test_printn>
 8005f3c:	4d42      	ldr	r5, [pc, #264]	; (8006048 <main+0x5f8>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f3e:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	3501      	adds	r5, #1
 8005f44:	6802      	ldr	r2, [r0, #0]
 8005f46:	1e6f      	subs	r7, r5, #1
 8005f48:	6893      	ldr	r3, [r2, #8]
 8005f4a:	4798      	blx	r3
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f4c:	7839      	ldrb	r1, [r7, #0]
 8005f4e:	2900      	cmp	r1, #0
 8005f50:	d1f6      	bne.n	8005f40 <main+0x4f0>
}

static void print_tokens(void) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp)
 8005f52:	6831      	ldr	r1, [r6, #0]
 8005f54:	4655      	mov	r5, sl
 8005f56:	4551      	cmp	r1, sl
 8005f58:	d908      	bls.n	8005f6c <main+0x51c>
    streamPut(test_chp, *cp++);
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	7829      	ldrb	r1, [r5, #0]
 8005f5e:	6802      	ldr	r2, [r0, #0]
 8005f60:	3501      	adds	r5, #1
 8005f62:	6893      	ldr	r3, [r2, #8]
 8005f64:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = test_tokens_buffer;

  while (cp < test_tokp)
 8005f66:	6830      	ldr	r0, [r6, #0]
 8005f68:	4285      	cmp	r5, r0
 8005f6a:	d3f6      	bcc.n	8005f5a <main+0x50a>
 8005f6c:	4f37      	ldr	r7, [pc, #220]	; (800604c <main+0x5fc>)
 8005f6e:	215d      	movs	r1, #93	; 0x5d
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
    streamPut(test_chp, *msgp++);
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	3701      	adds	r7, #1
 8005f74:	6805      	ldr	r5, [r0, #0]
 8005f76:	68aa      	ldr	r2, [r5, #8]
 8005f78:	4790      	blx	r2
 8005f7a:	1e79      	subs	r1, r7, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f7c:	7809      	ldrb	r1, [r1, #0]
 8005f7e:	2900      	cmp	r1, #0
 8005f80:	d1f6      	bne.n	8005f70 <main+0x520>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8005f82:	4b33      	ldr	r3, [pc, #204]	; (8006050 <main+0x600>)
 8005f84:	681f      	ldr	r7, [r3, #0]
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f86:	7839      	ldrb	r1, [r7, #0]
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	d007      	beq.n	8005f9c <main+0x54c>
    streamPut(test_chp, *msgp++);
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	3701      	adds	r7, #1
 8005f90:	6805      	ldr	r5, [r0, #0]
 8005f92:	68aa      	ldr	r2, [r5, #8]
 8005f94:	4790      	blx	r2
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f96:	7839      	ldrb	r1, [r7, #0]
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d1f7      	bne.n	8005f8c <main+0x53c>
        test_printn(test_step);
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
 8005f9c:	482d      	ldr	r0, [pc, #180]	; (8006054 <main+0x604>)
 8005f9e:	f7fa fbd7 	bl	8000750 <test_println>
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	6803      	ldr	r3, [r0, #0]
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	008f      	lsls	r7, r1, #2

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
 8005faa:	59db      	ldr	r3, [r3, r7]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d000      	beq.n	8005fb2 <main+0x562>
 8005fb0:	e764      	b.n	8005e7c <main+0x42c>
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	4491      	add	r9, r2
#endif
  test_println("");

  test_global_fail = false;
  i = 0;
  while (test_suite[i]) {
 8005fb6:	4648      	mov	r0, r9
 8005fb8:	6803      	ldr	r3, [r0, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d000      	beq.n	8005fc0 <main+0x570>
 8005fbe:	e752      	b.n	8005e66 <main+0x416>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8005fc0:	f7fa fd7e 	bl	8000ac0 <print_line.7640>
  test_println("");
 8005fc4:	4810      	ldr	r0, [pc, #64]	; (8006008 <main+0x5b8>)
 8005fc6:	f7fa fbc3 	bl	8000750 <test_println>
 8005fca:	4d23      	ldr	r5, [pc, #140]	; (8006058 <main+0x608>)
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005fcc:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8005fce:	6820      	ldr	r0, [r4, #0]
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	6807      	ldr	r7, [r0, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	4790      	blx	r2
 8005fd8:	1e69      	subs	r1, r5, #1
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005fda:	7809      	ldrb	r1, [r1, #0]
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	d1f6      	bne.n	8005fce <main+0x57e>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8005fe0:	4813      	ldr	r0, [pc, #76]	; (8006030 <main+0x5e0>)
 8005fe2:	7803      	ldrb	r3, [r0, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <main+0x5a8>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8005fe8:	481c      	ldr	r0, [pc, #112]	; (800605c <main+0x60c>)
 8005fea:	f7fa fbb1 	bl	8000750 <test_println>
 8005fee:	e6ed      	b.n	8005dcc <main+0x37c>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else
        test_println("--- Result: SUCCESS");
 8005ff0:	481b      	ldr	r0, [pc, #108]	; (8006060 <main+0x610>)
 8005ff2:	f7fa fbad 	bl	8000750 <test_println>
 8005ff6:	e7d4      	b.n	8005fa2 <main+0x552>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8005ff8:	481a      	ldr	r0, [pc, #104]	; (8006064 <main+0x614>)
 8005ffa:	f7fa fba9 	bl	8000750 <test_println>
 8005ffe:	e6e5      	b.n	8005dcc <main+0x37c>
 8006000:	00001388 	.word	0x00001388
 8006004:	20000e30 	.word	0x20000e30
 8006008:	0800647c 	.word	0x0800647c
 800600c:	08006bd8 	.word	0x08006bd8
 8006010:	08006bf4 	.word	0x08006bf4
 8006014:	08006bf9 	.word	0x08006bf9
 8006018:	08006c74 	.word	0x08006c74
 800601c:	08006c8d 	.word	0x08006c8d
 8006020:	08006ca0 	.word	0x08006ca0
 8006024:	08006cd1 	.word	0x08006cd1
 8006028:	08006c0c 	.word	0x08006c0c
 800602c:	2000047c 	.word	0x2000047c
 8006030:	20000e28 	.word	0x20000e28
 8006034:	08006c25 	.word	0x08006c25
 8006038:	08006ce5 	.word	0x08006ce5
 800603c:	08006c34 	.word	0x08006c34
 8006040:	20000bf8 	.word	0x20000bf8
 8006044:	08006c39 	.word	0x08006c39
 8006048:	08006ce9 	.word	0x08006ce9
 800604c:	08006c51 	.word	0x08006c51
 8006050:	20000d48 	.word	0x20000d48
 8006054:	08006c54 	.word	0x08006c54
 8006058:	08006ced 	.word	0x08006ced
 800605c:	08006c64 	.word	0x08006c64
 8006060:	08006c58 	.word	0x08006c58
 8006064:	08006c6c 	.word	0x08006c6c
 8006068:	46c0      	nop			; (mov r8, r8)
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46c0      	nop			; (mov r8, r8)
 800606e:	46c0      	nop			; (mov r8, r8)
